/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Disposable } from "./WeakRefInstance";
interface WindowWithKeyborg extends Window {
    __keyborg?: {
        core: KeyborgCore;
        refs: {
            [id: string]: Keyborg;
        };
    };
}
export declare type KeyborgCallback = (isNavigatingWithKeyboard: boolean) => void;
/**
 * Source of truth for all the keyborg core instances and the current keyboard navigation state
 */
export declare class KeyborgState {
    private __keyborgCoreRefs;
    private _isNavigatingWithKeyboard;
    add(keyborg: KeyborgCore): void;
    remove(id: string): void;
    setVal(isNavigatingWithKeyboard: boolean): void;
    getVal(): boolean;
}
/**
 * Manages a collection of Keyborg instances in a window/document and updates keyborg state
 */
declare class KeyborgCore implements Disposable {
    readonly id: string;
    private _win?;
    private _isMouseUsed;
    private _dismissTimer;
    constructor(win: WindowWithKeyborg);
    dispose(): void;
    isDisposed(): boolean;
    /**
     * Updates all keyborg instances with the keyboard navigation state
     */
    update(isNavigatingWithKeyboard: boolean): void;
    private _onFocusIn;
    private _onMouseDown;
    private _onKeyDown;
    private _scheduleDismiss;
}
/**
 * Used to determine the keyboard navigation state
 */
export declare class Keyborg {
    private _id;
    private _win?;
    private _core?;
    private _cb;
    static create(win: WindowWithKeyborg): Keyborg;
    static dispose(instance: Keyborg): void;
    /**
     * Updates all subscribed callbacks with the keyboard navigation state
     */
    static update(instance: Keyborg, isNavigatingWithKeyboard: boolean): void;
    private constructor();
    private dispose;
    /**
     * @returns Whether the user is navigating with keyboard
     */
    isNavigatingWithKeyboard(): boolean;
    /**
     * @param callback - Called when the keyboard navigation state changes
     */
    subscribe(callback: KeyborgCallback): void;
    /**
     * @param callback - Registered with subscribe
     */
    unsubscribe(callback: KeyborgCallback): void;
    /**
     * Manually set the keyboard navigtion state
     */
    setVal(isNavigatingWithKeyboard: boolean): void;
}
export declare function createKeyborg(win: Window): Keyborg;
export declare function disposeKeyborg(instance: Keyborg): void;
export {};
