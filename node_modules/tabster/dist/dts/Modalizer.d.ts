/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as Types from "./Types";
import { TabsterPart } from "./Utils";
export declare class Modalizer extends TabsterPart<Types.ModalizerProps> implements Types.Modalizer {
    readonly internalId: string;
    userId: string;
    private _isActive;
    private _isFocused;
    /**
     * Parent of modalizer Root, can be used for DOM cleanup if the modalizerRoot is no longer present
     */
    private _modalizerParent;
    private _onDispose;
    private _moveOutWithDefault;
    private _onActiveChange;
    constructor(tabster: Types.TabsterCore, element: HTMLElement, onDispose: (modalizer: Modalizer) => void, moveOutWithDefault: (backwards: boolean) => void, onActiveChange: (active: boolean) => void, props: Types.ModalizerProps);
    private _onKeyDown;
    setProps(props: Types.ModalizerProps): void;
    dispose(): void;
    setActive(active: boolean): void;
    isActive(): boolean;
    contains(element: HTMLElement): boolean;
    onBeforeFocusOut(): boolean;
    private _remove;
    private _setAccessibilityProps;
}
export declare class ModalizerAPI implements Types.ModalizerAPI {
    private _tabster;
    private _win;
    private _initTimer;
    private _dummyManager?;
    /** The currently active modalizer */
    activeModalizer: Types.Modalizer | undefined;
    private _focusOutTimer;
    private _restoreModalizerFocusTimer;
    /**
     * Modalizers managed by this API, stored by id
     */
    private _modalizers;
    constructor(tabster: Types.TabsterCore);
    private _init;
    dispose(): void;
    createModalizer(element: HTMLElement, props: Types.ModalizerProps): Types.Modalizer;
    private _onModalizerDispose;
    focus(elementFromModalizer: HTMLElement, noFocusFirst?: boolean, noFocusDefault?: boolean): boolean;
    updateModalizer(modalizer: Types.Modalizer, removed?: boolean): void;
    /**
     * Subscribes to the focus state and handles modalizer related focus events
     * @param e - Element that is focused
     * @param details - Additional data about the focus event
     */
    private _onFocus;
    /**
     * Called when an element is focused outside of an active modalizer.
     * Attempts to pull focus back into the active modalizer
     * @param outsideElement - An element being focused outside of the modalizer
     */
    private _restoreModalizerFocus;
}
