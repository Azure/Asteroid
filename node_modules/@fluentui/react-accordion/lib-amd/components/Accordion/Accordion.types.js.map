{"version":3,"file":"Accordion.types.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-accordion/src/components/Accordion/Accordion.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';\nimport type { AccordionItemValue } from '../AccordionItem/AccordionItem.types';\n\nexport type AccordionIndex = number | number[];\n\nexport type AccordionToggleEvent<E = HTMLElement> = React.MouseEvent<E> | React.KeyboardEvent<E>;\n\nexport type AccordionToggleEventHandler = (event: AccordionToggleEvent, data: AccordionToggleData) => void;\n\nexport type AccordionContextValue = Required<Pick<AccordionProps, 'collapsible'>> &\n  Pick<AccordionProps, 'navigation'> & {\n    /**\n     * The list of opened panels by index\n     */\n    openItems: AccordionItemValue[];\n    /**\n     * Callback used by AccordionItem to request a change on it's own opened state\n     * Should be used to toggle AccordionItem\n     */\n    requestToggle: (event: AccordionToggleEvent, data: AccordionToggleData) => void;\n  };\n\nexport type AccordionContextValues = {\n  accordion: AccordionContextValue;\n};\n\nexport type AccordionSlots = {\n  root: Slot<'div'>;\n};\n\nexport type AccordionToggleData = {\n  value: AccordionItemValue;\n};\n\nexport type AccordionProps = ComponentProps<AccordionSlots> & {\n  /**\n   * Default value for the uncontrolled state of the panel.\n   */\n  defaultOpenItems?: AccordionItemValue | AccordionItemValue[];\n\n  /**\n   * Indicates if Accordion support multiple Panels closed at the same time.\n   */\n  collapsible?: boolean;\n\n  /**\n   * Indicates if Accordion support multiple Panels opened at the same time.\n   */\n  multiple?: boolean;\n\n  /**\n   * Indicates if keyboard navigation is available and gives two options, linear or circular navigation.\n   */\n  navigation?: 'linear' | 'circular';\n\n  /**\n   * Callback to be called when the opened items change.\n   */\n  onToggle?: AccordionToggleEventHandler;\n\n  /**\n   * Controls the state of the panel.\n   */\n  openItems?: AccordionItemValue | AccordionItemValue[];\n};\n\nexport type AccordionState = ComponentState<AccordionSlots> & AccordionContextValue;\n"]}