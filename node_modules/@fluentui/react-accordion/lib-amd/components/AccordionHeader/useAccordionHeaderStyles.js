define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-tabster", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_tabster_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAccordionHeaderStyles_unstable = exports.accordionHeaderClassNames = void 0;
    exports.accordionHeaderClassNames = {
        root: 'fui-AccordionHeader',
        button: 'fui-AccordionHeader__button',
        expandIcon: 'fui-AccordionHeader__expandIcon',
        icon: 'fui-AccordionHeader__icon',
    };
    var useStyles = react_1.makeStyles({
        // TODO: this should be extracted to another package
        resetButton: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ boxSizing: 'content-box', backgroundColor: 'inherit', color: 'inherit', fontFamily: 'inherit', fontSize: 'inherit', lineHeight: 'normal' }, react_1.shorthands.overflow('visible')), react_1.shorthands.padding(0)), { WebkitAppearance: 'button', textAlign: 'unset' }),
        focusIndicator: react_tabster_1.createFocusOutlineStyle(),
        root: tslib_1.__assign(tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground1, backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.margin(0)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)),
        rootDisabled: {
            backgroundImage: 'none',
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
        },
        rootInline: {
            display: 'inline-block',
        },
        button: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'relative', width: '100%' }, react_1.shorthands.border('1px', 'solid', 'transparent')), react_1.shorthands.padding(0, react_theme_1.tokens.spacingHorizontalM, 0, react_theme_1.tokens.spacingHorizontalMNudge)), { height: '44px', display: 'flex', alignItems: 'center', cursor: 'pointer' }), react_theme_1.typographyStyles.body1), { boxSizing: 'border-box' }),
        buttonSmall: {
            height: '32px',
            fontSize: react_theme_1.tokens.fontSizeBase200,
        },
        buttonLarge: {
            lineHeight: react_theme_1.tokens.lineHeightBase400,
            fontSize: react_theme_1.tokens.fontSizeBase400,
        },
        buttonExtraLarge: {
            lineHeight: react_theme_1.tokens.lineHeightBase500,
            fontSize: react_theme_1.tokens.fontSizeBase500,
        },
        buttonInline: {
            display: 'inline-flex',
        },
        buttonExpandIconEndNoIcon: {
            paddingLeft: react_theme_1.tokens.spacingHorizontalM,
        },
        buttonExpandIconEnd: {
            paddingRight: react_theme_1.tokens.spacingHorizontalMNudge,
        },
        expandIcon: {
            height: '100%',
            display: 'flex',
            alignItems: 'center',
            lineHeight: react_theme_1.tokens.lineHeightBase500,
            fontSize: react_theme_1.tokens.fontSizeBase500,
        },
        expandIconStart: {
            paddingRight: react_theme_1.tokens.spacingHorizontalS,
        },
        expandIconEnd: {
            flexGrow: 1,
            flexShrink: 1,
            flexBasis: '0%',
            display: 'flex',
            justifyContent: 'flex-end',
            paddingLeft: react_theme_1.tokens.spacingHorizontalS,
        },
        icon: {
            height: '100%',
            display: 'flex',
            alignItems: 'center',
            paddingRight: react_theme_1.tokens.spacingHorizontalS,
            lineHeight: react_theme_1.tokens.lineHeightBase500,
            fontSize: react_theme_1.tokens.fontSizeBase500,
        },
    });
    /** Applies style classnames to slots */
    var useAccordionHeaderStyles_unstable = function (state) {
        var styles = useStyles();
        state.root.className = react_1.mergeClasses(exports.accordionHeaderClassNames.root, styles.root, state.inline && styles.rootInline, state.disabled && styles.rootDisabled, state.root.className);
        state.button.className = react_1.mergeClasses(exports.accordionHeaderClassNames.button, styles.resetButton, styles.button, styles.focusIndicator, state.expandIconPosition === 'end' && !state.icon && styles.buttonExpandIconEndNoIcon, state.expandIconPosition === 'end' && styles.buttonExpandIconEnd, state.inline && styles.buttonInline, state.size === 'small' && styles.buttonSmall, state.size === 'large' && styles.buttonLarge, state.size === 'extra-large' && styles.buttonExtraLarge, state.button.className);
        if (state.expandIcon) {
            state.expandIcon.className = react_1.mergeClasses(exports.accordionHeaderClassNames.expandIcon, styles.expandIcon, state.expandIconPosition === 'start' && styles.expandIconStart, state.expandIconPosition === 'end' && styles.expandIconEnd, state.expandIcon.className);
        }
        if (state.icon) {
            state.icon.className = react_1.mergeClasses(exports.accordionHeaderClassNames.icon, styles.icon, state.icon.className);
        }
        return state;
    };
    exports.useAccordionHeaderStyles_unstable = useAccordionHeaderStyles_unstable;
});
//# sourceMappingURL=useAccordionHeaderStyles.js.map