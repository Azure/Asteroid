{"version":3,"file":"useAccordionHeader.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-accordion/src/components/AccordionHeader/useAccordionHeader.tsx"],"names":[],"mappings":";;;;IASA;;;;OAIG;IACI,IAAM,2BAA2B,GAAG,UACzC,KAA2B,EAC3B,GAA2B;QAEnB,IAAA,EAAE,GAA8F,KAAK,GAAnG,EAAE,IAAI,GAAwF,KAAK,KAA7F,EAAE,MAAM,GAAgF,KAAK,OAArF,EAAE,UAAU,GAAoE,KAAK,WAAzE,EAAE,KAAkE,KAAK,OAAzD,EAAd,MAAM,mBAAG,KAAK,KAAA,EAAE,KAAkD,KAAK,KAAxC,EAAf,IAAI,mBAAG,QAAQ,KAAA,EAAE,KAAiC,KAAK,mBAAV,EAA5B,kBAAkB,mBAAG,OAAO,KAAA,CAAW;QACxG,IAAA,KAA4D,wCAAgC,EAAE,EAA7E,sBAAsB,mBAAA,EAAE,QAAQ,cAAA,EAAE,IAAI,UAAuC,CAAC;QAErG;;;WAGG;QACH,IAAM,iBAAiB,GAAG,+CAA4B,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,EAAtD,CAAsD,CAAC,CAAC;QAE9G,IAAA,GAAG,GAAK,0CAAS,EAAE,IAAhB,CAAiB;QAE5B,oEAAoE;QACpE,IAAI,kBAAsC,CAAC;QAC3C,IAAI,kBAAkB,KAAK,KAAK,EAAE;YAChC,8FAA8F;YAC9F,kBAAkB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;SACtC;aAAM;YACL,mGAAmG;YACnG,kBAAkB,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;SAC1D;QAED,IAAM,eAAe,GAAG,mCAAsB,CAAC,MAAM,EAAE;YACrD,QAAQ,EAAE,IAAI;YACd,YAAY,EAAE;gBACZ,QAAQ,UAAA;gBACR,iBAAiB,mBAAA;gBACjB,eAAe,EAAE,IAAI;gBACrB,IAAI,EAAE,QAAQ;aACf;SACF,CAAC,CAAC;QAEH,OAAO;YACL,QAAQ,UAAA;YACR,IAAI,MAAA;YACJ,IAAI,MAAA;YACJ,MAAM,QAAA;YACN,kBAAkB,oBAAA;YAClB,UAAU,EAAE;gBACV,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE,QAAQ;gBAChB,UAAU,EAAE,MAAM;gBAClB,IAAI,EAAE,KAAK;aACZ;YACD,IAAI,EAAE,uCAAqB,CAAC,EAAE,IAAI,KAAK,qBACrC,GAAG,KAAA,IACA,KAAK,EACR;YACF,IAAI,EAAE,kCAAgB,CAAC,IAAI,CAAC;YAC5B,UAAU,EAAE,kCAAgB,CAAC,UAAU,EAAE;gBACvC,QAAQ,EAAE,IAAI;gBACd,YAAY,EAAE;oBACZ,QAAQ,EAAE,oBAAC,iCAAmB,IAAC,KAAK,EAAE,EAAE,SAAS,EAAE,YAAU,kBAAkB,SAAM,EAAE,GAAI;oBAC3F,aAAa,EAAE,IAAI;iBACpB;aACF,CAAC;YACF,MAAM,wCACD,eAAe,KAClB,OAAO,EAAE,kCAAgB,CACvB,UAAC,EAA8F;;oBAC7F,MAAA,eAAe,CAAC,OAAO,+CAAvB,eAAe,EAAW,EAAE,CAAC,CAAC;oBAC9B,IAAI,CAAC,EAAE,CAAC,gBAAgB,EAAE;wBACxB,sBAAsB,CAAC,EAAE,CAAC,CAAC;qBAC5B;gBACH,CAAC,CACF,GACF;SACF,CAAC;IACJ,CAAC,CAAC;IAvEW,QAAA,2BAA2B,+BAuEtC","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useEventCallback } from '@fluentui/react-utilities';\nimport { useAccordionItemContext_unstable } from '../AccordionItem/index';\nimport { useARIAButtonShorthand } from '@fluentui/react-aria';\nimport type { AccordionHeaderProps, AccordionHeaderState } from './AccordionHeader.types';\nimport { useAccordionContext_unstable } from '../Accordion/AccordionContext';\nimport { ChevronRightRegular } from '@fluentui/react-icons';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Returns the props and state required to render the component\n * @param props - AccordionHeader properties\n * @param ref - reference to root HTMLElement of AccordionHeader\n */\nexport const useAccordionHeader_unstable = (\n  props: AccordionHeaderProps,\n  ref: React.Ref<HTMLElement>,\n): AccordionHeaderState => {\n  const { as, icon, button, expandIcon, inline = false, size = 'medium', expandIconPosition = 'start' } = props;\n  const { onHeaderClick: onAccordionHeaderClick, disabled, open } = useAccordionItemContext_unstable();\n\n  /**\n   * force disabled state on button if accordion isn't collapsible\n   * and this is the only item opened\n   */\n  const disabledFocusable = useAccordionContext_unstable(ctx => !ctx.collapsible && ctx.openItems.length === 1 && open);\n\n  const { dir } = useFluent();\n\n  // Calculate how to rotate the expand icon [>] (ChevronRightRegular)\n  let expandIconRotation: 0 | 90 | -90 | 180;\n  if (expandIconPosition === 'end') {\n    // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed\n    expandIconRotation = open ? -90 : 90;\n  } else {\n    // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed\n    expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;\n  }\n\n  const buttonShorthand = useARIAButtonShorthand(button, {\n    required: true,\n    defaultProps: {\n      disabled,\n      disabledFocusable,\n      'aria-expanded': open,\n      type: 'button',\n    },\n  });\n\n  return {\n    disabled,\n    open,\n    size,\n    inline,\n    expandIconPosition,\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      icon: 'div',\n    },\n    root: getNativeElementProps(as || 'div', {\n      ref,\n      ...props,\n    }),\n    icon: resolveShorthand(icon),\n    expandIcon: resolveShorthand(expandIcon, {\n      required: true,\n      defaultProps: {\n        children: <ChevronRightRegular style={{ transform: `rotate(${expandIconRotation}deg)` }} />,\n        'aria-hidden': true,\n      },\n    }),\n    button: {\n      ...buttonShorthand,\n      onClick: useEventCallback(\n        (ev: React.MouseEvent<HTMLButtonElement & HTMLDivElement & HTMLSpanElement & HTMLAnchorElement>) => {\n          buttonShorthand.onClick?.(ev);\n          if (!ev.defaultPrevented) {\n            onAccordionHeaderClick(ev);\n          }\n        },\n      ),\n    },\n  };\n};\n"]}