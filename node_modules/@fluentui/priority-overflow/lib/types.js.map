{"version":3,"file":"types.js","sourceRoot":"../src/","sources":["packages/react-components/priority-overflow/src/types.ts"],"names":[],"mappings":"","sourcesContent":["export type OverflowDirection = 'start' | 'end';\nexport type OverflowAxis = 'horizontal' | 'vertical';\nexport type OverflowGroupState = 'visible' | 'hidden' | 'overflow';\nexport interface OverflowItemEntry {\n  /**\n   * HTML element that will be disappear when overflowed\n   */\n  element: HTMLElement;\n  /**\n   * Lower priority items are invisible first when the container is overflowed\n   * @default 0\n   */\n  priority: number;\n  /**\n   * Specific id, used to track visibility and provide updates to consumers\n   */\n  id: string;\n\n  groupId?: string;\n}\n\n/**\n * signature similar to standard event listeners, but typed to handle the custom event\n */\nexport type OnUpdateOverflow = (data: OverflowEventPayload) => void;\n\nexport type OnUpdateItemVisibility = (data: OnUpdateItemVisibilityPayload) => void;\n\n/**\n * Payload of the custom DOM event for overflow updates\n */\nexport interface OverflowEventPayload {\n  visibleItems: OverflowItemEntry[];\n  invisibleItems: OverflowItemEntry[];\n  groupVisibility: Record<string, OverflowGroupState>;\n}\n\nexport interface OnUpdateItemVisibilityPayload {\n  item: OverflowItemEntry;\n  visible: boolean;\n}\n\nexport interface ObserveOptions {\n  /**\n   * Padding (in px) at the end of the container before overflow occurs\n   * Useful to account for extra elements (i.e. dropdown menu)\n   * or to account for any kinds of margins between items which are hard to measure with JS\n   * @default 10\n   */\n  padding?: number;\n  /**\n   * Direction where items are removed when overflow occurs\n   * @default end\n   */\n  overflowDirection?: OverflowDirection;\n\n  /**\n   * Horizontal or vertical overflow\n   * @default horizontal\n   */\n  overflowAxis?: OverflowAxis;\n\n  /**\n   * The minimum number of visible items\n   */\n  minimumVisible?: number;\n\n  /**\n   * Callback when item visibility is updated\n   */\n  onUpdateItemVisibility: OnUpdateItemVisibility;\n\n  /**\n   * Callback when item visibility is updated\n   */\n  onUpdateOverflow: OnUpdateOverflow;\n}\n\n/**\n * @internal\n */\nexport interface OverflowManager {\n  /**\n   * Starts observing the container and managing the overflow state\n   */\n  observe: (container: HTMLElement, options: ObserveOptions) => void;\n  /**\n   * Stops observing the container\n   */\n  disconnect: () => void;\n  /**\n   * Add overflow items\n   */\n  addItem: (items: OverflowItemEntry) => void;\n  /**\n   * Remove overflow item\n   */\n  removeItem: (itemId: string) => void;\n  /**\n   * Manually update the overflow, updates are batched and async\n   */\n  update: () => void;\n  /**\n   * Manually update the overflow sync\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Adds an element that opens an overflow menu. This is used to calculate\n   * available space and check if additional items need to overflow\n   */\n  addOverflowMenu: (element: HTMLElement) => void;\n\n  /**\n   * Unsets the overflow menu element\n   */\n  removeOverflowMenu: () => void;\n}\n"]}