define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-positioning", "@fluentui/react-theme", "./private/constants"], function (require, exports, tslib_1, react_1, react_positioning_1, react_theme_1, constants_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTooltipStyles_unstable = exports.tooltipClassNames = void 0;
    exports.tooltipClassNames = {
        content: 'fui-Tooltip__content',
    };
    /**
     * Styles for the tooltip
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'none', boxSizing: 'border-box', maxWidth: '240px', cursor: 'default', fontFamily: react_theme_1.tokens.fontFamilyBase, fontSize: react_theme_1.tokens.fontSizeBase200, lineHeight: react_theme_1.tokens.lineHeightBase200 }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorTransparentStroke)), react_1.shorthands.padding('4px', '11px', '6px', '11px')), { backgroundColor: react_theme_1.tokens.colorNeutralBackground1, color: react_theme_1.tokens.colorNeutralForeground1, 
            // TODO need to add versions of tokens.alias.shadow.shadow8, etc. that work with filter
            filter: "drop-shadow(0 0 2px " + react_theme_1.tokens.colorNeutralShadowAmbient + ") " +
                ("drop-shadow(0 4px 8px " + react_theme_1.tokens.colorNeutralShadowKey + ")") }),
        visible: {
            display: 'block',
        },
        inverted: {
            backgroundColor: react_theme_1.tokens.colorNeutralBackgroundStatic,
            color: react_theme_1.tokens.colorNeutralForegroundStaticInverted,
        },
        arrow: react_positioning_1.createArrowStyles({ arrowHeight: constants_1.arrowHeight }),
    });
    /**
     * Apply styling to the Tooltip slots based on the state
     */
    var useTooltipStyles_unstable = function (state) {
        var styles = useStyles();
        state.content.className = react_1.mergeClasses(exports.tooltipClassNames.content, styles.root, state.appearance === 'inverted' && styles.inverted, state.visible && styles.visible, state.content.className);
        state.arrowClassName = styles.arrow;
        return state;
    };
    exports.useTooltipStyles_unstable = useTooltipStyles_unstable;
});
//# sourceMappingURL=useTooltipStyles.js.map