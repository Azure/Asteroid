"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePersona_unstable = void 0;

const react_avatar_1 = /*#__PURE__*/require("@fluentui/react-avatar");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_badge_1 = /*#__PURE__*/require("@fluentui/react-badge");
/**
 * Create the state required to render Persona.
 *
 * The returned state can be modified with hooks such as usePersonaStyles_unstable,
 * before being passed to renderPersona_unstable.
 *
 * @param props - props from this instance of Persona
 * @param ref - reference to root HTMLElement of Persona
 */


const usePersona_unstable = (props, ref) => {
  const {
    name,
    presenceOnly = false,
    size = 'medium',
    textAlignment = 'start',
    textPosition = 'after'
  } = props;
  const primaryText = react_utilities_1.resolveShorthand(props.primaryText, {
    required: true,
    defaultProps: {
      children: name
    }
  });
  const secondaryText = react_utilities_1.resolveShorthand(props.secondaryText);
  const tertiaryText = react_utilities_1.resolveShorthand(props.tertiaryText);
  const quaternaryText = react_utilities_1.resolveShorthand(props.quaternaryText);
  const numTextLines = [primaryText, secondaryText, tertiaryText, quaternaryText].filter(Boolean).length;
  return {
    numTextLines,
    presenceOnly,
    size,
    textAlignment,
    textPosition,
    components: {
      root: 'div',
      avatar: react_avatar_1.Avatar,
      presence: react_badge_1.PresenceBadge,
      primaryText: 'span',
      secondaryText: 'span',
      tertiaryText: 'span',
      quaternaryText: 'span'
    },
    root: react_utilities_1.getNativeElementProps('div', { ...props,
      ref
    },
    /* excludedPropNames */
    ['name']),
    avatar: !presenceOnly ? react_utilities_1.resolveShorthand(props.avatar, {
      required: true,
      defaultProps: {
        name,
        badge: props.presence,
        size: avatarSizes[size]
      }
    }) : undefined,
    presence: presenceOnly ? react_utilities_1.resolveShorthand(props.presence, {
      defaultProps: {
        size: presenceSizes[size]
      }
    }) : undefined,
    primaryText,
    secondaryText,
    tertiaryText,
    quaternaryText
  };
};

exports.usePersona_unstable = usePersona_unstable;
const presenceSizes = {
  'extra-small': 'tiny',
  small: 'extra-small',
  medium: 'small',
  large: 'medium',
  'extra-large': 'large',
  huge: 'large'
};
const avatarSizes = {
  'extra-small': 20,
  small: 28,
  medium: 32,
  large: 36,
  'extra-large': 40,
  huge: 56
};
//# sourceMappingURL=usePersona.js.map