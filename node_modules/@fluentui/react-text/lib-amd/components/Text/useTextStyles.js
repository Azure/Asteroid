define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTextStyles_unstable = exports.textClassNames = void 0;
    exports.textClassNames = {
        root: 'fui-Text',
    };
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ fontFamily: react_theme_1.tokens.fontFamilyBase, fontSize: react_theme_1.tokens.fontSizeBase300, lineHeight: react_theme_1.tokens.lineHeightBase300, fontWeight: react_theme_1.tokens.fontWeightRegular, textAlign: 'start', display: 'inline', whiteSpace: 'normal' }, react_1.shorthands.overflow('visible')), { textOverflow: 'clip' }),
        nowrap: tslib_1.__assign({ whiteSpace: 'nowrap' }, react_1.shorthands.overflow('hidden')),
        truncate: {
            textOverflow: 'ellipsis',
        },
        block: {
            display: 'block',
        },
        italic: {
            fontStyle: 'italic',
        },
        underline: {
            textDecorationLine: 'underline',
        },
        strikethrough: {
            textDecorationLine: 'line-through',
        },
        strikethroughUnderline: {
            textDecorationLine: 'line-through underline',
        },
        base100: {
            fontSize: react_theme_1.tokens.fontSizeBase100,
            lineHeight: react_theme_1.tokens.lineHeightBase100,
        },
        base200: {
            fontSize: react_theme_1.tokens.fontSizeBase200,
            lineHeight: react_theme_1.tokens.lineHeightBase200,
        },
        base400: {
            fontSize: react_theme_1.tokens.fontSizeBase400,
            lineHeight: react_theme_1.tokens.lineHeightBase400,
        },
        base500: {
            fontSize: react_theme_1.tokens.fontSizeBase500,
            lineHeight: react_theme_1.tokens.lineHeightBase500,
        },
        base600: {
            fontSize: react_theme_1.tokens.fontSizeBase600,
            lineHeight: react_theme_1.tokens.lineHeightBase600,
        },
        hero700: {
            fontSize: react_theme_1.tokens.fontSizeHero700,
            lineHeight: react_theme_1.tokens.lineHeightHero700,
        },
        hero800: {
            fontSize: react_theme_1.tokens.fontSizeHero800,
            lineHeight: react_theme_1.tokens.lineHeightHero800,
        },
        hero900: {
            fontSize: react_theme_1.tokens.fontSizeHero900,
            lineHeight: react_theme_1.tokens.lineHeightHero900,
        },
        hero1000: {
            fontSize: react_theme_1.tokens.fontSizeHero1000,
            lineHeight: react_theme_1.tokens.lineHeightHero1000,
        },
        monospace: {
            fontFamily: react_theme_1.tokens.fontFamilyMonospace,
        },
        numeric: {
            fontFamily: react_theme_1.tokens.fontFamilyNumeric,
        },
        weightMedium: {
            fontWeight: react_theme_1.tokens.fontWeightMedium,
        },
        weightSemibold: {
            fontWeight: react_theme_1.tokens.fontWeightSemibold,
        },
        weightBold: {
            fontWeight: react_theme_1.tokens.fontWeightBold,
        },
        alignCenter: {
            textAlign: 'center',
        },
        alignEnd: {
            textAlign: 'end',
        },
        alignJustify: {
            textAlign: 'justify',
        },
    });
    /**
     * Apply styling to the Text slots based on the state
     */
    var useTextStyles_unstable = function (state) {
        var styles = useStyles();
        state.root.className = react_1.mergeClasses(exports.textClassNames.root, styles.root, state.wrap === false && styles.nowrap, state.truncate && styles.truncate, state.block && styles.block, state.italic && styles.italic, state.underline && styles.underline, state.strikethrough && styles.strikethrough, state.underline && state.strikethrough && styles.strikethroughUnderline, state.size === 100 && styles.base100, state.size === 200 && styles.base200, state.size === 400 && styles.base400, state.size === 500 && styles.base500, state.size === 600 && styles.base600, state.size === 700 && styles.hero700, state.size === 800 && styles.hero800, state.size === 900 && styles.hero900, state.size === 1000 && styles.hero1000, state.font === 'monospace' && styles.monospace, state.font === 'numeric' && styles.numeric, state.weight === 'medium' && styles.weightMedium, state.weight === 'semibold' && styles.weightSemibold, state.weight === 'bold' && styles.weightBold, state.align === 'center' && styles.alignCenter, state.align === 'end' && styles.alignEnd, state.align === 'justify' && styles.alignJustify, state.root.className);
        return state;
    };
    exports.useTextStyles_unstable = useTextStyles_unstable;
});
//# sourceMappingURL=useTextStyles.js.map