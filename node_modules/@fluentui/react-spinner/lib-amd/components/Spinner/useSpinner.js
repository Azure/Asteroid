define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "@fluentui/react-label", "./DefaultSvg"], function (require, exports, tslib_1, React, react_utilities_1, react_label_1, DefaultSvg_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSpinner_unstable = void 0;
    /**
     * Create the state required to render Spinner.
     *
     * The returned state can be modified with hooks such as useSpinnerStyles_unstable,
     * before being passed to renderSpinner_unstable.
     *
     * @param props - props from this instance of Spinner
     * @param ref - reference to root HTMLElement of Spinner
     */
    var useSpinner_unstable = function (props, ref) {
        // Props
        var _a = props.appearance, appearance = _a === void 0 ? 'primary' : _a, _b = props.labelPosition, labelPosition = _b === void 0 ? 'after' : _b, _c = props.size, size = _c === void 0 ? 'medium' : _c;
        var baseId = react_utilities_1.useId('spinner');
        var _d = props.role, role = _d === void 0 ? 'progressbar' : _d, tabIndex = props.tabIndex, rest = tslib_1.__rest(props, ["role", "tabIndex"]);
        var nativeRoot = react_utilities_1.getNativeElementProps('div', tslib_1.__assign({ ref: ref, role: role }, rest), ['size']);
        var labelShorthand = react_utilities_1.resolveShorthand(props.label, {
            defaultProps: {
                id: baseId,
            },
            required: false,
        });
        var spinnerShortHand = react_utilities_1.resolveShorthand(props.spinner, {
            required: true,
            defaultProps: {
                children: React.createElement(DefaultSvg_1.DefaultSvg, null),
                tabIndex: tabIndex,
            },
        });
        if (labelShorthand && nativeRoot && !nativeRoot['aria-labelledby']) {
            nativeRoot['aria-labelledby'] = labelShorthand.id;
        }
        var state = {
            appearance: appearance,
            labelPosition: labelPosition,
            size: size,
            components: {
                root: 'div',
                spinner: 'span',
                label: react_label_1.Label,
            },
            root: nativeRoot,
            spinner: spinnerShortHand,
            label: labelShorthand,
        };
        return state;
    };
    exports.useSpinner_unstable = useSpinner_unstable;
});
//# sourceMappingURL=useSpinner.js.map