define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSpinnerStyles_unstable = exports.spinnerClassNames = void 0;
    exports.spinnerClassNames = {
        root: 'fui-Spinner',
        spinner: 'fui-Spinner__spinner',
        label: 'fui-Spinner__label',
    };
    /*
     * TODO: Update with proper tokens when added
     * Radii for the Spinner circles
     */
    var rValues = {
        tiny: '9px',
        extraSmall: '11px',
        small: '13px',
        medium: '14.5px',
        large: '16.5px',
        extraLarge: '18.5px',
        huge: '20px',
    };
    /*
     * TODO: Update with proper tokens when added
     * Sizes for the Spinner
     */
    var spinnnerSizes = {
        tiny: '20px',
        extraSmall: '24px',
        small: '28px',
        medium: '32px',
        large: '36px',
        extraLarge: '40px',
        huge: '44px',
    };
    /*
     * TODO: Update with proper tokens when added
     * Animation for Spinner
     */
    var spinnerAnimation = {
        container: {
            animationDuration: '3s',
            animationIterationCount: 'infinite',
            animationTimingFunction: 'linear',
            backgroundColor: 'transparent',
        },
    };
    /**
     * Styles for the root slot
     */
    var useRootStyles = react_1.makeStyles({
        root: tslib_1.__assign({ display: 'flex', alignItems: 'center', justifyContent: 'center', lineHeight: '0' }, react_1.shorthands.gap('8px')),
        horizontal: {
            flexDirection: 'row',
        },
        vertical: {
            flexDirection: 'column',
        },
    });
    var useLoaderStyles = react_1.makeStyles({
        // global SVG class
        spinnerSVG: (_a = {
                ':focus': tslib_1.__assign({}, react_1.shorthands.outline('3px', 'solid', 'transparent'))
            },
            _a['& > svg'] = tslib_1.__assign(tslib_1.__assign({ animationName: {
                    '0%': { transform: 'rotate(0deg)' },
                    '100%': { transform: 'rotate(360deg)' },
                } }, spinnerAnimation.container), { '@media screen and (prefers-reduced-motion: reduce)': {
                    animationDuration: '0.01ms',
                    animationIterationCount: '1',
                } }),
            _a['& > svg > circle'] = {
                cx: '50%',
                cy: '50%',
                fill: 'none',
            },
            _a),
        tiny: (_b = {},
            _b['& > svg'] = {
                height: spinnnerSizes.tiny,
                width: spinnnerSizes.tiny,
            },
            _b['& > svg > circle'] = {
                strokeWidth: react_theme_1.tokens.strokeWidthThick,
                r: rValues.tiny,
            },
            _b),
        'extra-small': (_c = {},
            _c['& > svg'] = {
                height: spinnnerSizes.extraSmall,
                width: spinnnerSizes.extraSmall,
            },
            _c['& > svg > circle'] = {
                strokeWidth: react_theme_1.tokens.strokeWidthThick,
                r: rValues.extraSmall,
            },
            _c),
        small: (_d = {},
            _d['& > svg'] = {
                height: spinnnerSizes.small,
                width: spinnnerSizes.small,
            },
            _d['& > svg > circle'] = {
                strokeWidth: react_theme_1.tokens.strokeWidthThick,
                r: rValues.small,
            },
            _d),
        medium: (_e = {},
            _e['& > svg'] = {
                height: spinnnerSizes.medium,
                width: spinnnerSizes.medium,
            },
            _e['& > svg > circle'] = {
                strokeWidth: react_theme_1.tokens.strokeWidthThicker,
                r: rValues.medium,
            },
            _e),
        large: (_f = {},
            _f['& > svg'] = {
                height: spinnnerSizes.large,
                width: spinnnerSizes.large,
            },
            _f['& > svg > circle'] = {
                strokeWidth: react_theme_1.tokens.strokeWidthThicker,
                r: rValues.large,
            },
            _f),
        'extra-large': (_g = {},
            _g['& > svg'] = {
                height: spinnnerSizes.extraLarge,
                width: spinnnerSizes.extraLarge,
            },
            _g['& > svg > circle'] = {
                strokeWidth: react_theme_1.tokens.strokeWidthThicker,
                r: rValues.extraLarge,
            },
            _g),
        huge: (_h = {},
            _h['& > svg'] = {
                height: spinnnerSizes.huge,
                width: spinnnerSizes.huge,
            },
            _h['& > svg > circle'] = {
                strokeWidth: react_theme_1.tokens.strokeWidthThickest,
                r: rValues.huge,
            },
            _h),
    });
    var useTrackStyles = react_1.makeStyles({
        inverted: (_j = {},
            _j['& > svg > circle.fui-Spinner__Tail'] = {
                stroke: react_theme_1.tokens.colorNeutralStrokeOnBrand2,
                animationName: {
                    '0%': {
                        strokeDasharray: '1,150',
                        strokeDashoffset: '0',
                    },
                    '50%': {
                        strokeDasharray: '90,150',
                        strokeDashoffset: '-35',
                    },
                    '100%': {
                        strokeDasharray: '90,150',
                        strokeDashoffset: '-124',
                    },
                },
                animationDuration: '1.5s',
                animationIterationCount: 'infinite',
                animationTimingFunction: react_theme_1.tokens.curveEasyEase,
                strokeLinecap: 'round',
                transform: 'rotate(-90deg)',
                transformOrigin: '50% 50%',
                '@media screen and (prefers-reduced-motion: reduce)': {
                    animationDuration: '0.01ms',
                    animationIterationCount: '1',
                },
            },
            _j['& > svg > circle.fui-Spinner__Track'] = {
                stroke: 'rgba(255, 255, 255, 0.2)', // this is whiteAlpha[20] but that token is not exported
            },
            _j),
        primary: (_k = {},
            _k['& > svg > circle.fui-Spinner__Tail'] = {
                stroke: react_theme_1.tokens.colorBrandStroke1,
                '@media screen and (forced-colors: active)': {
                    stroke: react_theme_1.tokens.colorNeutralStrokeOnBrand2,
                },
                animationName: {
                    '0%': {
                        strokeDasharray: '1,150',
                        strokeDashoffset: '0',
                    },
                    '50%': {
                        strokeDasharray: '90,150',
                        strokeDashoffset: '-35',
                    },
                    '100%': {
                        strokeDasharray: '90,150',
                        strokeDashoffset: '-124',
                    },
                },
                animationDuration: '1.5s',
                animationIterationCount: 'infinite',
                animationTimingFunction: react_theme_1.tokens.curveEasyEase,
                strokeLinecap: 'round',
                transform: 'rotate(-90deg)',
                transformOrigin: '50% 50%',
                '@media screen and (prefers-reduced-motion: reduce)': {
                    animationDuration: '0.01ms',
                    animationIterationCount: '1',
                },
            },
            _k['& > svg > circle.fui-Spinner__Track'] = {
                stroke: react_theme_1.tokens.colorBrandStroke2,
                '@media screen and (forced-colors: active)': {
                    stroke: react_theme_1.tokens.colorNeutralBackgroundInverted,
                },
            },
            _k),
    });
    var useLabelStyles = react_1.makeStyles({
        // style for label
        inverted: {
            color: 'rgba(255, 255, 255, 1)', // This is white alpha but the token is not exported
        },
        primary: {},
        tiny: tslib_1.__assign({}, react_theme_1.typographyStyles.body1),
        'extra-small': tslib_1.__assign({}, react_theme_1.typographyStyles.body1),
        small: tslib_1.__assign({}, react_theme_1.typographyStyles.body1),
        medium: tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle2),
        large: tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle2),
        'extra-large': tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle2),
        huge: tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle1),
    });
    /**
     * Apply styling to the Spinner slots based on the state
     */
    var useSpinnerStyles_unstable = function (state) {
        var labelPosition = state.labelPosition, size = state.size, _a = state.appearance, appearance = _a === void 0 ? 'primary' : _a;
        var rootStyles = useRootStyles();
        var spinnerStyles = useLoaderStyles();
        var labelStyles = useLabelStyles();
        var trackStyles = useTrackStyles();
        state.root.className = react_1.mergeClasses(exports.spinnerClassNames.root, rootStyles.root, (labelPosition === 'above' || labelPosition === 'below') && rootStyles.vertical, (labelPosition === 'before' || labelPosition === 'after') && rootStyles.horizontal, state.root.className);
        if (state.spinner) {
            state.spinner.className = react_1.mergeClasses(exports.spinnerClassNames.spinner, spinnerStyles.spinnerSVG, spinnerStyles[size], trackStyles[appearance], state.spinner.className);
        }
        if (state.label) {
            state.label.className = react_1.mergeClasses(exports.spinnerClassNames.label, labelStyles[size], labelStyles[appearance], state.label.className);
        }
        return state;
    };
    exports.useSpinnerStyles_unstable = useSpinnerStyles_unstable;
});
//# sourceMappingURL=useSpinnerStyles.js.map