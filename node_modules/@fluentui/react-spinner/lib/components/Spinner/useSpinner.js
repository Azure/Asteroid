import * as React from 'react';
import { getNativeElementProps, resolveShorthand, useId } from '@fluentui/react-utilities';
import { Label } from '@fluentui/react-label';
import { DefaultSvg } from './DefaultSvg';
/**
 * Create the state required to render Spinner.
 *
 * The returned state can be modified with hooks such as useSpinnerStyles_unstable,
 * before being passed to renderSpinner_unstable.
 *
 * @param props - props from this instance of Spinner
 * @param ref - reference to root HTMLElement of Spinner
 */

export const useSpinner_unstable = (props, ref) => {
  // Props
  const {
    appearance = 'primary',
    labelPosition = 'after',
    size = 'medium'
  } = props;
  const baseId = useId('spinner');
  const {
    role = 'progressbar',
    tabIndex,
    ...rest
  } = props;
  const nativeRoot = getNativeElementProps('div', {
    ref,
    role,
    ...rest
  }, ['size']);
  const labelShorthand = resolveShorthand(props.label, {
    defaultProps: {
      id: baseId
    },
    required: false
  });
  const spinnerShortHand = resolveShorthand(props.spinner, {
    required: true,
    defaultProps: {
      children: /*#__PURE__*/React.createElement(DefaultSvg, null),
      tabIndex
    }
  });

  if (labelShorthand && nativeRoot && !nativeRoot['aria-labelledby']) {
    nativeRoot['aria-labelledby'] = labelShorthand.id;
  }

  const state = {
    appearance,
    labelPosition,
    size,
    components: {
      root: 'div',
      spinner: 'span',
      label: Label
    },
    root: nativeRoot,
    spinner: spinnerShortHand,
    label: labelShorthand
  };
  return state;
};
//# sourceMappingURL=useSpinner.js.map