{"version":3,"sources":["packages/react-components/react-infobutton/src/components/InfoButton/useInfoButton.tsx"],"names":[],"mappings":";;;;;;;AAAA,MAAA,KAAA,gBAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,wBAAA,gBAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,MAAA,iBAAA,gBAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,eAAA,gBAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,iBAAA,gBAAA,OAAA,CAAA,2BAAA,CAAA;;AAGA,MAAM,iBAAiB,GAAG;EACxB,KAAK,eAAE,KAAA,CAAA,aAAA,CAAC,wBAAA,CAAA,uBAAD,EAAwB,IAAxB,CADiB;EAExB,MAAM,eAAE,KAAA,CAAA,aAAA,CAAC,wBAAA,CAAA,uBAAD,EAAwB,IAAxB,CAFgB;EAGxB,KAAK,eAAE,KAAA,CAAA,aAAA,CAAC,wBAAA,CAAA,uBAAD,EAAwB,IAAxB;AAHiB,CAA1B;AAMA,MAAM,cAAc,GAAG;EACrB,KAAK,EAAE,OADc;EAErB,MAAM,EAAE,OAFa;EAGrB,KAAK,EAAE;AAHc,CAAvB;AAMA;;;;;;;;AAQG;;AACI,MAAM,sBAAsB,GAAG,CAAC,KAAD,EAAyB,GAAzB,KAAyE;EAC7G,MAAM;IAAE,IAAI,GAAG;EAAT,IAAsB,KAA5B;EAEA,MAAM,KAAK,GAAoB;IAC7B,IAD6B;IAG7B,UAAU,EAAE;MACV,IAAI,EAAE,QADI;MAEV,OAAO,EAAE,eAAA,CAAA,OAFC;MAGV,OAAO,EAAE,eAAA,CAAA;IAHC,CAHiB;IAS7B,IAAI,EAAE,iBAAA,CAAA,qBAAA,CAAsB,QAAtB,EAAgC;MACpC,QAAQ,EAAE,iBAAiB,CAAC,IAAD,CADS;MAEpC,IAAI,EAAE,QAF8B;MAGpC,GAAG,KAHiC;MAIpC;IAJoC,CAAhC,CATuB;IAe7B,OAAO,EAAE,iBAAA,CAAA,gBAAA,CAAiB,KAAK,CAAC,OAAvB,EAAgC;MACvC,QAAQ,EAAE,IAD6B;MAEvC,YAAY,EAAE;QACZ,QAAQ,EAAE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CADE;QAEZ,WAAW,EAAE,aAFD;QAGZ,IAAI,EAAE,cAAc,CAAC,IAAD,CAHR;QAIZ,SAAS,EAAE;MAJC;IAFyB,CAAhC,CAfoB;IAwB7B,OAAO,EAAE,iBAAA,CAAA,gBAAA,CAAiB,KAAK,CAAC,OAAvB,EAAgC;MACvC,QAAQ,EAAE,IAD6B;MAEvC,YAAY,EAAE;QACZ,IAAI,EAAE;MADM;IAFyB,CAAhC;EAxBoB,CAA/B;EAgCA,MAAM,CAAC,WAAD,EAAc,cAAd,IAAgC,iBAAA,CAAA,oBAAA,CAAqB;IACzD,KAAK,EAAE,KAAK,CAAC,OAAN,CAAc,IADoC;IAEzD,YAAY,EAAE,KAAK,CAAC,OAAN,CAAc,WAF6B;IAGzD,YAAY,EAAE;EAH2C,CAArB,CAAtC;EAMA,KAAK,CAAC,OAAN,CAAc,IAAd,GAAqB,WAArB;EACA,KAAK,CAAC,OAAN,CAAc,YAAd,GAA6B,iBAAA,CAAA,cAAA,CAAe,KAAK,CAAC,OAAN,CAAc,YAA7B,EAA2C,CAAC,CAAD,EAAI,IAAJ,KAAa,cAAc,CAAC,IAAI,CAAC,IAAN,CAAtE,CAA7B;EAEA,OAAO,KAAP;AACD,CA7CM;;AAAM,OAAA,CAAA,sBAAA,GAAsB,sBAAtB","sourcesContent":["import * as React from 'react';\nimport { DefaultInfoButtonIcon12, DefaultInfoButtonIcon16, DefaultInfoButtonIcon20 } from './DefaultInfoButtonIcons';\nimport { getNativeElementProps, mergeCallbacks, resolveShorthand } from '@fluentui/react-utilities';\nimport { Popover, PopoverSurface } from '@fluentui/react-popover';\nimport { useControllableState } from '@fluentui/react-utilities';\nimport type { InfoButtonProps, InfoButtonState } from './InfoButton.types';\n\nconst infoButtonIconMap = {\n  small: <DefaultInfoButtonIcon12 />,\n  medium: <DefaultInfoButtonIcon16 />,\n  large: <DefaultInfoButtonIcon20 />,\n} as const;\n\nconst popoverSizeMap = {\n  small: 'small',\n  medium: 'small',\n  large: 'medium',\n} as const;\n\n/**\n * Create the state required to render InfoButton.\n *\n * The returned state can be modified with hooks such as useInfoButtonStyles_unstable,\n * before being passed to renderInfoButton_unstable.\n *\n * @param props - props from this instance of InfoButton\n * @param ref - reference to root HTMLElement of InfoButton\n */\nexport const useInfoButton_unstable = (props: InfoButtonProps, ref: React.Ref<HTMLElement>): InfoButtonState => {\n  const { size = 'medium' } = props;\n\n  const state: InfoButtonState = {\n    size,\n\n    components: {\n      root: 'button',\n      popover: Popover,\n      content: PopoverSurface,\n    },\n\n    root: getNativeElementProps('button', {\n      children: infoButtonIconMap[size],\n      type: 'button',\n      ...props,\n      ref,\n    }),\n    popover: resolveShorthand(props.popover, {\n      required: true,\n      defaultProps: {\n        children: <></>,\n        positioning: 'above-start',\n        size: popoverSizeMap[size],\n        withArrow: true,\n      },\n    }),\n    content: resolveShorthand(props.content, {\n      required: true,\n      defaultProps: {\n        role: 'dialog',\n      },\n    }),\n  };\n\n  const [popoverOpen, setPopoverOpen] = useControllableState({\n    state: state.popover.open,\n    defaultState: state.popover.defaultOpen,\n    initialState: false,\n  });\n\n  state.popover.open = popoverOpen;\n  state.popover.onOpenChange = mergeCallbacks(state.popover.onOpenChange, (e, data) => setPopoverOpen(data.open));\n\n  return state;\n};\n"],"sourceRoot":"../src/"}