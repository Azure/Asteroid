define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "../../Avatar", "@fluentui/react-shared-contexts"], function (require, exports, tslib_1, react_1, react_theme_1, Avatar_1, react_shared_contexts_1) {
    "use strict";
    var _a, _b, _c;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useGroupChildClassName = exports.useAvatarGroupItemStyles_unstable = exports.avatarGroupItemClassNames = void 0;
    exports.avatarGroupItemClassNames = {
        root: 'fui-AvatarGroupItem',
        avatar: 'fui-AvatarGroupItem__avatar',
        overflowLabel: 'fui-AvatarGroupItem__overflowLabel',
    };
    var avatarGroupItemDividerWidthVar = '--fuiAvatarGroupItem__divider--width';
    /**
     * Styles for the root slot
     */
    var useRootStyles = react_1.makeStyles({
        base: {
            alignItems: 'center',
            display: 'inline-flex',
            flexShrink: 0,
            position: 'relative',
        },
        overflowItem: tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalXS, react_theme_1.tokens.spacingHorizontalXS)),
        nonOverflowItem: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)),
    });
    /**
     * Styles for the avatar slot
     */
    var useAvatarStyles = react_1.makeStyles({
        nonOverflowItem: {
            position: 'absolute',
        },
        pie: tslib_1.__assign({}, react_1.shorthands.borderRadius(0)),
    });
    /**
     * Styles for the label slot
     */
    var useOverflowLabelStyles = react_1.makeStyles({
        base: tslib_1.__assign({ marginLeft: react_theme_1.tokens.spacingHorizontalS, color: react_theme_1.tokens.colorNeutralForeground1 }, react_theme_1.typographyStyles.body1),
    });
    /**
     * Styles for the stack layout
     */
    var useStackStyles = react_1.makeStyles({
        thick: {
            boxShadow: "0 0 0 " + react_theme_1.tokens.strokeWidthThick + " " + react_theme_1.tokens.colorNeutralBackground2,
        },
        thicker: {
            boxShadow: "0 0 0 " + react_theme_1.tokens.strokeWidthThicker + " " + react_theme_1.tokens.colorNeutralBackground2,
        },
        thickest: {
            boxShadow: "0 0 0 " + react_theme_1.tokens.strokeWidthThickest + " " + react_theme_1.tokens.colorNeutralBackground2,
        },
        xxs: { '&:not(:first-child)': { marginLeft: "calc(-1 * " + react_theme_1.tokens.spacingHorizontalXXS + ")" } },
        xs: { '&:not(:first-child)': { marginLeft: "calc(-1 * " + react_theme_1.tokens.spacingHorizontalXS + ")" } },
        s: { '&:not(:first-child)': { marginLeft: "calc(-1 * " + react_theme_1.tokens.spacingHorizontalS + ")" } },
        l: { '&:not(:first-child)': { marginLeft: "calc(-1 * " + react_theme_1.tokens.spacingHorizontalL + ")" } },
    });
    /**
     * Styles for the spread layout
     */
    var useSpreadStyles = react_1.makeStyles({
        s: { '&:not(:first-child)': { marginLeft: react_theme_1.tokens.spacingHorizontalS } },
        mNudge: { '&:not(:first-child)': { marginLeft: react_theme_1.tokens.spacingHorizontalMNudge } },
        m: { '&:not(:first-child)': { marginLeft: react_theme_1.tokens.spacingHorizontalM } },
        l: { '&:not(:first-child)': { marginLeft: react_theme_1.tokens.spacingHorizontalL } },
        xl: { '&:not(:first-child)': { marginLeft: react_theme_1.tokens.spacingHorizontalXL } },
    });
    /**
     * Styles for the pie layout
     */
    var usePieStyles = react_1.makeStyles({
        base: {
            position: 'absolute',
        },
        slices: {
            // Two slices
            // 1st of 2 items
            '&:nth-of-type(1):nth-last-of-type(2)': {
                clipPath: "inset(0 calc(25% + (var(" + avatarGroupItemDividerWidthVar + ") / 2)) 0 25%)",
                left: '-25%',
            },
            // 2nd of 2 items
            '&:nth-of-type(2):nth-last-of-type(1)': {
                clipPath: "inset(0 25% 0 calc(25% + (var(" + avatarGroupItemDividerWidthVar + ") / 2)))",
                left: '25%',
            },
            // Three slices
            // 1st of 3 items
            '&:nth-of-type(1):nth-last-of-type(3)': {
                clipPath: "inset(0 calc(25% + (var(" + avatarGroupItemDividerWidthVar + ") / 2)) 0 25%)",
                left: '-25%',
            },
            // 2nd of 3 items
            '&:nth-of-type(2):nth-last-of-type(2)': {
                // Since the two AvatarGroupItems on the right are scaled by 0.5, the divider width should not be halved.
                clipPath: "inset(0 0 var(" + avatarGroupItemDividerWidthVar + ") var(" + avatarGroupItemDividerWidthVar + "))",
                left: '50%',
                transform: 'scale(0.5)',
                transformOrigin: '0 0',
            },
            // 3rd of 3 items
            '&:nth-of-type(3):nth-last-of-type(1)': {
                clipPath: "inset(var(" + avatarGroupItemDividerWidthVar + ") 0 0 var(" + avatarGroupItemDividerWidthVar + "))",
                left: '50%',
                top: '50%',
                transform: 'scale(0.5)',
                transformOrigin: '0 0',
            },
        },
        rtlSlices: {
            // Two slices
            // 1st of 2 items
            '&:nth-of-type(1):nth-last-of-type(2)': {
                clipPath: "inset(0 25% 0 calc(25% + (var(" + avatarGroupItemDividerWidthVar + ") / 2)))",
            },
            // 2nd of 2 items
            '&:nth-of-type(2):nth-last-of-type(1)': {
                clipPath: "inset(0 calc(25% + (var(" + avatarGroupItemDividerWidthVar + ") / 2)) 0 25%)",
            },
            // Three slices
            // 1st of 3 items
            '&:nth-of-type(1):nth-last-of-type(3)': {
                clipPath: "inset(0 25% 0 calc(25% + (var(" + avatarGroupItemDividerWidthVar + ") / 2)))",
            },
            // 2nd of 3 items
            '&:nth-of-type(2):nth-last-of-type(2)': {
                clipPath: "inset(0 var(" + avatarGroupItemDividerWidthVar + ") var(" + avatarGroupItemDividerWidthVar + ") 0)",
                left: '0',
            },
            // 3rd of 3 items
            '&:nth-of-type(3):nth-last-of-type(1)': {
                clipPath: "inset(var(" + avatarGroupItemDividerWidthVar + ") var(" + avatarGroupItemDividerWidthVar + ") 0 0)",
                left: '0',
            },
        },
        thick: (_a = {}, _a[avatarGroupItemDividerWidthVar] = react_theme_1.tokens.strokeWidthThick, _a),
        thicker: (_b = {}, _b[avatarGroupItemDividerWidthVar] = react_theme_1.tokens.strokeWidthThicker, _b),
        thickest: (_c = {}, _c[avatarGroupItemDividerWidthVar] = react_theme_1.tokens.strokeWidthThickest, _c),
    });
    /**
     * Apply styling to the AvatarGroupItem slots based on the state
     */
    var useAvatarGroupItemStyles_unstable = function (state) {
        var isOverflowItem = state.isOverflowItem, layout = state.layout, size = state.size;
        var dir = react_shared_contexts_1.useFluent_unstable().dir;
        var avatarStyles = useAvatarStyles();
        var overflowLabelStyles = useOverflowLabelStyles();
        var pieStyles = usePieStyles();
        var rootStyles = useRootStyles();
        var sizeStyles = Avatar_1.useSizeStyles();
        var groupChildClassName = exports.useGroupChildClassName(layout, size);
        var rootClasses = [rootStyles.base];
        if (!isOverflowItem) {
            rootClasses.push(rootStyles.nonOverflowItem);
            rootClasses.push(groupChildClassName);
            rootClasses.push(sizeStyles[size]);
            if (layout === 'pie') {
                rootClasses.push(pieStyles.base);
                if (size < 56) {
                    rootClasses.push(pieStyles.thick);
                }
                else if (size < 72) {
                    rootClasses.push(pieStyles.thicker);
                }
                else {
                    rootClasses.push(pieStyles.thickest);
                }
                rootClasses.push(pieStyles.slices);
                if (dir === 'rtl') {
                    rootClasses.push(pieStyles.rtlSlices);
                }
            }
        }
        else {
            rootClasses.push(rootStyles.overflowItem);
        }
        state.root.className = react_1.mergeClasses.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray([exports.avatarGroupItemClassNames.root], rootClasses), [state.root.className]));
        state.avatar.className = react_1.mergeClasses(exports.avatarGroupItemClassNames.avatar, !isOverflowItem && avatarStyles.nonOverflowItem, layout === 'pie' && avatarStyles.pie, state.avatar.className);
        if (state.overflowLabel) {
            state.overflowLabel.className = react_1.mergeClasses(exports.avatarGroupItemClassNames.overflowLabel, overflowLabelStyles.base, state.overflowLabel.className);
        }
        return state;
    };
    exports.useAvatarGroupItemStyles_unstable = useAvatarGroupItemStyles_unstable;
    /**
     * Hook for getting the className for the children of AvatarGroup. This hook will provide the spacing and outlines
     * needed for each layout.
     */
    var useGroupChildClassName = function (layout, size) {
        var stackStyles = useStackStyles();
        var spreadStyles = useSpreadStyles();
        var layoutClasses = [];
        if (size) {
            if (layout === 'stack') {
                if (size < 56) {
                    layoutClasses.push(stackStyles.thick);
                }
                else if (size < 72) {
                    layoutClasses.push(stackStyles.thicker);
                }
                else {
                    layoutClasses.push(stackStyles.thickest);
                }
                if (size < 24) {
                    layoutClasses.push(stackStyles.xxs);
                }
                else if (size < 48) {
                    layoutClasses.push(stackStyles.xs);
                }
                else if (size < 96) {
                    layoutClasses.push(stackStyles.s);
                }
                else {
                    layoutClasses.push(stackStyles.l);
                }
            }
            else if (layout === 'spread') {
                if (size < 20) {
                    layoutClasses.push(spreadStyles.s);
                }
                else if (size < 32) {
                    layoutClasses.push(spreadStyles.mNudge);
                }
                else if (size < 64) {
                    layoutClasses.push(spreadStyles.l);
                }
                else {
                    layoutClasses.push(spreadStyles.xl);
                }
            }
        }
        return react_1.mergeClasses.apply(void 0, layoutClasses);
    };
    exports.useGroupChildClassName = useGroupChildClassName;
});
//# sourceMappingURL=useAvatarGroupItemStyles.js.map