"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAvatarGroupPopover_unstable = void 0;

const React = /*#__PURE__*/require("react");

const AvatarGroupContext_1 = /*#__PURE__*/require("../../contexts/AvatarGroupContext");

const useAvatarGroup_1 = /*#__PURE__*/require("../AvatarGroup/useAvatarGroup");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");

const react_popover_1 = /*#__PURE__*/require("@fluentui/react-popover");

const react_tooltip_1 = /*#__PURE__*/require("@fluentui/react-tooltip");
/**
 * Create the state required to render AvatarGroupPopover.
 *
 * The returned state can be modified with hooks such as useAvatarGroupPopoverStyles_unstable,
 * before being passed to renderAvatarGroupPopover_unstable.
 *
 * @param props - props from this instance of AvatarGroupPopover
 */


const useAvatarGroupPopover_unstable = props => {
  var _a;

  const size = (_a = AvatarGroupContext_1.useAvatarGroupContext_unstable(ctx => ctx.size)) !== null && _a !== void 0 ? _a : useAvatarGroup_1.defaultAvatarGroupSize;
  const layout = AvatarGroupContext_1.useAvatarGroupContext_unstable(ctx => ctx.layout);
  const {
    indicator = size < 24 ? 'icon' : 'count',
    count = React.Children.count(props.children),
    children,
    ...restOfProps
  } = props;
  const [popoverOpen, setPopoverOpen] = react_utilities_1.useControllableState({
    state: props.open,
    defaultState: props.defaultOpen,
    initialState: false
  });

  const handleOnPopoverChange = (e, data) => {
    var _a;

    (_a = restOfProps.onOpenChange) === null || _a === void 0 ? void 0 : _a.call(restOfProps, e, data);
    setPopoverOpen(data.open);
  };

  let triggerButtonChildren;

  if (layout === 'pie') {
    triggerButtonChildren = null;
  } else if (indicator === 'icon') {
    triggerButtonChildren = React.createElement(react_icons_1.MoreHorizontalRegular, null);
  } else {
    triggerButtonChildren = count > 99 ? '99+' : `+${count}`;
  }

  return {
    count,
    indicator,
    layout,
    popoverOpen,
    size,
    components: {
      root: react_popover_1.Popover,
      triggerButton: 'button',
      content: 'ul',
      popoverSurface: react_popover_1.PopoverSurface,
      tooltip: react_tooltip_1.Tooltip
    },
    root: {
      // Popover expects a child for its children. The children are added in the renderAvatarGroupPopover.
      children: React.createElement(React.Fragment, null),
      size: 'small',
      trapFocus: true,
      ...restOfProps,
      open: popoverOpen,
      onOpenChange: handleOnPopoverChange
    },
    triggerButton: react_utilities_1.resolveShorthand(props.triggerButton, {
      required: true,
      defaultProps: {
        children: triggerButtonChildren,
        type: 'button'
      }
    }),
    content: react_utilities_1.resolveShorthand(props.content, {
      required: true,
      defaultProps: {
        children,
        role: 'list'
      }
    }),
    popoverSurface: react_utilities_1.resolveShorthand(props.popoverSurface, {
      required: true,
      defaultProps: {
        'aria-label': 'Overflow',
        tabIndex: 0
      }
    }),
    tooltip: react_utilities_1.resolveShorthand(props.tooltip, {
      required: true,
      defaultProps: {
        content: 'View more people.',
        relationship: 'label'
      }
    })
  };
};

exports.useAvatarGroupPopover_unstable = useAvatarGroupPopover_unstable;
//# sourceMappingURL=useAvatarGroupPopover.js.map