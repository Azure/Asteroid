define(["require", "exports", "@griffel/react", "@fluentui/react-theme"], function (require, exports, react_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useLabelStyles_unstable = exports.labelClassNames = void 0;
    exports.labelClassNames = {
        root: 'fui-Label',
        required: 'fui-Label__required',
    };
    /**
     * Styles for the label
     */
    var useStyles = react_1.makeStyles({
        root: {
            fontFamily: react_theme_1.tokens.fontFamilyBase,
            color: react_theme_1.tokens.colorNeutralForeground1,
        },
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
        },
        required: {
            color: react_theme_1.tokens.colorPaletteRedForeground3,
            paddingLeft: '4px', // TODO: Once spacing tokens are added, change this to Horizontal XS
        },
        requiredDisabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
        },
        small: {
            fontSize: react_theme_1.tokens.fontSizeBase200,
            lineHeight: react_theme_1.tokens.lineHeightBase200,
        },
        medium: {
            fontSize: react_theme_1.tokens.fontSizeBase300,
            lineHeight: react_theme_1.tokens.lineHeightBase300,
        },
        large: {
            fontSize: react_theme_1.tokens.fontSizeBase400,
            lineHeight: react_theme_1.tokens.lineHeightBase400,
            fontWeight: react_theme_1.tokens.fontWeightSemibold,
        },
        semibold: {
            fontWeight: react_theme_1.tokens.fontWeightSemibold,
        },
    });
    /**
     * Apply styling to the Label slots based on the state
     */
    var useLabelStyles_unstable = function (state) {
        var styles = useStyles();
        state.root.className = react_1.mergeClasses(exports.labelClassNames.root, styles.root, state.disabled && styles.disabled, styles[state.size], state.weight === 'semibold' && styles.semibold, state.root.className);
        if (state.required) {
            state.required.className = react_1.mergeClasses(exports.labelClassNames.required, styles.required, state.disabled && styles.requiredDisabled, state.required.className);
        }
        return state;
    };
    exports.useLabelStyles_unstable = useLabelStyles_unstable;
});
//# sourceMappingURL=useLabelStyles.js.map