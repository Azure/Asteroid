define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "@fluentui/react-input"], function (require, exports, tslib_1, react_1, react_theme_1, react_input_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSpinButtonStyles_unstable = exports.spinButtonClassNames = void 0;
    exports.spinButtonClassNames = {
        root: 'fui-SpinButton',
        input: 'fui-SpinButton__input',
        incrementButton: 'fui-SpinButton__incrementButton',
        decrementButton: 'fui-SpinButton__decrementButton',
    };
    var spinButtonExtraClassNames = {
        buttonActive: 'fui-SpinButton__button_active',
    };
    var useRootStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign({ display: 'inline-grid', gridTemplateColumns: "1fr 24px", gridTemplateRows: '1fr 1fr', columnGap: react_theme_1.tokens.spacingHorizontalXS, rowGap: 0, paddingRight: 0, position: 'relative' }, react_1.shorthands.border('0')), { isolation: 'isolate', 
            // Apply border styles on the ::before pseudo element.
            // We cannot use ::after since react-input uses that
            // for the selector styles.
            // Using the pseudo element allows us to place the border
            // above content in the component which ensures the buttons
            // line up visually with the border as expected. Without this
            // there is a bit of a gap which can become very noticeable
            // at high zoom or when OS zoom levels are not divisible by 2
            // (e.g., 150% on Windows in Firefox)
            // This is most noticeable on the "outline" appearance which is
            // also the default so it feels worth the extra ceremony to get right.
            '::before': tslib_1.__assign(tslib_1.__assign({ content: '""', boxSizing: 'border-box', position: 'absolute', top: 0, right: 0, bottom: 0, left: 0 }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { pointerEvents: 'none', zIndex: 10 }), '::after': {
                right: 0,
                bottom: 0,
                left: 0,
                zIndex: 20,
            } }),
        small: {
            paddingLeft: react_theme_1.tokens.spacingHorizontalS,
        },
        // intentionally empty
        medium: {},
        outline: {
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorNeutralStroke1)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
        },
        outlineInteractive: {
            ':hover': {
                '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Hover)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover }),
            },
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':active,:focus-within': {
                '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Pressed)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed }),
            },
        },
        underline: {
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderRadius(0)), react_1.shorthands.borderBottom('1px', 'solid', react_theme_1.tokens.colorNeutralStrokeAccessible)),
        },
        underlineInteractive: {
            ':hover': {
                '::before': {
                    borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover,
                },
            },
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':active,:focus-within': {
                '::before': {
                    borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed,
                },
            },
        },
        filled: {
            '::before': tslib_1.__assign({}, react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorTransparentStroke)),
        },
        filledInteractive: {
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':hover,:focus-within': {
                '::before': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeInteractive)),
            },
        },
        invalid: {
            ':not(:focus-within),:hover:not(:focus-within)': {
                '::before': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder2)),
            },
        },
        disabled: {
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), { '@media (forced-colors: active)': tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')) }),
        },
    });
    var useInputStyles = react_1.makeStyles({
        base: tslib_1.__assign({ gridColumnStart: '1', gridColumnEnd: '2', gridRowStart: '1', gridRowEnd: '3', outlineStyle: 'none' }, react_1.shorthands.padding(0)),
    });
    var useButtonStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', width: '24px', alignItems: 'center', justifyContent: 'center' }, react_1.shorthands.border(0)), { position: 'absolute', outlineStyle: 'none', height: '100%', ':enabled:hover': {
                cursor: 'pointer',
            }, ':active': {
                outlineStyle: 'none',
            }, ':disabled': {
                cursor: 'not-allowed',
            } }),
        incrementButton: tslib_1.__assign({ gridColumnStart: '2', gridColumnEnd: '3', gridRowStart: '1', gridRowEnd: '2' }, react_1.shorthands.borderRadius(0, react_theme_1.tokens.borderRadiusMedium, 0, 0)),
        // Padding values numbers don't align with design specs
        // but visually the padding aligns.
        // The icons are set in a 16x16px square but the artwork is inset from that
        // so these padding values are computed by hand.
        // Additionally the design uses fractional values so these are
        // rounded to the nearest integer.
        incrementButtonSmall: tslib_1.__assign({}, react_1.shorthands.padding('3px', '6px', '0px', '4px')),
        incrementButtonMedium: tslib_1.__assign({}, react_1.shorthands.padding('4px', '5px', '1px', '5px')),
        decrementButton: tslib_1.__assign({ gridColumnStart: '2', gridColumnEnd: '3', gridRowStart: '2', gridRowEnd: '3' }, react_1.shorthands.borderRadius(0, 0, react_theme_1.tokens.borderRadiusMedium, 0)),
        decrementButtonSmall: tslib_1.__assign({}, react_1.shorthands.padding('0px', '6px', '3px', '4px')),
        decrementButtonMedium: tslib_1.__assign({}, react_1.shorthands.padding('1px', '5px', '4px', '5px')),
        outline: {
            backgroundColor: 'transparent',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':enabled': (_a = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForeground3Hover,
                        backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                        backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                    }
                },
                _a["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                },
                _a),
            ':disabled': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
        underline: {
            backgroundColor: 'transparent',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':enabled': (_b = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForeground3Hover,
                        backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                        backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                    }
                },
                _b["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                },
                _b),
            ':disabled': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
        'filled-darker': {
            backgroundColor: 'transparent',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':enabled': (_c = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForeground3Hover,
                        backgroundColor: react_theme_1.tokens.colorNeutralBackground3Hover,
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                        backgroundColor: react_theme_1.tokens.colorNeutralBackground3Pressed,
                    }
                },
                _c["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorNeutralBackground3Pressed,
                },
                _c),
            ':disabled': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
        'filled-lighter': {
            backgroundColor: 'transparent',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':enabled': (_d = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForeground3Hover,
                        backgroundColor: react_theme_1.tokens.colorNeutralBackground1Hover,
                    }
                },
                _d[":active,&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorNeutralBackground1Pressed,
                },
                _d),
            ':disabled': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
    });
    // Cannot just disable button as they need to remain
    // exposed to ATs like screen readers.
    var useButtonDisabledStyles = react_1.makeStyles({
        base: {
            cursor: 'not-allowed',
            ':hover': {
                cursor: 'not-allowed',
            },
        },
        outline: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_e = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _e["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _e),
        },
        underline: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_f = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _f["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _f),
        },
        'filled-darker': {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_g = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _g["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _g),
        },
        'filled-lighter': {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_h = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _h["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _h),
        },
    });
    /**
     * Apply styling to the SpinButton slots based on the state
     */
    var useSpinButtonStyles_unstable = function (state) {
        var appearance = state.appearance, atBound = state.atBound, spinState = state.spinState, size = state.size;
        var disabled = state.input.disabled;
        var invalid = "" + state.input['aria-invalid'] === 'true';
        var filled = appearance.startsWith('filled');
        var rootStyles = useRootStyles();
        var buttonStyles = useButtonStyles();
        var buttonDisabledStyles = useButtonDisabledStyles();
        var inputStyles = useInputStyles();
        // Grab the root className here so we can be sure to merge is last
        var rootClassName = state.root.className;
        state.root.className = undefined;
        // Reuse react-input's styles without re-using the Input component.
        react_input_1.useInputStyles_unstable({
            size: size,
            appearance: appearance,
            input: state.input,
            root: state.root,
            components: {
                root: 'span',
                input: 'input',
                contentBefore: 'span',
                contentAfter: 'span',
            },
        });
        state.root.className = react_1.mergeClasses(state.root.className, // Get the classes from useInputStyles_unstable
        exports.spinButtonClassNames.root, rootStyles.base, rootStyles[size], appearance === 'outline' && rootStyles.outline, appearance === 'underline' && rootStyles.underline, filled && rootStyles.filled, !disabled && appearance === 'outline' && rootStyles.outlineInteractive, !disabled && appearance === 'underline' && rootStyles.underlineInteractive, !disabled && filled && rootStyles.filledInteractive, !disabled && invalid && rootStyles.invalid, disabled && rootStyles.disabled, rootClassName);
        state.incrementButton.className = react_1.mergeClasses(exports.spinButtonClassNames.incrementButton, spinState === 'up' && "" + spinButtonExtraClassNames.buttonActive, buttonStyles.base, buttonStyles.incrementButton, buttonStyles[appearance], size === 'small' ? buttonStyles.incrementButtonSmall : buttonStyles.incrementButtonMedium, (atBound === 'max' || atBound === 'both') && buttonDisabledStyles.base, (atBound === 'max' || atBound === 'both') && buttonDisabledStyles[appearance], state.incrementButton.className);
        state.decrementButton.className = react_1.mergeClasses(exports.spinButtonClassNames.decrementButton, spinState === 'down' && "" + spinButtonExtraClassNames.buttonActive, buttonStyles.base, buttonStyles.decrementButton, buttonStyles[appearance], size === 'small' ? buttonStyles.decrementButtonSmall : buttonStyles.decrementButtonMedium, (atBound === 'min' || atBound === 'both') && buttonDisabledStyles.base, (atBound === 'min' || atBound === 'both') && buttonDisabledStyles[appearance], state.decrementButton.className);
        state.input.className = react_1.mergeClasses(exports.spinButtonClassNames.input, state.input.className, inputStyles.base);
        return state;
    };
    exports.useSpinButtonStyles_unstable = useSpinButtonStyles_unstable;
});
//# sourceMappingURL=useSpinButtonStyles.js.map