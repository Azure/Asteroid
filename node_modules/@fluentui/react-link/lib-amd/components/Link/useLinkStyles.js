define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-tabster", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_tabster_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useLinkStyles_unstable = exports.linkClassNames = void 0;
    exports.linkClassNames = {
        root: 'fui-Link',
    };
    var useStyles = react_1.makeStyles({
        focusIndicator: react_tabster_1.createCustomFocusIndicatorStyle({
            textDecorationColor: react_theme_1.tokens.colorStrokeFocus2,
            textDecorationLine: 'underline',
            textDecorationStyle: 'double',
        }),
        // Common styles.
        root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ backgroundColor: 'transparent', boxSizing: 'border-box', color: react_theme_1.tokens.colorBrandForegroundLink, cursor: 'pointer', display: 'inline', fontFamily: react_theme_1.tokens.fontFamilyBase, fontSize: react_theme_1.tokens.fontSizeBase300, fontWeight: react_theme_1.tokens.fontWeightRegular }, react_1.shorthands.margin(0)), react_1.shorthands.padding(0)), react_1.shorthands.overflow('inherit')), { textAlign: 'left', textDecorationLine: 'none', textDecorationThickness: react_theme_1.tokens.strokeWidthThin, textOverflow: 'inherit', userSelect: 'text', ':hover': {
                textDecorationLine: 'underline',
                color: react_theme_1.tokens.colorBrandForegroundLinkHover,
            }, ':active': {
                textDecorationLine: 'underline',
                color: react_theme_1.tokens.colorBrandForegroundLinkPressed,
            } }),
        // Overrides when the Link renders as a button.
        button: tslib_1.__assign({}, react_1.shorthands.borderStyle('none')),
        // Overrides when an href is present so the Link renders as an anchor.
        href: {
            fontSize: 'inherit',
        },
        // Overrides when the Link appears subtle.
        subtle: {
            color: react_theme_1.tokens.colorNeutralForeground2,
            ':hover': {
                textDecorationLine: 'underline',
                color: react_theme_1.tokens.colorNeutralForeground2Hover,
            },
            ':active': {
                textDecorationLine: 'underline',
                color: react_theme_1.tokens.colorNeutralForeground2Pressed,
            },
        },
        // Overrides when the Link is rendered inline within text.
        inline: {
            textDecorationLine: 'underline',
        },
        // Overrides when the Link is disabled.
        disabled: {
            textDecorationLine: 'none',
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            cursor: 'not-allowed',
            ':hover': {
                textDecorationLine: 'none',
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
            ':active': {
                textDecorationLine: 'none',
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
    });
    var useLinkStyles_unstable = function (state) {
        var styles = useStyles();
        var appearance = state.appearance, disabled = state.disabled, inline = state.inline, root = state.root;
        state.root.className = react_1.mergeClasses(exports.linkClassNames.root, styles.root, styles.focusIndicator, root.as === 'a' && root.href && styles.href, root.as === 'button' && styles.button, appearance === 'subtle' && styles.subtle, inline && styles.inline, disabled && styles.disabled, state.root.className);
        return state;
    };
    exports.useLinkStyles_unstable = useLinkStyles_unstable;
});
//# sourceMappingURL=useLinkStyles.js.map