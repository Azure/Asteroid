{"version":3,"sources":["packages/react-components/react-link/src/components/Link/useLinkState.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,eAAA,gBAAA,OAAA,CAAA,yBAAA,CAAA;AAGA;;;AAGG;;;AACI,MAAM,qBAAqB,GAAI,KAAD,IAAgC;EACnE,MAAM;IAAE,QAAF;IAAY;EAAZ,IAAkC,KAAxC;EACA,MAAM;IAAE,OAAF;IAAW,SAAX;IAAsB,IAAtB;IAA4B;EAA5B,IAAqC,KAAK,CAAC,IAAjD,CAFmE,CAInE;;EACA,IAAI,KAAK,CAAC,IAAN,CAAW,EAAX,KAAkB,GAAtB,EAA2B;IACzB,KAAK,CAAC,IAAN,CAAW,IAAX,GAAkB,QAAQ,GAAG,SAAH,GAAe,KAAK,CAAC,IAAN,CAAW,IAApD;IACA,KAAK,CAAC,IAAN,CAAW,QAAX,GAAsB,QAAQ,IAAI,CAAC,iBAAb,GAAiC,SAAjC,GAA6C,CAAnE,CAFyB,CAIzB;;IACA,IAAI,QAAQ,IAAI,iBAAhB,EAAmC;MACjC,KAAK,CAAC,IAAN,CAAW,IAAX,GAAkB,IAAI,IAAI,MAA1B;IACD;EACF,CARD,CASA;EATA,KAUK;IACH,KAAK,CAAC,IAAN,CAAW,IAAX,GAAkB,IAAI,IAAI,QAA1B;EACD,CAjBkE,CAmBnE;;;EACA,KAAK,CAAC,IAAN,CAAW,OAAX,GAAsB,EAAD,IAAgE;IACnF,IAAI,QAAQ,IAAI,iBAAhB,EAAmC;MACjC,EAAE,CAAC,cAAH;IACD,CAFD,MAEO;MACL,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAG,EAAH,CAAP;IACD;EACF,CAND,CApBmE,CA4BnE;;;EACA,KAAK,CAAC,IAAN,CAAW,SAAX,GAAwB,EAAD,IAAmE;IACxF,IAAI,CAAC,QAAQ,IAAI,iBAAb,MAAoC,EAAE,CAAC,GAAH,KAAW,eAAA,CAAA,KAAX,IAAoB,EAAE,CAAC,GAAH,KAAW,eAAA,CAAA,KAAnE,CAAJ,EAA+E;MAC7E,EAAE,CAAC,cAAH;MACA,EAAE,CAAC,eAAH;IACD,CAHD,MAGO;MACL,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAG,EAAH,CAAT;IACD;EACF,CAPD,CA7BmE,CAsCnE;;;EACA,KAAK,CAAC,QAAN,GAAiB,QAAQ,IAAI,iBAA7B;EACA,KAAK,CAAC,IAAN,CAAW,eAAX,IAA8B,QAAQ,IAAI,iBAAZ,IAAiC,SAA/D;;EACA,IAAI,KAAK,CAAC,IAAN,CAAW,EAAX,KAAkB,QAAtB,EAAgC;IAC9B,KAAK,CAAC,IAAN,CAAW,QAAX,GAAsB,QAAQ,IAAI,CAAC,iBAAnC;EACD;;EAED,OAAO,KAAP;AACD,CA9CM;;AAAM,OAAA,CAAA,qBAAA,GAAqB,qBAArB","sourcesContent":["import * as React from 'react';\nimport { Enter, Space } from '@fluentui/keyboard-keys';\nimport type { LinkState } from './Link.types';\n\n/**\n * The useLinkState_unstable hook processes the Link state.\n * @param state - Link state to mutate.\n */\nexport const useLinkState_unstable = (state: LinkState): LinkState => {\n  const { disabled, disabledFocusable } = state;\n  const { onClick, onKeyDown, role, type } = state.root;\n\n  // Add href and tabIndex=0 for anchor elements.\n  if (state.root.as === 'a') {\n    state.root.href = disabled ? undefined : state.root.href;\n    state.root.tabIndex = disabled && !disabledFocusable ? undefined : 0;\n\n    // Add role=\"link\" for disabled and disabledFocusable links.\n    if (disabled || disabledFocusable) {\n      state.root.role = role || 'link';\n    }\n  }\n  // Add type=\"button\" for button elements.\n  else {\n    state.root.type = type || 'button';\n  }\n\n  // Disallow click event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onClick = (ev: React.MouseEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if (disabled || disabledFocusable) {\n      ev.preventDefault();\n    } else {\n      onClick?.(ev);\n    }\n  };\n\n  // Disallow keydown event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onKeyDown = (ev: React.KeyboardEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if ((disabled || disabledFocusable) && (ev.key === Enter || ev.key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onKeyDown?.(ev);\n    }\n  };\n\n  // Set the aria-disabled and disabled props correctly.\n  state.disabled = disabled || disabledFocusable;\n  state.root['aria-disabled'] = disabled || disabledFocusable || undefined;\n  if (state.root.as === 'button') {\n    state.root.disabled = disabled && !disabledFocusable;\n  }\n\n  return state;\n};\n"],"sourceRoot":"../src/"}