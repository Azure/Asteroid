define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-positioning", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_positioning_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usePopoverSurfaceStyles_unstable = exports.arrowHeights = exports.popoverSurfaceClassNames = void 0;
    exports.popoverSurfaceClassNames = {
        root: 'fui-PopoverSurface',
    };
    exports.arrowHeights = {
        small: 6,
        medium: 8,
        large: 8,
    };
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground1, backgroundColor: react_theme_1.tokens.colorNeutralBackground1, boxShadow: react_theme_1.tokens.shadow16 }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorTransparentStroke)), react_theme_1.typographyStyles.body1),
        inverted: {
            backgroundColor: react_theme_1.tokens.colorNeutralBackgroundStatic,
            color: react_theme_1.tokens.colorNeutralForegroundStaticInverted,
        },
        brand: {
            backgroundColor: react_theme_1.tokens.colorBrandBackground,
            color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
        },
        smallPadding: tslib_1.__assign({}, react_1.shorthands.padding('12px')),
        mediumPadding: tslib_1.__assign({}, react_1.shorthands.padding('16px')),
        largePadding: tslib_1.__assign({}, react_1.shorthands.padding('20px')),
        smallArrow: react_positioning_1.createArrowHeightStyles(exports.arrowHeights.small),
        mediumLargeArrow: react_positioning_1.createArrowHeightStyles(exports.arrowHeights.medium),
        arrow: react_positioning_1.createArrowStyles({ arrowHeight: undefined }),
    });
    /**
     * Apply styling to the PopoverSurface slots based on the state
     */
    var usePopoverSurfaceStyles_unstable = function (state) {
        var styles = useStyles();
        state.root.className = react_1.mergeClasses(exports.popoverSurfaceClassNames.root, styles.root, state.size === 'small' && styles.smallPadding, state.size === 'medium' && styles.mediumPadding, state.size === 'large' && styles.largePadding, state.appearance === 'inverted' && styles.inverted, state.appearance === 'brand' && styles.brand, state.root.className);
        state.arrowClassName = react_1.mergeClasses(styles.arrow, state.size === 'small' ? styles.smallArrow : styles.mediumLargeArrow);
        return state;
    };
    exports.usePopoverSurfaceStyles_unstable = usePopoverSurfaceStyles_unstable;
});
//# sourceMappingURL=usePopoverSurfaceStyles.js.map