define(["require", "exports", "tslib", "@fluentui/react-utilities", "@fluentui/react-tabster", "../../popoverContext"], function (require, exports, tslib_1, react_utilities_1, react_tabster_1, popoverContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usePopoverSurface_unstable = void 0;
    /**
     * Create the state required to render PopoverSurface.
     *
     * The returned state can be modified with hooks such as usePopoverSurfaceStyles_unstable,
     * before being passed to renderPopoverSurface_unstable.
     *
     * @param props - props from this instance of PopoverSurface
     * @param ref - reference to root HTMLDivElement of PopoverSurface
     */
    var usePopoverSurface_unstable = function (props, ref) {
        var contentRef = popoverContext_1.usePopoverContext_unstable(function (context) { return context.contentRef; });
        var openOnHover = popoverContext_1.usePopoverContext_unstable(function (context) { return context.openOnHover; });
        var setOpen = popoverContext_1.usePopoverContext_unstable(function (context) { return context.setOpen; });
        var mountNode = popoverContext_1.usePopoverContext_unstable(function (context) { return context.mountNode; });
        var arrowRef = popoverContext_1.usePopoverContext_unstable(function (context) { return context.arrowRef; });
        var size = popoverContext_1.usePopoverContext_unstable(function (context) { return context.size; });
        var withArrow = popoverContext_1.usePopoverContext_unstable(function (context) { return context.withArrow; });
        var appearance = popoverContext_1.usePopoverContext_unstable(function (context) { return context.appearance; });
        var trapFocus = popoverContext_1.usePopoverContext_unstable(function (context) { return context.trapFocus; });
        var legacyTrapFocus = popoverContext_1.usePopoverContext_unstable(function (context) { return context.legacyTrapFocus; });
        var inline = popoverContext_1.usePopoverContext_unstable(function (context) { return context.inline; });
        var modalAttributes = react_tabster_1.useModalAttributes({ trapFocus: trapFocus, legacyTrapFocus: legacyTrapFocus }).modalAttributes;
        var state = {
            inline: inline,
            appearance: appearance,
            withArrow: withArrow,
            size: size,
            arrowRef: arrowRef,
            mountNode: mountNode,
            components: {
                root: 'div',
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign(tslib_1.__assign({ ref: react_utilities_1.useMergedRefs(ref, contentRef), role: trapFocus ? 'dialog' : 'group', 'aria-modal': trapFocus ? true : undefined }, modalAttributes), props)),
        };
        var _a = state.root, onMouseEnterOriginal = _a.onMouseEnter, onMouseLeaveOriginal = _a.onMouseLeave, onKeyDownOriginal = _a.onKeyDown;
        state.root.onMouseEnter = function (e) {
            if (openOnHover) {
                setOpen(e, true);
            }
            onMouseEnterOriginal === null || onMouseEnterOriginal === void 0 ? void 0 : onMouseEnterOriginal(e);
        };
        state.root.onMouseLeave = function (e) {
            if (openOnHover) {
                setOpen(e, false);
            }
            onMouseLeaveOriginal === null || onMouseLeaveOriginal === void 0 ? void 0 : onMouseLeaveOriginal(e);
        };
        state.root.onKeyDown = function (e) {
            var _a;
            // only close if the event happened inside the current popover
            // If using a stack of inline popovers, the user should call `stopPropagation` to avoid dismissing the entire stack
            if (e.key === 'Escape' && ((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {
                setOpen(e, false);
            }
            onKeyDownOriginal === null || onKeyDownOriginal === void 0 ? void 0 : onKeyDownOriginal(e);
        };
        return state;
    };
    exports.usePopoverSurface_unstable = usePopoverSurface_unstable;
});
//# sourceMappingURL=usePopoverSurface.js.map