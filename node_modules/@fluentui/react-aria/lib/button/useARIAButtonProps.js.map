{"version":3,"sources":["packages/react-components/react-aria/src/button/useARIAButtonProps.ts"],"names":[],"mappings":"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","sourcesContent":["import { Enter, Space } from '@fluentui/keyboard-keys';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport type { ARIAButtonElementIntersection, ARIAButtonProps, ARIAButtonResultProps, ARIAButtonType } from './types';\n\n/**\n * @internal\n *\n * Button keyboard handling, role, disabled and tabIndex implementation that ensures ARIA spec\n * for multiple scenarios of non native button elements. Ensuring 1st rule of ARIA for cases\n * where no attribute addition is required.\n *\n * @param type - the proper scenario to be interpreted by the hook.\n *  1. `button` - Minimal interference from the hook, as semantic button already supports most of the states\n *  2. `a` or `div` - Proper keyboard/mouse handling plus other support to ensure ARIA behavior\n * @param props - the props to be passed down the line to the desired element.\n * This hook will encapsulate proper properties, such as `onClick`, `onKeyDown`, `onKeyUp`, etc,.\n *\n * @example\n * ```tsx\n * const buttonProps = useARIAButtonProps('a', {\n *   href: './some-route'\n *   onClick: () => console.log('this should run both on click and Space and Enter')\n * })\n *\n * // ...\n *\n * return (\n *  <a {...buttonProps}>This anchor will behave as a proper button</a>\n * )\n * ```\n */\nexport function useARIAButtonProps<Type extends ARIAButtonType, Props extends ARIAButtonProps<Type>>(\n  type?: Type,\n  props?: Props,\n): ARIAButtonResultProps<Type, Props> {\n  const { disabled, disabledFocusable = false, ['aria-disabled']: ariaDisabled, onClick, onKeyDown, onKeyUp, ...rest } =\n    props ?? {};\n\n  const normalizedARIADisabled = typeof ariaDisabled === 'string' ? ariaDisabled === 'true' : ariaDisabled;\n\n  const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;\n\n  const handleClick = useEventCallback((ev: React.MouseEvent<ARIAButtonElementIntersection>) => {\n    if (isDisabled) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onClick?.(ev);\n    }\n  });\n\n  const handleKeyDown = useEventCallback((ev: React.KeyboardEvent<ARIAButtonElementIntersection>) => {\n    onKeyDown?.(ev);\n\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n\n    const key = ev.key;\n\n    if (isDisabled && (key === Enter || key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      return;\n    }\n\n    if (key === Space) {\n      ev.preventDefault();\n      return;\n    }\n\n    // If enter is pressed, activate the button\n    else if (key === Enter) {\n      ev.preventDefault();\n      ev.currentTarget.click();\n    }\n  });\n\n  const handleKeyUp = useEventCallback((ev: React.KeyboardEvent<ARIAButtonElementIntersection>) => {\n    onKeyUp?.(ev);\n\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n\n    const key = ev.key;\n\n    if (isDisabled && (key === Enter || key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      return;\n    }\n\n    if (key === Space) {\n      ev.preventDefault();\n      ev.currentTarget.click();\n    }\n  });\n\n  // If a <button> tag is to be rendered we just need to set disabled and aria-disabled correctly\n  if (type === 'button' || type === undefined) {\n    return {\n      ...rest,\n      disabled: disabled && !disabledFocusable,\n      'aria-disabled': disabledFocusable ? true : normalizedARIADisabled,\n      // onclick should still use internal handler to ensure prevention if disabled\n      // if disabledFocusable then there's no requirement for handlers as those events should not be propagated\n      onClick: disabledFocusable ? undefined : handleClick,\n      onKeyUp: disabledFocusable ? undefined : onKeyUp,\n      onKeyDown: disabledFocusable ? undefined : onKeyDown,\n    } as ARIAButtonResultProps<Type, Props>;\n  }\n\n  // If an <a> or <div> tag is to be rendered we have to remove disabled and type,\n  // and set aria-disabled, role and tabIndex.\n  else {\n    const resultProps = {\n      role: 'button',\n      tabIndex: disabled && !disabledFocusable ? undefined : 0,\n      ...rest,\n      // If it's not a <button> than listeners are required even with disabledFocusable\n      // Since you cannot assure the default behavior of the element\n      // E.g: <a> will redirect on click\n      onClick: handleClick,\n      onKeyUp: handleKeyUp,\n      onKeyDown: handleKeyDown,\n      'aria-disabled': disabled || disabledFocusable || normalizedARIADisabled,\n    } as ARIAButtonResultProps<Type, Props>;\n\n    if (type === 'a' && isDisabled) {\n      (resultProps as ARIAButtonResultProps<'a', Props>).href = undefined;\n    }\n\n    return resultProps;\n  }\n}\n"],"sourceRoot":"../src/"}