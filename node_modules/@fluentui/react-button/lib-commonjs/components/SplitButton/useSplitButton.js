"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSplitButton_unstable = void 0;

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const Button_1 = /*#__PURE__*/require("../Button/Button");

const MenuButton_1 = /*#__PURE__*/require("../MenuButton/MenuButton");
/**
 * Given user props, defines default props for the SplitButton and returns processed state.
 * @param props - User provided props to the SplitButton component.
 * @param ref - User provided ref to be passed to the SplitButton component.
 */


const useSplitButton_unstable = (props, ref) => {
  const {
    appearance = 'secondary',
    children,
    disabled = false,
    disabledFocusable = false,
    icon,
    iconPosition = 'before',
    menuButton,
    menuIcon,
    primaryActionButton,
    shape = 'rounded',
    size = 'medium'
  } = props;
  const baseId = react_utilities_1.useId('splitButton-');
  const menuButtonShorthand = react_utilities_1.resolveShorthand(menuButton, {
    defaultProps: {
      appearance,
      disabled,
      disabledFocusable,
      menuIcon,
      shape,
      size
    },
    required: true
  });
  const primaryActionButtonShorthand = react_utilities_1.resolveShorthand(primaryActionButton, {
    defaultProps: {
      appearance,
      children,
      disabled,
      disabledFocusable,
      icon,
      iconPosition,
      id: baseId + '__primaryActionButton',
      shape,
      size
    },
    required: true
  }); // Resolve menu button's aria-labelledby to be labelled by the primary action button if not a label was not provided
  // by the user.

  if (menuButtonShorthand && primaryActionButtonShorthand && !menuButtonShorthand['aria-label'] && !menuButtonShorthand['aria-labelledby']) {
    menuButtonShorthand['aria-labelledby'] = primaryActionButtonShorthand.id;
  }

  return {
    // Props passed at the top-level
    appearance,
    disabled,
    disabledFocusable,
    iconPosition,
    shape,
    size,
    // Slots definition
    components: {
      root: 'div',
      menuButton: MenuButton_1.MenuButton,
      primaryActionButton: Button_1.Button
    },
    root: react_utilities_1.getNativeElementProps('div', {
      ref,
      ...props
    }),
    menuButton: menuButtonShorthand,
    primaryActionButton: primaryActionButtonShorthand
  };
};

exports.useSplitButton_unstable = useSplitButton_unstable;
//# sourceMappingURL=useSplitButton.js.map