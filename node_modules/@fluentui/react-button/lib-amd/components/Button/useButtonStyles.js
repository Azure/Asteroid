define(["require", "exports", "tslib", "@fluentui/react-icons", "@fluentui/react-tabster", "@fluentui/react-theme", "@griffel/react"], function (require, exports, tslib_1, react_icons_1, react_tabster_1, react_theme_1, react_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useButtonStyles_unstable = exports.buttonClassNames = void 0;
    exports.buttonClassNames = {
        root: 'fui-Button',
        icon: 'fui-Button__icon',
    };
    var iconSpacingVar = '--fui-Button__icon--spacing';
    var buttonSpacingSmall = '3px';
    var buttonSpacingMedium = '5px';
    var useRootBaseClassName = react_1.makeResetStyles(tslib_1.__assign({ alignItems: 'center', boxSizing: 'border-box', display: 'inline-flex', justifyContent: 'center', textDecorationLine: 'none', verticalAlign: 'middle', margin: 0, overflow: 'hidden', backgroundColor: react_theme_1.tokens.colorNeutralBackground1, color: react_theme_1.tokens.colorNeutralForeground1, border: react_theme_1.tokens.strokeWidthThin + " solid " + react_theme_1.tokens.colorNeutralStroke1, fontFamily: react_theme_1.tokens.fontFamilyBase, outlineStyle: 'none', ':hover': (_a = {
                backgroundColor: react_theme_1.tokens.colorNeutralBackground1Hover,
                borderColor: react_theme_1.tokens.colorNeutralStroke1Hover,
                color: react_theme_1.tokens.colorNeutralForeground1Hover,
                cursor: 'pointer'
            },
            _a["& ." + react_icons_1.iconFilledClassName] = {
                display: 'inline',
            },
            _a["& ." + react_icons_1.iconRegularClassName] = {
                display: 'none',
            },
            _a), ':hover:active': (_b = {
                backgroundColor: react_theme_1.tokens.colorNeutralBackground1Pressed,
                borderColor: react_theme_1.tokens.colorNeutralStroke1Pressed,
                color: react_theme_1.tokens.colorNeutralForeground1Pressed,
                outlineStyle: 'none'
            },
            _b["& ." + react_icons_1.iconFilledClassName] = {
                display: 'inline',
            },
            _b["& ." + react_icons_1.iconRegularClassName] = {
                display: 'none',
            },
            _b), padding: buttonSpacingMedium + " " + react_theme_1.tokens.spacingHorizontalM, minWidth: '96px', borderRadius: react_theme_1.tokens.borderRadiusMedium, fontSize: react_theme_1.tokens.fontSizeBase300, fontWeight: react_theme_1.tokens.fontWeightSemibold, lineHeight: react_theme_1.tokens.lineHeightBase300, 
        // Transition styles
        transitionDuration: react_theme_1.tokens.durationFaster, transitionProperty: 'background, border, color', transitionTimingFunction: react_theme_1.tokens.curveEasyEase, '@media screen and (prefers-reduced-motion: reduce)': {
            transitionDuration: '0.01ms',
        }, 
        // High contrast styles
        '@media (forced-colors: active)': {
            ':focus': {
                borderColor: 'ButtonText',
            },
            ':hover': {
                backgroundColor: 'HighlightText',
                borderColor: 'Highlight',
                color: 'Highlight',
                forcedColorAdjust: 'none',
            },
            ':hover:active': {
                backgroundColor: 'HighlightText',
                borderColor: 'Highlight',
                color: 'Highlight',
                forcedColorAdjust: 'none',
            },
        } }, react_tabster_1.createCustomFocusIndicatorStyle({
        borderColor: react_theme_1.tokens.colorTransparentStroke,
        borderRadius: react_theme_1.tokens.borderRadiusMedium,
        outline: react_theme_1.tokens.strokeWidthThick + " solid " + react_theme_1.tokens.colorTransparentStroke,
        boxShadow: "\n      " + react_theme_1.tokens.shadow4 + ",\n      0 0 0 2px " + react_theme_1.tokens.colorStrokeFocus2 + "\n    ",
        zIndex: 1,
    })));
    var useIconBaseClassName = react_1.makeResetStyles((_c = {
            alignItems: 'center',
            display: 'inline-flex',
            justifyContent: 'center',
            fontSize: '20px',
            height: '20px',
            width: '20px'
        },
        _c[iconSpacingVar] = react_theme_1.tokens.spacingHorizontalSNudge,
        _c));
    var useRootStyles = react_1.makeStyles({
        // Appearance variations
        outline: {
            backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            ':hover': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackgroundHover,
            },
            ':hover:active': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackgroundPressed,
            },
        },
        primary: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorBrandBackground }, react_1.shorthands.borderColor('transparent')), { color: react_theme_1.tokens.colorNeutralForegroundOnBrand, ':hover': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorBrandBackgroundHover }, react_1.shorthands.borderColor('transparent')), { color: react_theme_1.tokens.colorNeutralForegroundOnBrand }), ':hover:active': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorBrandBackgroundPressed }, react_1.shorthands.borderColor('transparent')), { color: react_theme_1.tokens.colorNeutralForegroundOnBrand }) }),
        secondary: {
        /* The secondary styles are exactly the same as the base styles. */
        },
        subtle: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorSubtleBackground }, react_1.shorthands.borderColor('transparent')), { color: react_theme_1.tokens.colorNeutralForeground2, ':hover': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover }, react_1.shorthands.borderColor('transparent')), (_d = { color: react_theme_1.tokens.colorNeutralForeground2Hover }, _d["& ." + exports.buttonClassNames.icon] = {
                color: react_theme_1.tokens.colorNeutralForeground2BrandHover,
            }, _d)), ':hover:active': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed }, react_1.shorthands.borderColor('transparent')), (_e = { color: react_theme_1.tokens.colorNeutralForeground2Pressed }, _e["& ." + exports.buttonClassNames.icon] = {
                color: react_theme_1.tokens.colorNeutralForeground2BrandPressed,
            }, _e)) }),
        transparent: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor('transparent')), { color: react_theme_1.tokens.colorNeutralForeground2, ':hover': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackgroundHover }, react_1.shorthands.borderColor('transparent')), { color: react_theme_1.tokens.colorNeutralForeground2BrandHover }), ':hover:active': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackgroundPressed }, react_1.shorthands.borderColor('transparent')), { color: react_theme_1.tokens.colorNeutralForeground2BrandPressed }) }),
        // Shape variations
        circular: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)),
        rounded: {
        /* The borderRadius rounded styles are handled in the size variations */
        },
        square: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusNone)),
        // Size variations
        small: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(buttonSpacingSmall, react_theme_1.tokens.spacingHorizontalS)), { minWidth: '64px' }), react_1.shorthands.borderRadius(buttonSpacingSmall)), { fontSize: react_theme_1.tokens.fontSizeBase200, fontWeight: react_theme_1.tokens.fontWeightRegular, lineHeight: react_theme_1.tokens.lineHeightBase200 }),
        medium: {
        /* defined in base styles */
        },
        large: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalS, react_theme_1.tokens.spacingHorizontalL)), { minWidth: '96px' }), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { fontSize: react_theme_1.tokens.fontSizeBase400, fontWeight: react_theme_1.tokens.fontWeightSemibold, lineHeight: react_theme_1.tokens.lineHeightBase400 }),
    });
    var useRootDisabledStyles = react_1.makeStyles({
        // Base styles
        base: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackgroundDisabled }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), { color: react_theme_1.tokens.colorNeutralForegroundDisabled, cursor: 'not-allowed', ':hover': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackgroundDisabled }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), (_f = { color: react_theme_1.tokens.colorNeutralForegroundDisabled, cursor: 'not-allowed' }, _f["& ." + react_icons_1.iconFilledClassName] = {
                display: 'none',
            }, _f["& ." + react_icons_1.iconRegularClassName] = {
                display: 'inline',
            }, _f)), ':hover:active': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackgroundDisabled }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), (_g = { color: react_theme_1.tokens.colorNeutralForegroundDisabled, cursor: 'not-allowed' }, _g["& ." + react_icons_1.iconFilledClassName] = {
                display: 'none',
            }, _g["& ." + react_icons_1.iconRegularClassName] = {
                display: 'inline',
            }, _g)) }),
        // High contrast styles
        highContrast: {
            '@media (forced-colors: active)': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')), { color: 'GrayText', ':focus': tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')), ':hover': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')), { color: 'GrayText' }), ':hover:active': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')), { color: 'GrayText' }) }),
        },
        // Appearance variations
        outline: {
            backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            ':hover': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            },
            ':hover:active': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            },
        },
        primary: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor('transparent')), { ':hover': tslib_1.__assign({}, react_1.shorthands.borderColor('transparent')), ':hover:active': tslib_1.__assign({}, react_1.shorthands.borderColor('transparent')) }),
        secondary: {
        /* The secondary styles are exactly the same as the base styles. */
        },
        subtle: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor('transparent')), { ':hover': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor('transparent')), ':hover:active': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor('transparent')) }),
        transparent: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor('transparent')), { ':hover': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor('transparent')), ':hover:active': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor('transparent')) }),
    });
    var useRootFocusStyles = react_1.makeStyles({
        // Shape variations
        circular: react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular))),
        rounded: {
        /* The rounded styles are exactly the same as the base styles. */
        },
        square: react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusNone))),
        // Primary styles
        primary: react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralForegroundOnBrand)), { boxShadow: react_theme_1.tokens.shadow2 + ", 0 0 0 2px " + react_theme_1.tokens.colorStrokeFocus2 })),
        // Size variations
        small: react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusSmall))),
        medium: {
        /* defined in base styles */
        },
        large: react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusLarge))),
    });
    var useRootIconOnlyStyles = react_1.makeStyles({
        // Size variations
        small: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingHorizontalXS)), { minWidth: '28px', maxWidth: '28px' }),
        medium: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingHorizontalXS)), { minWidth: '32px', maxWidth: '32px' }),
        large: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingHorizontalSNudge)), { minWidth: '40px', maxWidth: '40px' }),
    });
    var useIconStyles = react_1.makeStyles({
        // Size variations
        small: (_h = {
                fontSize: '20px',
                height: '20px',
                width: '20px'
            },
            _h[iconSpacingVar] = react_theme_1.tokens.spacingHorizontalXS,
            _h),
        medium: {
        /* defined in base styles */
        },
        large: (_j = {
                fontSize: '24px',
                height: '24px',
                width: '24px'
            },
            _j[iconSpacingVar] = react_theme_1.tokens.spacingHorizontalSNudge,
            _j),
        // Icon position variations
        before: {
            marginRight: "var(" + iconSpacingVar + ")",
        },
        after: {
            marginLeft: "var(" + iconSpacingVar + ")",
        },
    });
    var useButtonStyles_unstable = function (state) {
        var rootBaseClassName = useRootBaseClassName();
        var iconBaseClassName = useIconBaseClassName();
        var rootStyles = useRootStyles();
        var rootDisabledStyles = useRootDisabledStyles();
        var rootFocusStyles = useRootFocusStyles();
        var rootIconOnlyStyles = useRootIconOnlyStyles();
        var iconStyles = useIconStyles();
        var appearance = state.appearance, disabled = state.disabled, disabledFocusable = state.disabledFocusable, iconOnly = state.iconOnly, iconPosition = state.iconPosition, shape = state.shape, size = state.size;
        state.root.className = react_1.mergeClasses(exports.buttonClassNames.root, rootBaseClassName, appearance && rootStyles[appearance], rootStyles[size], rootStyles[shape], 
        // Disabled styles
        (disabled || disabledFocusable) && rootDisabledStyles.base, (disabled || disabledFocusable) && rootDisabledStyles.highContrast, appearance && (disabled || disabledFocusable) && rootDisabledStyles[appearance], 
        // Focus styles
        appearance === 'primary' && rootFocusStyles.primary, rootFocusStyles[size], rootFocusStyles[shape], 
        // Icon-only styles
        iconOnly && rootIconOnlyStyles[size], 
        // User provided class name
        state.root.className);
        if (state.icon) {
            state.icon.className = react_1.mergeClasses(exports.buttonClassNames.icon, iconBaseClassName, state.root.children !== undefined && state.root.children !== null && iconStyles[iconPosition], iconStyles[size], state.icon.className);
        }
        return state;
    };
    exports.useButtonStyles_unstable = useButtonStyles_unstable;
});
//# sourceMappingURL=useButtonStyles.js.map