define(["require", "exports", "tslib", "@fluentui/react-icons", "@fluentui/react-theme", "@griffel/react", "../Button/useButtonStyles"], function (require, exports, tslib_1, react_icons_1, react_theme_1, react_1, useButtonStyles_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMenuButtonStyles_unstable = exports.menuButtonClassNames = void 0;
    exports.menuButtonClassNames = {
        root: 'fui-MenuButton',
        icon: 'fui-MenuButton__icon',
        menuIcon: 'fui-MenuButton__menuIcon',
    };
    var useRootExpandedStyles = react_1.makeStyles({
        base: (_a = {},
            _a["& ." + react_icons_1.iconFilledClassName] = {
                display: 'inline',
            },
            _a["& ." + react_icons_1.iconRegularClassName] = {
                display: 'none',
            },
            _a),
        // Appearance variations
        outline: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Selected)), react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThicker)), { color: react_theme_1.tokens.colorNeutralForeground1Selected }),
        primary: {
            backgroundColor: react_theme_1.tokens.colorBrandBackgroundSelected,
        },
        secondary: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1Selected }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Selected)), { color: react_theme_1.tokens.colorNeutralForeground1Selected }),
        subtle: {
            backgroundColor: react_theme_1.tokens.colorSubtleBackgroundSelected,
            color: react_theme_1.tokens.colorNeutralForeground2Selected,
        },
        transparent: {
            backgroundColor: react_theme_1.tokens.colorTransparentBackgroundSelected,
            color: react_theme_1.tokens.colorNeutralForeground2BrandSelected,
        },
    });
    var useIconExpandedStyles = react_1.makeStyles({
        // Appearance variations
        outline: {
            color: react_theme_1.tokens.colorNeutralForeground1Selected,
        },
        primary: {
        /* The primary styles are exactly the same as the base styles. */
        },
        secondary: {
            color: react_theme_1.tokens.colorNeutralForeground1Selected,
        },
        subtle: {
            color: react_theme_1.tokens.colorNeutralForeground2BrandSelected,
        },
        transparent: {
            color: react_theme_1.tokens.colorNeutralForeground2BrandSelected,
        },
    });
    var useMenuIconStyles = react_1.makeStyles({
        base: {
            lineHeight: 0,
        },
        // Size appearance
        small: {
            fontSize: '12px',
            height: '12px',
            lineHeight: react_theme_1.tokens.lineHeightBase200,
            width: '12px',
        },
        medium: {
            fontSize: '12px',
            height: '12px',
            lineHeight: react_theme_1.tokens.lineHeightBase200,
            width: '12px',
        },
        large: {
            fontSize: '16px',
            height: '16px',
            lineHeight: react_theme_1.tokens.lineHeightBase400,
            width: '16px',
        },
        // Not-icon only
        notIconOnly: {
            marginLeft: react_theme_1.tokens.spacingHorizontalXS,
        },
    });
    var useMenuButtonStyles_unstable = function (state) {
        var rootExpandedStyles = useRootExpandedStyles();
        var iconExpandedStyles = useIconExpandedStyles();
        var menuIconStyles = useMenuIconStyles();
        state.root.className = react_1.mergeClasses(exports.menuButtonClassNames.root, state.root['aria-expanded'] && rootExpandedStyles.base, state.root['aria-expanded'] && rootExpandedStyles[state.appearance], state.root.className);
        if (state.icon) {
            state.icon.className = react_1.mergeClasses(exports.menuButtonClassNames.icon, state.root['aria-expanded'] && iconExpandedStyles[state.appearance], state.icon.className);
        }
        if (state.menuIcon) {
            state.menuIcon.className = react_1.mergeClasses(exports.menuButtonClassNames.menuIcon, menuIconStyles.base, menuIconStyles[state.size], !state.iconOnly && menuIconStyles.notIconOnly, state.menuIcon.className);
        }
        useButtonStyles_1.useButtonStyles_unstable(tslib_1.__assign(tslib_1.__assign({}, state), { iconPosition: 'before' }));
        return state;
    };
    exports.useMenuButtonStyles_unstable = useMenuButtonStyles_unstable;
});
//# sourceMappingURL=useMenuButtonStyles.js.map