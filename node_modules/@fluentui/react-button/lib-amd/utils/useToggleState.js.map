{"version":3,"file":"useToggleState.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-button/src/utils/useToggleState.ts"],"names":[],"mappings":";;;;IAKA,SAAgB,cAAc,CAI5B,KAAyB,EAAE,KAAmB;;QACtC,IAAA,OAAO,GAAkD,KAAK,QAAvD,EAAE,cAAc,GAAkC,KAAK,eAAvC,EAAE,QAAQ,GAAwB,KAAK,SAA7B,EAAE,iBAAiB,GAAK,KAAK,kBAAV,CAAW;QACjE,IAAA,KAAoB,KAAK,CAAC,IAAI,EAA5B,OAAO,aAAA,EAAE,IAAI,UAAe,CAAC;QAE/B,IAAA,KAAkC,sCAAoB,CAAC;YAC3D,KAAK,EAAE,OAAO;YACd,YAAY,EAAE,cAAc;YAC5B,YAAY,EAAE,KAAK;SACpB,CAAC,EAJK,YAAY,QAAA,EAAE,eAAe,QAIlC,CAAC;QAEH,IAAM,kBAAkB,GAAG,IAAI,KAAK,kBAAkB,IAAI,IAAI,KAAK,UAAU,CAAC;QAE9E,IAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CACrC,UAAA,EAAE;YACA,IAAI,CAAC,QAAQ,IAAI,CAAC,iBAAiB,EAAE;gBACnC,IAAI,EAAE,CAAC,gBAAgB,EAAE;oBACvB,OAAO;iBACR;gBAED,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC;aAChC;QACH,CAAC,EACD,CAAC,YAAY,EAAE,QAAQ,EAAE,iBAAiB,EAAE,eAAe,CAAC,CAC7D,CAAC;QAEF,OAAO,sCACF,KAAK,KAER,OAAO,EAAE,YAAY,EAErB,IAAI,wCACC,KAAK,CAAC,IAAI,gBACZ,kBAAkB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,IAAG,YAAY,EACpE,UAAO,GAAE,kCAAgB,CACvB,gCAAc,CAAC,OAAyE,EAAE,aAAa,CAAC,CACzG,SAEkB,CAAC;IAC1B,CAAC;IA1CD,wCA0CC","sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport type { ButtonState } from '../Button';\nimport type { ToggleButtonProps, ToggleButtonState } from '../ToggleButton';\n\nexport function useToggleState<\n  TToggleButtonProps extends Pick<ToggleButtonProps, 'checked' | 'defaultChecked' | 'disabled' | 'disabledFocusable'>,\n  TButtonState extends Pick<ButtonState, 'root'>,\n  TToggleButtonState extends Pick<ToggleButtonState, 'checked' | 'root'>\n>(props: TToggleButtonProps, state: TButtonState): TToggleButtonState {\n  const { checked, defaultChecked, disabled, disabledFocusable } = props;\n  const { onClick, role } = state.root;\n\n  const [checkedValue, setCheckedValue] = useControllableState({\n    state: checked,\n    defaultState: defaultChecked,\n    initialState: false,\n  });\n\n  const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n\n  const onToggleClick = React.useCallback(\n    ev => {\n      if (!disabled && !disabledFocusable) {\n        if (ev.defaultPrevented) {\n          return;\n        }\n\n        setCheckedValue(!checkedValue);\n      }\n    },\n    [checkedValue, disabled, disabledFocusable, setCheckedValue],\n  );\n\n  return {\n    ...state,\n\n    checked: checkedValue,\n\n    root: {\n      ...state.root,\n      [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedValue,\n      onClick: useEventCallback(\n        mergeCallbacks(onClick as React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>, onToggleClick),\n      ),\n    },\n  } as TToggleButtonState;\n}\n"]}