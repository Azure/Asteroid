import { getPartitionedNativeProps, resolveShorthand, useControllableState, useEventCallback } from '@fluentui/react-utilities';
/**
 * Create the state required to render Textarea.
 *
 * The returned state can be modified with hooks such as useTextareaStyles_unstable,
 * before being passed to renderTextarea_unstable.
 *
 * @param props - props from this instance of Textarea
 * @param ref - reference to root HTMLElement of Textarea
 */

export const useTextarea_unstable = (props, ref) => {
  const {
    size = 'medium',
    appearance = 'outline',
    resize = 'none',
    onChange
  } = props;

  if (process.env.NODE_ENV !== 'production' && (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')) {
    // eslint-disable-next-line no-console
    console.error("The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the" + ' future.');
  }

  const [value, setValue] = useControllableState({
    state: props.value,
    defaultState: props.defaultValue,
    initialState: undefined
  });
  const nativeProps = getPartitionedNativeProps({
    props,
    primarySlotTagName: 'textarea',
    excludedPropNames: ['onChange', 'value', 'defaultValue']
  });
  const state = {
    size,
    appearance,
    resize,
    components: {
      root: 'span',
      textarea: 'textarea'
    },
    textarea: resolveShorthand(props.textarea, {
      required: true,
      defaultProps: {
        ref,
        ...nativeProps.primary
      }
    }),
    root: resolveShorthand(props.root, {
      required: true,
      defaultProps: nativeProps.root
    })
  };
  state.textarea.value = value;
  state.textarea.onChange = useEventCallback(ev => {
    const newValue = ev.target.value;
    onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
      value: newValue
    });
    setValue(newValue);
  });
  return state;
};
//# sourceMappingURL=useTextarea.js.map