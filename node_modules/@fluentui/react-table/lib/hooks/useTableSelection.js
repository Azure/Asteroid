import * as React from 'react';
import { useControllableState, useEventCallback } from '@fluentui/react-utilities';
import { createSelectionManager } from './selectionManager';

const noop = () => undefined;

export const defaultTableSelectionState = {
  allRowsSelected: false,
  clearRows: noop,
  deselectRow: noop,
  isRowSelected: () => false,
  selectRow: noop,
  selectedRows: /*#__PURE__*/new Set(),
  someRowsSelected: false,
  toggleAllRows: noop,
  toggleRow: noop,
  selectionMode: 'multiselect'
};
export function useTableSelection(options) {
  // False positive, these plugin hooks are intended to be run on every render
  // eslint-disable-next-line react-hooks/rules-of-hooks
  return tableState => useTableSelectionState(tableState, options);
}
export function useTableSelectionState(tableState, options) {
  const {
    items,
    getRowId
  } = tableState;
  const {
    selectionMode,
    defaultSelectedItems,
    selectedItems,
    onSelectionChange
  } = options;
  const [selected, setSelected] = useControllableState({
    initialState: new Set(),
    defaultState: defaultSelectedItems,
    state: selectedItems
  });
  const selectionManager = React.useMemo(() => {
    return createSelectionManager(selectionMode, (e, newSelectedItems) => {
      setSelected(() => {
        onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(e, {
          selectedItems: newSelectedItems
        });
        return newSelectedItems;
      });
    });
  }, [onSelectionChange, selectionMode, setSelected]);
  const toggleAllRows = useEventCallback(e => {
    selectionManager.toggleAllItems(e, items.map((item, i) => {
      var _a;

      return (_a = getRowId === null || getRowId === void 0 ? void 0 : getRowId(item)) !== null && _a !== void 0 ? _a : i;
    }), selected);
  });
  const toggleRow = useEventCallback((e, rowId) => selectionManager.toggleItem(e, rowId, selected));
  const deselectRow = useEventCallback((e, rowId) => selectionManager.deselectItem(e, rowId, selected));
  const selectRow = useEventCallback((e, rowId) => selectionManager.selectItem(e, rowId, selected));

  const isRowSelected = rowId => selectionManager.isSelected(rowId, selected);

  return { ...tableState,
    selection: {
      selectionMode,
      someRowsSelected: selected.size > 0,
      allRowsSelected: selectionMode === 'single' ? selected.size > 0 : selected.size === items.length,
      selectedRows: selected,
      toggleRow,
      toggleAllRows,
      clearRows: selectionManager.clearItems,
      deselectRow,
      selectRow,
      isRowSelected
    }
  };
}
//# sourceMappingURL=useTableSelection.js.map