define(["require", "exports", "tslib", "@fluentui/react-utilities"], function (require, exports, tslib_1, react_utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useInput_unstable = void 0;
    /**
     * Create the state required to render Input.
     *
     * The returned state can be modified with hooks such as useInputStyles_unstable,
     * before being passed to renderInput_unstable.
     *
     * @param props - props from this instance of Input
     * @param ref - reference to `<input>` element of Input
     */
    var useInput_unstable = function (props, ref) {
        var _a = props.size, size = _a === void 0 ? 'medium' : _a, _b = props.appearance, appearance = _b === void 0 ? 'outline' : _b, onChange = props.onChange;
        if (process.env.NODE_ENV !== 'production' &&
            (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')) {
            // eslint-disable-next-line no-console
            console.error("The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the" +
                ' future.');
        }
        var _c = react_utilities_1.useControllableState({
            state: props.value,
            defaultState: props.defaultValue,
            initialState: '',
        }), value = _c[0], setValue = _c[1];
        var nativeProps = react_utilities_1.getPartitionedNativeProps({
            props: props,
            primarySlotTagName: 'input',
            excludedPropNames: ['size', 'onChange', 'value', 'defaultValue'],
        });
        var state = {
            size: size,
            appearance: appearance,
            components: {
                root: 'span',
                input: 'input',
                contentBefore: 'span',
                contentAfter: 'span',
            },
            input: react_utilities_1.resolveShorthand(props.input, {
                required: true,
                defaultProps: tslib_1.__assign({ type: 'text', ref: ref }, nativeProps.primary),
            }),
            contentAfter: react_utilities_1.resolveShorthand(props.contentAfter),
            contentBefore: react_utilities_1.resolveShorthand(props.contentBefore),
            root: react_utilities_1.resolveShorthand(props.root, {
                required: true,
                defaultProps: nativeProps.root,
            }),
        };
        state.input.value = value;
        state.input.onChange = react_utilities_1.useEventCallback(function (ev) {
            var newValue = ev.target.value;
            onChange === null || onChange === void 0 ? void 0 : onChange(ev, { value: newValue });
            setValue(newValue);
        });
        return state;
    };
    exports.useInput_unstable = useInput_unstable;
});
//# sourceMappingURL=useInput.js.map