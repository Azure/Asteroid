define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useInputStyles_unstable = exports.inputClassNames = void 0;
    exports.inputClassNames = {
        root: 'fui-Input',
        input: 'fui-Input__input',
        contentBefore: 'fui-Input__contentBefore',
        contentAfter: 'fui-Input__contentAfter',
    };
    // TODO(sharing) should these be shared somewhere?
    var fieldHeights = {
        small: '24px',
        medium: '32px',
        large: '40px',
    };
    var useRootStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', alignItems: 'center', flexWrap: 'nowrap' }, react_1.shorthands.gap(react_theme_1.tokens.spacingHorizontalXXS)), { fontFamily: react_theme_1.tokens.fontFamilyBase }), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { position: 'relative', boxSizing: 'border-box' }),
        interactive: {
            // This is all for the bottom focus border.
            // It's supposed to be 2px flat all the way across and match the radius of the field's corners.
            '::after': tslib_1.__assign(tslib_1.__assign({ boxSizing: 'border-box', content: '""', position: 'absolute', left: '-1px', bottom: '-1px', right: '-1px', 
                // Maintaining the correct corner radius:
                // Use the whole border-radius as the height and only put radii on the bottom corners.
                // (Otherwise the radius would be automatically reduced to fit available space.)
                // max() ensures the focus border still shows up even if someone sets tokens.borderRadiusMedium to 0.
                height: "max(2px, " + react_theme_1.tokens.borderRadiusMedium + ")", borderBottomLeftRadius: react_theme_1.tokens.borderRadiusMedium, borderBottomRightRadius: react_theme_1.tokens.borderRadiusMedium }, react_1.shorthands.borderBottom('2px', 'solid', react_theme_1.tokens.colorCompoundBrandStroke)), { clipPath: 'inset(calc(100% - 2px) 0 0 0)', 
                // Animation for focus OUT
                transform: 'scaleX(0)', transitionProperty: 'transform', transitionDuration: react_theme_1.tokens.durationUltraFast, transitionDelay: react_theme_1.tokens.curveAccelerateMid, '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                } }),
            ':focus-within::after': {
                // Animation for focus IN
                transform: 'scaleX(1)',
                transitionProperty: 'transform',
                transitionDuration: react_theme_1.tokens.durationNormal,
                transitionDelay: react_theme_1.tokens.curveDecelerateMid,
                '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                },
            },
            ':focus-within:active::after': {
                // This is if the user clicks the field again while it's already focused
                borderBottomColor: react_theme_1.tokens.colorCompoundBrandStrokePressed,
            },
            ':focus-within': {
                outlineWidth: '2px',
                outlineStyle: 'solid',
                outlineColor: 'transparent',
            },
        },
        small: tslib_1.__assign(tslib_1.__assign({ minHeight: fieldHeights.small }, react_1.shorthands.padding('0', react_theme_1.tokens.spacingHorizontalSNudge)), react_theme_1.typographyStyles.caption1),
        medium: tslib_1.__assign(tslib_1.__assign({ minHeight: fieldHeights.medium }, react_1.shorthands.padding('0', react_theme_1.tokens.spacingHorizontalMNudge)), react_theme_1.typographyStyles.body1),
        large: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ minHeight: fieldHeights.large }, react_1.shorthands.padding('0', react_theme_1.tokens.spacingHorizontalM)), react_theme_1.typographyStyles.body2), react_1.shorthands.gap(react_theme_1.tokens.spacingHorizontalSNudge)),
        outline: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorNeutralStroke1)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
        outlineInteractive: {
            ':hover': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Hover)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover }),
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':active,:focus-within': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Pressed)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed }),
        },
        underline: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderRadius(0)), react_1.shorthands.borderBottom('1px', 'solid', react_theme_1.tokens.colorNeutralStrokeAccessible)),
        underlineInteractive: {
            ':hover': {
                borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover,
            },
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':active,:focus-within': {
                borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed,
            },
            '::after': react_1.shorthands.borderRadius(0), // remove rounded corners from focus underline
        },
        filled: tslib_1.__assign({}, react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorTransparentStroke)),
        filledInteractive: {
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':hover,:focus-within': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeInteractive)),
        },
        invalid: {
            ':not(:focus-within),:hover:not(:focus-within)': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder2)),
        },
        'filled-darker': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground3,
        },
        'filled-lighter': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground1,
        },
        'filled-darker-shadow': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground3,
            boxShadow: react_theme_1.tokens.shadow2,
        },
        'filled-lighter-shadow': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground1,
            boxShadow: react_theme_1.tokens.shadow2,
        },
        disabled: tslib_1.__assign(tslib_1.__assign({ cursor: 'not-allowed', backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), { '@media (forced-colors: active)': tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')) }),
    });
    var useInputElementStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ boxSizing: 'border-box', flexGrow: 1, minWidth: 0 }, react_1.shorthands.borderStyle('none')), react_1.shorthands.padding('0', react_theme_1.tokens.spacingHorizontalXXS)), { color: react_theme_1.tokens.colorNeutralForeground1, 
            // Use literal "transparent" (not from the theme) to always let the color from the root show through
            backgroundColor: 'transparent', '::placeholder': {
                color: react_theme_1.tokens.colorNeutralForeground4,
                opacity: 1, // browser style override
            }, outlineStyle: 'none' }),
        small: tslib_1.__assign({}, react_theme_1.typographyStyles.caption1),
        medium: tslib_1.__assign({}, react_theme_1.typographyStyles.body1),
        large: tslib_1.__assign(tslib_1.__assign({}, react_theme_1.typographyStyles.body2), react_1.shorthands.padding('0', react_theme_1.tokens.spacingHorizontalSNudge)),
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            cursor: 'not-allowed',
            '::placeholder': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
    });
    var useContentStyles = react_1.makeStyles({
        base: {
            boxSizing: 'border-box',
            color: react_theme_1.tokens.colorNeutralForeground3,
            // special case styling for icons (most common case) to ensure they're centered vertically
            '> svg': { display: 'block' },
        },
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
        },
        // Ensure resizable icons show up with the proper font size
        small: {
            '> svg': { fontSize: '16px' },
        },
        medium: {
            '> svg': { fontSize: '20px' },
        },
        large: {
            '> svg': { fontSize: '24px' },
        },
    });
    /**
     * Apply styling to the Input slots based on the state
     */
    var useInputStyles_unstable = function (state) {
        var size = state.size, appearance = state.appearance;
        var disabled = state.input.disabled;
        var invalid = "" + state.input['aria-invalid'] === 'true';
        var filled = appearance.startsWith('filled');
        var rootStyles = useRootStyles();
        var inputStyles = useInputElementStyles();
        var contentStyles = useContentStyles();
        state.root.className = react_1.mergeClasses(exports.inputClassNames.root, rootStyles.base, rootStyles[size], rootStyles[appearance], !disabled && rootStyles.interactive, !disabled && appearance === 'outline' && rootStyles.outlineInteractive, !disabled && appearance === 'underline' && rootStyles.underlineInteractive, !disabled && filled && rootStyles.filledInteractive, filled && rootStyles.filled, !disabled && invalid && rootStyles.invalid, disabled && rootStyles.disabled, state.root.className);
        state.input.className = react_1.mergeClasses(exports.inputClassNames.input, inputStyles.base, inputStyles[size], disabled && inputStyles.disabled, state.input.className);
        var contentClasses = [contentStyles.base, disabled && contentStyles.disabled, contentStyles[size]];
        if (state.contentBefore) {
            state.contentBefore.className = react_1.mergeClasses.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray([exports.inputClassNames.contentBefore], contentClasses), [state.contentBefore.className]));
        }
        if (state.contentAfter) {
            state.contentAfter.className = react_1.mergeClasses.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray([exports.inputClassNames.contentAfter], contentClasses), [state.contentAfter.className]));
        }
        return state;
    };
    exports.useInputStyles_unstable = useInputStyles_unstable;
});
//# sourceMappingURL=useInputStyles.js.map