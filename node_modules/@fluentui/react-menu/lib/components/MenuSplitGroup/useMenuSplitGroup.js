import * as React from 'react';
import { getNativeElementProps, getRTLSafeKey, useMergedRefs } from '@fluentui/react-utilities';
import { useFocusFinders } from '@fluentui/react-tabster';
import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';
import { ArrowRight, ArrowLeft } from '@fluentui/keyboard-keys';
/**
 * Create the state required to render MenuSplitGroup.
 *
 * The returned state can be modified with hooks such as useMenuSplitGroupStyles_unstable,
 * before being passed to renderMenuSplitGroup_unstable.
 *
 * @param props - props from this instance of MenuSplitGroup
 * @param ref - reference to root HTMLElement of MenuSplitGroup
 */

export const useMenuSplitGroup_unstable = (props, ref) => {
  const innerRef = React.useRef();
  const {
    dir,
    targetDocument
  } = useFluent();
  const nextArrowKey = getRTLSafeKey(ArrowRight, dir);
  const prevArrowKey = getRTLSafeKey(ArrowLeft, dir);
  const {
    findNextFocusable,
    findPrevFocusable
  } = useFocusFinders();
  const onKeyDown = React.useCallback(e => {
    var _a;

    const activeElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.activeElement;

    if (!activeElement) {
      return;
    }

    if (!((_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.contains(activeElement))) {
      return;
    }

    if (e.key === nextArrowKey) {
      const next = findNextFocusable(activeElement, {
        container: innerRef.current
      });
      next === null || next === void 0 ? void 0 : next.focus();
    }

    if (e.key === prevArrowKey) {
      const prev = findPrevFocusable(activeElement, {
        container: innerRef.current
      });
      prev === null || prev === void 0 ? void 0 : prev.focus();
    }
  }, [findNextFocusable, findPrevFocusable, targetDocument, nextArrowKey, prevArrowKey]);
  return {
    components: {
      root: 'div'
    },
    root: getNativeElementProps('div', {
      role: 'group',
      ref: useMergedRefs(ref, innerRef),
      onKeyDown,
      ...props
    })
  };
};
//# sourceMappingURL=useMenuSplitGroup.js.map