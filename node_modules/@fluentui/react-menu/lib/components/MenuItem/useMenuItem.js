import * as React from 'react';
import { useEventCallback, resolveShorthand, useMergedRefs, getNativeElementProps } from '@fluentui/react-utilities';
import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';
import { useCharacterSearch } from './useCharacterSearch';
import { useMenuTriggerContext_unstable } from '../../contexts/menuTriggerContext';
import { ChevronRightFilled, ChevronRightRegular, ChevronLeftFilled, ChevronLeftRegular, bundleIcon } from '@fluentui/react-icons';
import { useMenuListContext_unstable } from '../../contexts/menuListContext';
import { useMenuContext_unstable } from '../../contexts/menuContext';
import { useARIAButtonShorthand } from '@fluentui/react-aria';
import { Enter, Space } from '@fluentui/keyboard-keys';
const ChevronRightIcon = /*#__PURE__*/bundleIcon(ChevronRightFilled, ChevronRightRegular);
const ChevronLeftIcon = /*#__PURE__*/bundleIcon(ChevronLeftFilled, ChevronLeftRegular);
/**
 * Returns the props and state required to render the component
 */

export const useMenuItem_unstable = (props, ref) => {
  const isSubmenuTrigger = useMenuTriggerContext_unstable();
  const persistOnClickContext = useMenuContext_unstable(context => context.persistOnItemClick);
  const {
    as = 'div',
    disabled,
    disabledFocusable,
    hasSubmenu = isSubmenuTrigger,
    persistOnClick = persistOnClickContext
  } = props;
  const hasIcons = useMenuListContext_unstable(context => context.hasIcons);
  const hasCheckmarks = useMenuListContext_unstable(context => context.hasCheckmarks);
  const setOpen = useMenuContext_unstable(context => context.setOpen);
  const {
    dir
  } = useFluent();
  const innerRef = React.useRef(null);
  const dismissedWithKeyboardRef = React.useRef(false);
  const isDisabled = Boolean(disabled || disabledFocusable);
  const state = {
    hasSubmenu,
    disabled: isDisabled,
    persistOnClick,
    components: {
      root: 'div',
      icon: 'span',
      checkmark: 'span',
      submenuIndicator: 'span',
      content: 'span',
      secondaryContent: 'span'
    },
    isNativeButton: as === 'button',
    root: getNativeElementProps(as, useARIAButtonShorthand({
      disabled: false,
      disabledFocusable: isDisabled,
      as
    }, {
      required: true,
      defaultProps: {
        role: 'menuitem',
        ...props,
        ref: useMergedRefs(ref, innerRef),
        onKeyDown: useEventCallback(event => {
          var _a;

          (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, event);

          if (!event.isDefaultPrevented() && (event.key === Space || event.key === Enter)) {
            dismissedWithKeyboardRef.current = true;
          }
        }),
        onMouseEnter: useEventCallback(event => {
          var _a, _b;

          (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
          (_b = props.onMouseEnter) === null || _b === void 0 ? void 0 : _b.call(props, event);
        }),
        onClick: useEventCallback(event => {
          var _a;

          if (!hasSubmenu && !persistOnClick) {
            setOpen(event, {
              open: false,
              keyboard: dismissedWithKeyboardRef.current,
              bubble: true,
              type: 'menuItemClick',
              event
            });
            dismissedWithKeyboardRef.current = false;
          }

          (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, event);
        })
      }
    })),
    icon: resolveShorthand(props.icon, {
      required: hasIcons
    }),
    checkmark: resolveShorthand(props.checkmark, {
      required: hasCheckmarks
    }),
    submenuIndicator: resolveShorthand(props.submenuIndicator, {
      required: hasSubmenu,
      defaultProps: {
        children: dir === 'ltr' ? /*#__PURE__*/React.createElement(ChevronRightIcon, null) : /*#__PURE__*/React.createElement(ChevronLeftIcon, null)
      }
    }),
    content: resolveShorthand(props.content, {
      required: !!props.children,
      defaultProps: {
        children: props.children
      }
    }),
    secondaryContent: resolveShorthand(props.secondaryContent)
  };
  useCharacterSearch(state, innerRef);
  return state;
};
//# sourceMappingURL=useMenuItem.js.map