define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "@fluentui/react-tabster", "@fluentui/react-shared-contexts", "@fluentui/keyboard-keys"], function (require, exports, tslib_1, React, react_utilities_1, react_tabster_1, react_shared_contexts_1, keyboard_keys_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMenuSplitGroup_unstable = void 0;
    /**
     * Create the state required to render MenuSplitGroup.
     *
     * The returned state can be modified with hooks such as useMenuSplitGroupStyles_unstable,
     * before being passed to renderMenuSplitGroup_unstable.
     *
     * @param props - props from this instance of MenuSplitGroup
     * @param ref - reference to root HTMLElement of MenuSplitGroup
     */
    var useMenuSplitGroup_unstable = function (props, ref) {
        var innerRef = React.useRef();
        var _a = react_shared_contexts_1.useFluent_unstable(), dir = _a.dir, targetDocument = _a.targetDocument;
        var nextArrowKey = react_utilities_1.getRTLSafeKey(keyboard_keys_1.ArrowRight, dir);
        var prevArrowKey = react_utilities_1.getRTLSafeKey(keyboard_keys_1.ArrowLeft, dir);
        var _b = react_tabster_1.useFocusFinders(), findNextFocusable = _b.findNextFocusable, findPrevFocusable = _b.findPrevFocusable;
        var onKeyDown = React.useCallback(function (e) {
            var _a;
            var activeElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.activeElement;
            if (!activeElement) {
                return;
            }
            if (!((_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.contains(activeElement))) {
                return;
            }
            if (e.key === nextArrowKey) {
                var next = findNextFocusable(activeElement, { container: innerRef.current });
                next === null || next === void 0 ? void 0 : next.focus();
            }
            if (e.key === prevArrowKey) {
                var prev = findPrevFocusable(activeElement, { container: innerRef.current });
                prev === null || prev === void 0 ? void 0 : prev.focus();
            }
        }, [findNextFocusable, findPrevFocusable, targetDocument, nextArrowKey, prevArrowKey]);
        return {
            components: {
                root: 'div',
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign({ role: 'group', ref: react_utilities_1.useMergedRefs(ref, innerRef), onKeyDown: onKeyDown }, props)),
        };
    };
    exports.useMenuSplitGroup_unstable = useMenuSplitGroup_unstable;
});
//# sourceMappingURL=useMenuSplitGroup.js.map