"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuSplitGroup_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");

const react_shared_contexts_1 = /*#__PURE__*/require("@fluentui/react-shared-contexts");

const keyboard_keys_1 = /*#__PURE__*/require("@fluentui/keyboard-keys");
/**
 * Create the state required to render MenuSplitGroup.
 *
 * The returned state can be modified with hooks such as useMenuSplitGroupStyles_unstable,
 * before being passed to renderMenuSplitGroup_unstable.
 *
 * @param props - props from this instance of MenuSplitGroup
 * @param ref - reference to root HTMLElement of MenuSplitGroup
 */


const useMenuSplitGroup_unstable = (props, ref) => {
  const innerRef = React.useRef();
  const {
    dir,
    targetDocument
  } = react_shared_contexts_1.useFluent_unstable();
  const nextArrowKey = react_utilities_1.getRTLSafeKey(keyboard_keys_1.ArrowRight, dir);
  const prevArrowKey = react_utilities_1.getRTLSafeKey(keyboard_keys_1.ArrowLeft, dir);
  const {
    findNextFocusable,
    findPrevFocusable
  } = react_tabster_1.useFocusFinders();
  const onKeyDown = React.useCallback(e => {
    var _a;

    const activeElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.activeElement;

    if (!activeElement) {
      return;
    }

    if (!((_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.contains(activeElement))) {
      return;
    }

    if (e.key === nextArrowKey) {
      const next = findNextFocusable(activeElement, {
        container: innerRef.current
      });
      next === null || next === void 0 ? void 0 : next.focus();
    }

    if (e.key === prevArrowKey) {
      const prev = findPrevFocusable(activeElement, {
        container: innerRef.current
      });
      prev === null || prev === void 0 ? void 0 : prev.focus();
    }
  }, [findNextFocusable, findPrevFocusable, targetDocument, nextArrowKey, prevArrowKey]);
  return {
    components: {
      root: 'div'
    },
    root: react_utilities_1.getNativeElementProps('div', {
      role: 'group',
      ref: react_utilities_1.useMergedRefs(ref, innerRef),
      onKeyDown,
      ...props
    })
  };
};

exports.useMenuSplitGroup_unstable = useMenuSplitGroup_unstable;
//# sourceMappingURL=useMenuSplitGroup.js.map