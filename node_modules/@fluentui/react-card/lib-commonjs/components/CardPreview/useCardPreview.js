"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCardPreview_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const CardContext_1 = /*#__PURE__*/require("../Card/CardContext");

const useCardPreviewStyles_1 = /*#__PURE__*/require("./useCardPreviewStyles");
/**
 * Create the state required to render CardPreview.
 *
 * The returned state can be modified with hooks such as useCardPreviewStyles_unstable,
 * before being passed to renderCardPreview_unstable.
 *
 * @param props - props from this instance of CardPreview
 * @param ref - reference to root HTMLElement of CardPreview
 */


const useCardPreview_unstable = (props, ref) => {
  const {
    logo
  } = props;
  const {
    selectableA11yProps: {
      referenceLabel,
      referenceId,
      setReferenceLabel,
      setReferenceId
    }
  } = CardContext_1.useCardContext_unstable();
  const previewRef = react_utilities_1.useMergedRefs(ref, React.useRef(null));
  React.useEffect(() => {
    if (referenceLabel && referenceId) {
      return;
    }

    if (previewRef.current && previewRef.current.parentNode) {
      const img = previewRef.current.parentNode.querySelector(`.${useCardPreviewStyles_1.cardPreviewClassNames.root} > img`);

      if (img) {
        const ariaLabel = img.getAttribute('aria-label');
        const ariaDescribedby = img.getAttribute('aria-describedby');

        if (ariaDescribedby) {
          setReferenceId(ariaDescribedby);
        } else if (img.alt) {
          setReferenceLabel(img.alt);
        } else if (ariaLabel) {
          setReferenceLabel(ariaLabel);
        }
      }
    }
  }, [setReferenceLabel, referenceLabel, previewRef, referenceId, setReferenceId]);
  return {
    components: {
      root: 'div',
      logo: 'div'
    },
    root: react_utilities_1.getNativeElementProps('div', {
      ref: previewRef,
      ...props
    }),
    logo: react_utilities_1.resolveShorthand(logo)
  };
};

exports.useCardPreview_unstable = useCardPreview_unstable;
//# sourceMappingURL=useCardPreview.js.map