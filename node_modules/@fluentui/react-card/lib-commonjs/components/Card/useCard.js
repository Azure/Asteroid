"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCard_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");

const useCardSelectable_1 = /*#__PURE__*/require("./useCardSelectable");

const CardContext_1 = /*#__PURE__*/require("./CardContext");

const focusMap = {
  off: undefined,
  'no-tab': 'limited-trap-focus',
  'tab-exit': 'limited',
  'tab-only': 'unlimited'
};
/**
 * Create the state for interactive cards.
 *
 * This internal hook defines if the card is interactive
 * and control focus properties based on that.
 *
 * @param props - props from this instance of Card
 */

const useCardInteractive = ({
  focusMode = 'off',
  ...props
}) => {
  const interactive = ['onClick', 'onDoubleClick', 'onMouseUp', 'onMouseDown', 'onPointerUp', 'onPointerDown', 'onTouchStart', 'onTouchEnd', 'onDragStart', 'onDragEnd'].some(prop => props[prop]);
  const groupperAttrs = react_tabster_1.useFocusableGroup({
    tabBehavior: focusMap[interactive ? 'no-tab' : focusMode]
  });
  const interactiveFocusAttributes = { ...groupperAttrs,
    tabIndex: 0
  };
  return {
    interactive,
    focusAttributes: focusMode === 'off' ? null : interactiveFocusAttributes
  };
};
/**
 * Create the state required to render Card.
 *
 * The returned state can be modified with hooks such as useCardStyles_unstable,
 * before being passed to renderCard_unstable.
 *
 * @param props - props from this instance of Card
 * @param ref - reference to the root element of Card
 */


const useCard_unstable = (props, ref) => {
  const {
    appearance = 'filled',
    orientation = 'vertical',
    size = 'medium',
    floatingAction
  } = props;
  const [referenceId, setReferenceId] = React.useState(CardContext_1.cardContextDefaultValue.selectableA11yProps.referenceId);
  const [referenceLabel, setReferenceLabel] = React.useState(CardContext_1.cardContextDefaultValue.selectableA11yProps.referenceId);
  const cardBaseRef = react_tabster_1.useFocusWithin();
  const {
    selectable,
    selected,
    selectableCardProps,
    selectFocused,
    checkboxSlot
  } = useCardSelectable_1.useCardSelectable(props, {
    referenceId,
    referenceLabel
  }, cardBaseRef);
  const cardRef = react_utilities_1.useMergedRefs(cardBaseRef, ref);
  const {
    interactive,
    focusAttributes
  } = useCardInteractive(props);
  return {
    appearance,
    orientation,
    size,
    interactive,
    selectable,
    selectFocused,
    selected,
    selectableA11yProps: {
      setReferenceId,
      referenceId,
      referenceLabel,
      setReferenceLabel
    },
    components: {
      root: 'div',
      floatingAction: 'div',
      checkbox: 'input'
    },
    root: react_utilities_1.getNativeElementProps('div', {
      ref: cardRef,
      role: 'group',
      ...focusAttributes,
      ...props,
      ...selectableCardProps
    }),
    floatingAction: react_utilities_1.resolveShorthand(floatingAction),
    checkbox: checkboxSlot
  };
};

exports.useCard_unstable = useCard_unstable;
//# sourceMappingURL=useCard.js.map