"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScrollOptionsIntoView = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

function useScrollOptionsIntoView(state) {
  const {
    activeOption
  } = state;
  const scrollContainerRef = React.useRef(null);
  React.useEffect(() => {
    if (scrollContainerRef.current && activeOption && react_utilities_1.canUseDOM()) {
      const activeOptionElement = scrollContainerRef.current.querySelector(`#${activeOption.id}`);

      if (!activeOptionElement) {
        return;
      }

      const {
        offsetHeight,
        offsetTop
      } = activeOptionElement;
      const {
        offsetHeight: parentOffsetHeight,
        scrollTop
      } = scrollContainerRef.current;
      const isAbove = offsetTop < scrollTop;
      const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight; // add a small buffer for general visual nicety
      // it looks slightly better if the option has some space from the top/bottom while arrowing

      const buffer = 2;

      if (isAbove) {
        scrollContainerRef.current.scrollTo(0, offsetTop - buffer);
      } else if (isBelow) {
        scrollContainerRef.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight + buffer);
      }
    }
  }, [activeOption]);
  return scrollContainerRef;
}

exports.useScrollOptionsIntoView = useScrollOptionsIntoView;
//# sourceMappingURL=useScrollOptionsIntoView.js.map