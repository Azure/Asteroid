"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useListbox_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_context_selector_1 = /*#__PURE__*/require("@fluentui/react-context-selector");

const dropdownKeyActions_1 = /*#__PURE__*/require("../../utils/dropdownKeyActions");

const useOptionCollection_1 = /*#__PURE__*/require("../../utils/useOptionCollection");

const useScrollOptionsIntoView_1 = /*#__PURE__*/require("../../utils/useScrollOptionsIntoView");

const useSelection_1 = /*#__PURE__*/require("../../utils/useSelection");

const ComboboxContext_1 = /*#__PURE__*/require("../../contexts/ComboboxContext");
/**
 * Create the state required to render Listbox.
 *
 * The returned state can be modified with hooks such as useListboxStyles_unstable,
 * before being passed to renderListbox_unstable.
 *
 * @param props - props from this instance of Listbox
 * @param ref - reference to root HTMLElement of Listbox
 */


const useListbox_unstable = (props, ref) => {
  const {
    multiselect
  } = props;
  const optionCollection = useOptionCollection_1.useOptionCollection();
  const {
    getCount,
    getOptionAtIndex,
    getIndexOfId
  } = optionCollection;
  const {
    clearSelection,
    selectedOptions,
    selectOption
  } = useSelection_1.useSelection(props);
  const [activeOption, setActiveOption] = React.useState(); // track whether keyboard focus outline should be shown
  // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move

  const [focusVisible, setFocusVisible] = React.useState(false);

  const onKeyDown = event => {
    const action = dropdownKeyActions_1.getDropdownActionFromKey(event, {
      open: true
    });
    const maxIndex = getCount() - 1;
    const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;
    let newIndex = activeIndex;

    switch (action) {
      case 'Select':
      case 'CloseSelect':
        activeOption && selectOption(event, activeOption);
        break;

      default:
        newIndex = dropdownKeyActions_1.getIndexFromAction(action, activeIndex, maxIndex);
    }

    if (newIndex !== activeIndex) {
      // prevent default page scroll/keyboard action if the index changed
      event.preventDefault();
      setActiveOption(getOptionAtIndex(newIndex));
      setFocusVisible(true);
    }
  };

  const onMouseOver = event => {
    setFocusVisible(false);
  }; // get state from parent combobox, if it exists


  const hasComboboxContext = react_context_selector_1.useHasParentContext(ComboboxContext_1.ComboboxContext);
  const comboboxActiveOption = react_context_selector_1.useContextSelector(ComboboxContext_1.ComboboxContext, ctx => ctx.activeOption);
  const comboboxFocusVisible = react_context_selector_1.useContextSelector(ComboboxContext_1.ComboboxContext, ctx => ctx.focusVisible);
  const comboboxSelectedOptions = react_context_selector_1.useContextSelector(ComboboxContext_1.ComboboxContext, ctx => ctx.selectedOptions);
  const comboboxSelectOption = react_context_selector_1.useContextSelector(ComboboxContext_1.ComboboxContext, ctx => ctx.selectOption);
  const comboboxSetActiveOption = react_context_selector_1.useContextSelector(ComboboxContext_1.ComboboxContext, ctx => ctx.setActiveOption); // without a parent combobox context, provide values directly from Listbox

  const optionContextValues = hasComboboxContext ? {
    activeOption: comboboxActiveOption,
    focusVisible: comboboxFocusVisible,
    selectedOptions: comboboxSelectedOptions,
    selectOption: comboboxSelectOption,
    setActiveOption: comboboxSetActiveOption
  } : {
    activeOption,
    focusVisible,
    selectedOptions,
    selectOption,
    setActiveOption
  };
  const state = {
    components: {
      root: 'div'
    },
    root: react_utilities_1.getNativeElementProps('div', {
      ref,
      role: multiselect ? 'menu' : 'listbox',
      'aria-activedescendant': hasComboboxContext ? undefined : activeOption === null || activeOption === void 0 ? void 0 : activeOption.id,
      'aria-multiselectable': multiselect,
      tabIndex: 0,
      ...props
    }),
    multiselect,
    clearSelection,
    ...optionCollection,
    ...optionContextValues
  };
  const scrollContainerRef = useScrollOptionsIntoView_1.useScrollOptionsIntoView(state);
  state.root.ref = react_utilities_1.useMergedRefs(state.root.ref, scrollContainerRef);
  state.root.onKeyDown = react_utilities_1.useEventCallback(react_utilities_1.mergeCallbacks(state.root.onKeyDown, onKeyDown));
  state.root.onMouseOver = react_utilities_1.useEventCallback(react_utilities_1.mergeCallbacks(state.root.onMouseOver, onMouseOver));
  return state;
};

exports.useListbox_unstable = useListbox_unstable;
//# sourceMappingURL=useListbox.js.map