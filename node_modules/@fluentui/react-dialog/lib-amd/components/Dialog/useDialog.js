define(["require", "exports", "react", "@fluentui/react-utilities", "@fluentui/react-context-selector", "../../utils", "../../contexts"], function (require, exports, React, react_utilities_1, react_context_selector_1, utils_1, contexts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDialog_unstable = void 0;
    /**
     * Create the state required to render Dialog.
     *
     * The returned state can be modified with hooks such as useDialogStyles_unstable,
     * before being passed to renderDialog_unstable.
     *
     * @param props - props from this instance of Dialog
     */
    var useDialog_unstable = function (props) {
        var children = props.children, _a = props.modalType, modalType = _a === void 0 ? 'modal' : _a, onOpenChange = props.onOpenChange;
        var _b = childrenToTriggerAndContent(children), trigger = _b[0], content = _b[1];
        var _c = react_utilities_1.useControllableState({
            state: props.open,
            defaultState: props.defaultOpen,
            initialState: false,
        }), open = _c[0], setOpen = _c[1];
        var requestOpenChange = react_utilities_1.useEventCallback(function (data) {
            onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(data.event, data);
            // if user prevents default then do not change state value
            // otherwise updates state value and trigger reference to the element that caused the opening
            if (!data.event.isDefaultPrevented()) {
                setOpen(data.open);
            }
        });
        var focusRef = utils_1.useFocusFirstElement(open, modalType);
        var disableBodyScroll = utils_1.useDisableBodyScroll();
        var isBodyScrollLocked = Boolean(open && modalType !== 'non-modal');
        react_utilities_1.useIsomorphicLayoutEffect(function () {
            if (isBodyScrollLocked) {
                return disableBodyScroll();
            }
        }, [disableBodyScroll, isBodyScrollLocked]);
        return {
            components: {
                backdrop: 'div',
            },
            open: open,
            modalType: modalType,
            content: open ? content : null,
            trigger: trigger,
            requestOpenChange: requestOpenChange,
            dialogTitleId: react_utilities_1.useId('dialog-title-'),
            isNestedDialog: react_context_selector_1.useHasParentContext(contexts_1.DialogContext),
            dialogRef: focusRef,
        };
    };
    exports.useDialog_unstable = useDialog_unstable;
    /**
     * Extracts trigger and content from children
     */
    function childrenToTriggerAndContent(children) {
        var childrenArray = React.Children.toArray(children);
        if (process.env.NODE_ENV !== 'production') {
            if (childrenArray.length !== 1 && childrenArray.length !== 2) {
                // eslint-disable-next-line no-console
                console.warn('Dialog must contain at least one child <DialogSurface/>,\n' +
                    'and at most two children <DialogTrigger/> <DialogSurface/> (in this order)');
            }
        }
        switch (childrenArray.length) {
            // case where there's a trigger followed by content
            case 2:
                return childrenArray;
            // case where there's only content
            case 1:
                return [undefined, childrenArray[0]];
            // unknown case
            default:
                return [undefined, undefined];
        }
    }
});
//# sourceMappingURL=useDialog.js.map