{"version":3,"file":"useDisableBodyScroll.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-dialog/src/utils/useDisableBodyScroll.ts"],"names":[],"mappings":";;;;IAGA,IAAM,wBAAwB,GAAG,8BAAuC,CAAC;IAUzE;;OAEG;IACH,SAAgB,oBAAoB;QAC1B,IAAA,cAAc,GAAK,0CAAkB,EAAE,eAAzB,CAA0B;QAChD,OAAO,mBAAW,CAAC;YACjB,IAAI,cAAc,EAAE;gBAClB,OAAO,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC3C;QACH,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;IACvB,CAAC;IAPD,oDAOC;IAED;;;;OAIG;IACH,SAAgB,aAAa,CAAC,MAAmB;;QACvC,IAAA,WAAW,GAAK,MAAM,CAAC,aAAa,CAAC,eAAe,YAAzC,CAA0C;QAC7D,IAAM,UAAU,GAAG,MAAA,MAAA,MAAM,CAAC,aAAa,CAAC,WAAW,0CAAE,UAAU,mCAAI,CAAC,CAAC;QACrE,4BAA4B,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,MAAM,CAAC,wBAAwB,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE;YAChD,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,YAAY,GAAM,UAAU,GAAG,WAAW,OAAI,CAAC;SAC7D;QACD,MAAM,CAAC,wBAAwB,CAAC,CAAC,KAAK,EAAE,CAAC;QACzC,OAAO;YACL,MAAM,CAAC,wBAAwB,CAAC,CAAC,KAAK,EAAE,CAAC;YACzC,IAAI,MAAM,CAAC,wBAAwB,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE;gBAChD,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,wBAAwB,CAAC,CAAC,qBAAqB,CAAC;gBAC/E,MAAM,CAAC,KAAK,CAAC,YAAY,GAAG,MAAM,CAAC,wBAAwB,CAAC,CAAC,yBAAyB,CAAC;aACxF;QACH,CAAC,CAAC;IACJ,CAAC;IAhBD,sCAgBC;IAED,SAAS,4BAA4B,CAAC,OAAoB;;;QACxD,YAAC,OAAsC,EAAC,wBAAwB,wCAAxB,wBAAwB,IAAM;YACpE,KAAK,EAAE,CAAC;YACR,qBAAqB,EAAE,OAAO,CAAC,KAAK,CAAC,QAAQ;YAC7C,yBAAyB,EAAE,OAAO,CAAC,KAAK,CAAC,YAAY;SACtD,EAAC;IACJ,CAAC","sourcesContent":["import { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport { useCallback } from 'react';\n\nconst disableScrollElementProp = '__fluentDisableScrollElement' as const;\n\ntype FluentDisableScrollElement = HTMLElement & {\n  [disableScrollElementProp]: {\n    count: number;\n    previousOverflowStyle: string;\n    previousPaddingRightStyle: string;\n  };\n};\n\n/**\n * hook that disables body scrolling through `overflow: hidden` CSS property\n */\nexport function useDisableBodyScroll() {\n  const { targetDocument } = useFluent_unstable();\n  return useCallback(() => {\n    if (targetDocument) {\n      return disableScroll(targetDocument.body);\n    }\n  }, [targetDocument]);\n}\n\n/**\n * disables scrolling from a given element through `overflow: hidden` CSS property\n * @param target - element to disable scrolling from\n * @returns a method for enabling scrolling again\n */\nexport function disableScroll(target: HTMLElement) {\n  const { clientWidth } = target.ownerDocument.documentElement;\n  const innerWidth = target.ownerDocument.defaultView?.innerWidth ?? 0;\n  assertIsDisableScrollElement(target);\n  if (target[disableScrollElementProp].count === 0) {\n    target.style.overflow = 'hidden';\n    target.style.paddingRight = `${innerWidth - clientWidth}px`;\n  }\n  target[disableScrollElementProp].count++;\n  return () => {\n    target[disableScrollElementProp].count--;\n    if (target[disableScrollElementProp].count === 0) {\n      target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;\n      target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;\n    }\n  };\n}\n\nfunction assertIsDisableScrollElement(element: HTMLElement): asserts element is FluentDisableScrollElement {\n  (element as FluentDisableScrollElement)[disableScrollElementProp] ??= {\n    count: 0,\n    previousOverflowStyle: element.style.overflow,\n    previousPaddingRightStyle: element.style.paddingRight,\n  };\n}\n"]}