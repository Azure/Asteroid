define(["require", "exports", "@fluentui/react-shared-contexts", "react"], function (require, exports, react_shared_contexts_1, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.disableScroll = exports.useDisableBodyScroll = void 0;
    var disableScrollElementProp = '__fluentDisableScrollElement';
    /**
     * hook that disables body scrolling through `overflow: hidden` CSS property
     */
    function useDisableBodyScroll() {
        var targetDocument = react_shared_contexts_1.useFluent_unstable().targetDocument;
        return react_1.useCallback(function () {
            if (targetDocument) {
                return disableScroll(targetDocument.body);
            }
        }, [targetDocument]);
    }
    exports.useDisableBodyScroll = useDisableBodyScroll;
    /**
     * disables scrolling from a given element through `overflow: hidden` CSS property
     * @param target - element to disable scrolling from
     * @returns a method for enabling scrolling again
     */
    function disableScroll(target) {
        var _a, _b;
        var clientWidth = target.ownerDocument.documentElement.clientWidth;
        var innerWidth = (_b = (_a = target.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.innerWidth) !== null && _b !== void 0 ? _b : 0;
        assertIsDisableScrollElement(target);
        if (target[disableScrollElementProp].count === 0) {
            target.style.overflow = 'hidden';
            target.style.paddingRight = innerWidth - clientWidth + "px";
        }
        target[disableScrollElementProp].count++;
        return function () {
            target[disableScrollElementProp].count--;
            if (target[disableScrollElementProp].count === 0) {
                target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;
                target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;
            }
        };
    }
    exports.disableScroll = disableScroll;
    function assertIsDisableScrollElement(element) {
        var _a;
        var _b;
        (_a = (_b = element)[disableScrollElementProp]) !== null && _a !== void 0 ? _a : (_b[disableScrollElementProp] = {
            count: 0,
            previousOverflowStyle: element.style.overflow,
            previousPaddingRightStyle: element.style.paddingRight,
        });
    }
});
//# sourceMappingURL=useDisableBodyScroll.js.map