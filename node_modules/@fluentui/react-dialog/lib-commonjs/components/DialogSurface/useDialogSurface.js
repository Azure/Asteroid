"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDialogSurface_unstable = void 0;

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const contexts_1 = /*#__PURE__*/require("../../contexts");

const utils_1 = /*#__PURE__*/require("../../utils");

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");
/**
 * Create the state required to render DialogSurface.
 *
 * The returned state can be modified with hooks such as useDialogSurfaceStyles_unstable,
 * before being passed to renderDialogSurface_unstable.
 *
 * @param props - props from this instance of DialogSurface
 * @param ref - reference to root HTMLElement of DialogSurface
 */


const useDialogSurface_unstable = (props, ref) => {
  const {
    backdrop,
    as
  } = props;
  const modalType = contexts_1.useDialogContext_unstable(ctx => ctx.modalType);
  const dialogRef = contexts_1.useDialogContext_unstable(ctx => ctx.dialogRef);
  const open = contexts_1.useDialogContext_unstable(ctx => ctx.open);
  const requestOpenChange = contexts_1.useDialogContext_unstable(ctx => ctx.requestOpenChange);
  const dialogTitleID = contexts_1.useDialogContext_unstable(ctx => ctx.dialogTitleId);
  const handledBackdropClick = react_utilities_1.useEventCallback(event => {
    var _a, _b;

    if (react_utilities_1.isResolvedShorthand(props.backdrop)) {
      (_b = (_a = props.backdrop).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, event);
    }

    if (modalType === 'modal' && !event.isDefaultPrevented()) {
      requestOpenChange({
        event,
        open: false,
        type: 'backdropClick'
      });
    }
  });
  const handleKeyDown = react_utilities_1.useEventCallback(event => {
    var _a;

    (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, event);

    if (utils_1.isEscapeKeyDismiss(event, modalType)) {
      requestOpenChange({
        event,
        open: false,
        type: 'escapeKeyDown'
      }); // stop propagation to avoid conflicting with other elements that listen for `Escape`
      // e,g: nested Dialog, Popover, Menu and Tooltip

      event.stopPropagation();
    }
  });
  const {
    modalAttributes
  } = react_tabster_1.useModalAttributes({
    trapFocus: modalType !== 'non-modal'
  });
  return {
    components: {
      backdrop: 'div',
      root: 'div'
    },
    backdrop: react_utilities_1.resolveShorthand(backdrop, {
      required: open && modalType !== 'non-modal',
      defaultProps: {
        'aria-hidden': 'true',
        onClick: handledBackdropClick
      }
    }),
    root: react_utilities_1.getNativeElementProps(as !== null && as !== void 0 ? as : 'div', {
      tabIndex: -1,
      'aria-modal': modalType !== 'non-modal',
      role: modalType === 'alert' ? 'alertdialog' : 'dialog',
      'aria-labelledby': props['aria-label'] ? undefined : dialogTitleID,
      ...props,
      ...modalAttributes,
      onKeyDown: handleKeyDown,
      ref: react_utilities_1.useMergedRefs(ref, dialogRef)
    })
  };
};

exports.useDialogSurface_unstable = useDialogSurface_unstable;
//# sourceMappingURL=useDialogSurface.js.map