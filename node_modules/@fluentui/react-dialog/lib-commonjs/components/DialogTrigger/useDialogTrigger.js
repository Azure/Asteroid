"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDialogTrigger_unstable = void 0;

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const contexts_1 = /*#__PURE__*/require("../../contexts");

const react_aria_1 = /*#__PURE__*/require("@fluentui/react-aria");
/**
 * Create the state required to render DialogTrigger.
 * Clones the only child component and adds necessary event handling behaviours to open a popup Dialog
 *
 * @param props - props from this instance of DialogTrigger
 */


const useDialogTrigger_unstable = props => {
  const isInsideSurfaceDialog = contexts_1.useDialogSurfaceContext_unstable();
  const {
    children,
    disableButtonEnhancement = false,
    action = isInsideSurfaceDialog ? 'close' : 'open'
  } = props;
  const child = react_utilities_1.getTriggerChild(children);
  const requestOpenChange = contexts_1.useDialogContext_unstable(ctx => ctx.requestOpenChange);
  const open = contexts_1.useDialogContext_unstable(ctx => ctx.open);
  const {
    triggerAttributes
  } = react_tabster_1.useModalAttributes();
  const handleClick = react_utilities_1.useEventCallback(event => {
    var _a, _b;

    (_b = child === null || child === void 0 ? void 0 : (_a = child.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, event);

    if (!event.isDefaultPrevented()) {
      requestOpenChange({
        event,
        type: 'triggerClick',
        open: action === 'open'
      });
    }
  });
  const triggerChildProps = { ...(child === null || child === void 0 ? void 0 : child.props),
    'aria-expanded': open,
    ref: child === null || child === void 0 ? void 0 : child.ref,
    onClick: handleClick,
    ...triggerAttributes
  };
  const ariaButtonTriggerChildProps = react_aria_1.useARIAButtonProps((child === null || child === void 0 ? void 0 : child.type) === 'button' || (child === null || child === void 0 ? void 0 : child.type) === 'a' ? child.type : 'div', { ...triggerChildProps,
    type: 'button'
  });
  return {
    children: react_utilities_1.applyTriggerPropsToChildren(children, disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps)
  };
};

exports.useDialogTrigger_unstable = useDialogTrigger_unstable;
//# sourceMappingURL=useDialogTrigger.js.map