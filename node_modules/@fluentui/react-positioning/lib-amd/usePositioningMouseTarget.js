define(["require", "exports", "react", "./createVirtualElementFromClick"], function (require, exports, React, createVirtualElementFromClick_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usePositioningMouseTarget = void 0;
    /**
     * @internal
     * A state hook that manages a popper virtual element from mouseevents.
     * Useful for scenarios where a component needs to be positioned by mouse click (e.g. contextmenu)
     * React synthetic events are not persisted by this hook
     *
     * @param initialState - initializes a user provided state similare to useState
     * @returns state and dispatcher for a Popper virtual element that uses native/synthetic mouse events
     */
    var usePositioningMouseTarget = function (initialState) {
        var _a = React.useState(initialState), virtualElement = _a[0], setVirtualElement = _a[1];
        var setVirtualMouseTarget = function (event) {
            if (event === undefined || event === null) {
                setVirtualElement(undefined);
                return;
            }
            var mouseevent;
            if (!(event instanceof MouseEvent)) {
                mouseevent = event.nativeEvent;
            }
            else {
                mouseevent = event;
            }
            if (!(mouseevent instanceof MouseEvent) && process.env.NODE_ENV !== 'production') {
                // eslint-disable-next-line no-console
                console.error('usePositioningMouseTarget should only be used with MouseEvent');
            }
            var contextTarget = createVirtualElementFromClick_1.createVirtualElementFromClick(mouseevent);
            setVirtualElement(contextTarget);
        };
        return [virtualElement, setVirtualMouseTarget];
    };
    exports.usePositioningMouseTarget = usePositioningMouseTarget;
});
//# sourceMappingURL=usePositioningMouseTarget.js.map