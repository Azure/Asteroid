"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createArrowHeightStyles = exports.createArrowStyles = void 0;

const react_1 = /*#__PURE__*/require("@griffel/react");

const react_theme_1 = /*#__PURE__*/require("@fluentui/react-theme");
/**
 * @internal
 * Helper that creates a makeStyles rule for an arrow element.
 * For runtime arrow size toggling simply create extra classnames to apply to the arrow element
 *
 * ```ts
 *   makeStyles({
 *     arrowWithSize: createArrowStyles({ arrowHeight: 6 }),
 *
 *     arrowWithoutSize: createArrowStyles({ arrowHeight: undefined }),
 *     mediumArrow: createArrowHeightStyles(4),
 *     smallArrow: createArrowHeightStyles(2),
 *   })
 *   ...
 *
 *   state.arrowWithSize.className = styles.arrowWithSize;
 *   state.arrowWithoutSize.className = mergeClasses(
 *     styles.arrowWithoutSize,
 *     state.smallArrow && styles.smallArrow,
 *     state.mediumArrow && styles.mediumArrow,
 *   )
 * ```
 */


function createArrowStyles(options) {
  const {
    arrowHeight,
    borderWidth = '1px',
    borderStyle = 'solid',
    borderColor = react_theme_1.tokens.colorTransparentStroke
  } = options;
  return {
    position: 'absolute',
    backgroundColor: 'inherit',
    visibility: 'hidden',
    zIndex: -1,
    ...(arrowHeight && createArrowHeightStyles(arrowHeight)),
    '::before': {
      content: '""',
      visibility: 'visible',
      position: 'absolute',
      boxSizing: 'border-box',
      width: 'inherit',
      height: 'inherit',
      backgroundColor: 'inherit',
      ...react_1.shorthands.borderRight(`${borderWidth} /* @noflip */`, `${borderStyle} /* @noflip */`, `${borderColor} /* @noflip */`),
      ...react_1.shorthands.borderBottom(borderWidth, borderStyle, borderColor),
      borderBottomRightRadius: react_theme_1.tokens.borderRadiusSmall,
      transform: 'rotate(var(--angle)) translate(0, 50%) rotate(45deg)'
    },
    // Popper sets data-popper-placement on the root element, which is used to align the arrow
    ':global([data-popper-placement^="top"])': {
      bottom: `-${borderWidth}`,
      '--angle': '0'
    },
    ':global([data-popper-placement^="right"])': {
      left: `-${borderWidth} /* @noflip */`,
      '--angle': '90deg'
    },
    ':global([data-popper-placement^="bottom"])': {
      top: `-${borderWidth}`,
      '--angle': '180deg'
    },
    ':global([data-popper-placement^="left"])': {
      right: `-${borderWidth} /* @noflip */`,
      '--angle': '270deg'
    }
  };
}

exports.createArrowStyles = createArrowStyles;
/**
 * @internal
 * Creates CSS styles to size the arrow created by createArrowStyles to the given height.
 *
 * Use this when you need to create classes for several different arrow sizes. If you only need a
 * constant arrow size, you can pass the `arrowHeight` param to createArrowStyles instead.
 */

function createArrowHeightStyles(arrowHeight) {
  // The arrow is a square rotated 45 degrees to have its bottom and right edges form a right triangle.
  // Multiply the triangle's height by sqrt(2) to get length of its edges.
  const edgeLength = `${1.414 * arrowHeight}px`;
  return {
    width: edgeLength,
    height: edgeLength
  };
}

exports.createArrowHeightStyles = createArrowHeightStyles;
//# sourceMappingURL=createArrowStyles.js.map