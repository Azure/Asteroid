"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFluentProvider_unstable = void 0;

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");

const react_shared_contexts_1 = /*#__PURE__*/require("@fluentui/react-shared-contexts");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const React = /*#__PURE__*/require("react");

const useFluentProviderThemeStyleTag_1 = /*#__PURE__*/require("./useFluentProviderThemeStyleTag");
/**
 * Create the state required to render FluentProvider.
 *
 * The returned state can be modified with hooks such as useFluentProviderStyles_unstable,
 * before being passed to renderFluentProvider_unstable.
 *
 * @param props - props from this instance of FluentProvider
 * @param ref - reference to root HTMLElement of FluentProvider
 */


const useFluentProvider_unstable = (props, ref) => {
  const parentContext = react_shared_contexts_1.useFluent_unstable();
  const parentTheme = useTheme();
  /**
   * TODO: add merge functions to "dir" merge,
   * nesting providers with the same "dir" should not add additional attributes to DOM
   * see https://github.com/microsoft/fluentui/blob/0dc74a19f3aa5a058224c20505016fbdb84db172/packages/fluentui/react-northstar/src/utils/mergeProviderContexts.ts#L89-L93
   */

  const {
    applyStylesToPortals = true,
    dir = parentContext.dir,
    targetDocument = parentContext.targetDocument,
    theme
  } = props;
  const mergedTheme = mergeThemes(parentTheme, theme);
  React.useEffect(() => {
    if (process.env.NODE_ENV !== 'production' && mergedTheme === undefined) {
      // eslint-disable-next-line no-console
      console.warn(`
      FluentProvider: your "theme" is not defined !
      =============================================
      Make sure your root FluentProvider has set a theme or you're setting the theme in your child FluentProvider.
      `);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return {
    applyStylesToPortals,
    dir,
    targetDocument,
    theme: mergedTheme,
    themeClassName: useFluentProviderThemeStyleTag_1.useFluentProviderThemeStyleTag({
      theme: mergedTheme,
      targetDocument
    }),
    components: {
      root: 'div'
    },
    root: react_utilities_1.getNativeElementProps('div', { ...props,
      dir,
      ref: react_utilities_1.useMergedRefs(ref, react_tabster_1.useFocusVisible())
    })
  };
};

exports.useFluentProvider_unstable = useFluentProvider_unstable;

function mergeThemes(a, b) {
  // Merge impacts perf: we should like to avoid it if it's possible
  if (a && b) {
    return { ...a,
      ...b
    };
  }

  if (a) {
    return a;
  }

  return b;
}

function useTheme() {
  return React.useContext(react_shared_contexts_1.ThemeContext_unstable);
}
//# sourceMappingURL=useFluentProvider.js.map