"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRadio_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");

const react_label_1 = /*#__PURE__*/require("@fluentui/react-label");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const RadioGroupContext_1 = /*#__PURE__*/require("../../contexts/RadioGroupContext");

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");
/**
 * Create the state required to render Radio.
 *
 * The returned state can be modified with hooks such as useRadioStyles_unstable,
 * before being passed to renderRadio_unstable.
 *
 * @param props - props from this instance of Radio
 * @param ref - reference to `<input>` element of Radio
 */


const useRadio_unstable = (props, ref) => {
  const nameGroup = RadioGroupContext_1.useRadioGroupContext_unstable(ctx => ctx.name);
  const value = RadioGroupContext_1.useRadioGroupContext_unstable(ctx => ctx.value);
  const defaultValue = RadioGroupContext_1.useRadioGroupContext_unstable(ctx => ctx.defaultValue);
  const disabledGroup = RadioGroupContext_1.useRadioGroupContext_unstable(ctx => ctx.disabled);
  const layout = RadioGroupContext_1.useRadioGroupContext_unstable(ctx => ctx.layout);
  const requiredGroup = RadioGroupContext_1.useRadioGroupContext_unstable(ctx => ctx.required);
  const {
    name = nameGroup,
    checked = value !== undefined ? value === props.value : undefined,
    defaultChecked = defaultValue !== undefined ? defaultValue === props.value : undefined,
    labelPosition = layout === 'horizontal-stacked' ? 'below' : 'after',
    disabled = disabledGroup,
    required = requiredGroup,
    onChange
  } = props;
  const nativeProps = react_utilities_1.getPartitionedNativeProps({
    props,
    primarySlotTagName: 'input',
    excludedPropNames: ['checked', 'defaultChecked', 'onChange']
  });
  const root = react_utilities_1.resolveShorthand(props.root, {
    required: true,
    defaultProps: {
      ref: react_tabster_1.useFocusWithin(),
      ...nativeProps.root
    }
  });
  const input = react_utilities_1.resolveShorthand(props.input, {
    required: true,
    defaultProps: {
      ref,
      type: 'radio',
      id: react_utilities_1.useId('radio-', nativeProps.primary.id),
      name,
      checked,
      defaultChecked,
      disabled,
      required,
      ...nativeProps.primary
    }
  });
  input.onChange = react_utilities_1.mergeCallbacks(input.onChange, ev => onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
    value: ev.currentTarget.value
  }));
  const label = react_utilities_1.resolveShorthand(props.label, {
    defaultProps: {
      htmlFor: input.id,
      disabled
    }
  });
  const indicator = react_utilities_1.resolveShorthand(props.indicator, {
    required: true,
    defaultProps: {
      'aria-hidden': true,
      children: React.createElement(react_icons_1.CircleFilled, null)
    }
  });
  return {
    labelPosition,
    components: {
      root: 'span',
      input: 'input',
      label: react_label_1.Label,
      indicator: 'div'
    },
    root,
    input,
    label,
    indicator
  };
};

exports.useRadio_unstable = useRadio_unstable;
//# sourceMappingURL=useRadio.js.map