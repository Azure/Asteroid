{"version":3,"file":"omit.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-utilities/src/utils/omit.ts"],"names":[],"mappings":";;;;IAAA;;;;;;;;;;;;OAYG;IACH,8DAA8D;IAC9D,SAAgB,IAAI,CAClB,GAAS,EACT,UAAsB;QAEtB,8DAA8D;QAC9D,IAAM,MAAM,GAAwB,EAAE,CAAC;QAEvC,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;YACrB,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC7D,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;aACxB;SACF;QAED,OAAO,MAAc,CAAC;IACxB,CAAC;IAdD,oBAcC","sourcesContent":["/**\n * Tiny helper to do the minimal amount of work in duplicating an object but omitting some\n * props. This ends up faster than using object ...rest or reduce to filter.\n *\n * This behaves very much like filteredAssign, but does not merge many objects together,\n * uses an exclusion object map, and avoids spreads all for optimal performance.\n *\n * See perf test for background:\n * https://jsperf.com/omit-vs-rest-vs-reduce/1\n *\n * @param obj - The object to clone\n * @param exclusions - The array of keys to exclude\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function omit<TObj extends Record<string, any>, Exclusions extends (keyof TObj)[]>(\n  obj: TObj,\n  exclusions: Exclusions,\n): Omit<TObj, Exclusions[number]> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: Record<string, any> = {};\n\n  for (const key in obj) {\n    if (exclusions.indexOf(key) === -1 && obj.hasOwnProperty(key)) {\n      result[key] = obj[key];\n    }\n  }\n\n  return result as TObj;\n}\n"]}