define(["require", "exports", "react", "./useIsomorphicLayoutEffect"], function (require, exports, React, useIsomorphicLayoutEffect_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useEventCallback = void 0;
    /**
     * @internal
     * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback
     *
     * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when
     * e.g. user props are dependencies which could change on every render
     * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently
     *
     * This should not be used often, but can be a useful re-render optimization since the callback is a ref and
     * will not be invalidated between re-renders
     *
     * @param fn - The callback function that will be used
     */
    var useEventCallback = function (fn) {
        var callbackRef = React.useRef(function () {
            throw new Error('Cannot call an event handler while rendering');
        });
        useIsomorphicLayoutEffect_1.useIsomorphicLayoutEffect(function () {
            callbackRef.current = fn;
        }, [fn]);
        return React.useCallback(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var callback = callbackRef.current;
            return callback.apply(void 0, args);
        }, [callbackRef]);
    };
    exports.useEventCallback = useEventCallback;
});
//# sourceMappingURL=useEventCallback.js.map