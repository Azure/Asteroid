define(["require", "exports", "react", "./useEventCallback"], function (require, exports, React, useEventCallback_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useOnScrollOutside = void 0;
    /**
     * @internal
     * Utility to perform checks where a click/touch event was made outside a component
     */
    var useOnScrollOutside = function (options) {
        var refs = options.refs, callback = options.callback, element = options.element, disabled = options.disabled, containsProp = options.contains;
        var listener = useEventCallback_1.useEventCallback(function (ev) {
            var contains = containsProp || (function (parent, child) { return !!(parent === null || parent === void 0 ? void 0 : parent.contains(child)); });
            var isOutside = refs.every(function (ref) { return !contains(ref.current || null, ev.target); });
            if (isOutside && !disabled) {
                callback(ev);
            }
        });
        React.useEffect(function () {
            if (!disabled) {
                element === null || element === void 0 ? void 0 : element.addEventListener('wheel', listener);
                element === null || element === void 0 ? void 0 : element.addEventListener('touchmove', listener);
            }
            return function () {
                element === null || element === void 0 ? void 0 : element.removeEventListener('wheel', listener);
                element === null || element === void 0 ? void 0 : element.removeEventListener('touchmove', listener);
            };
        }, [listener, element, disabled]);
    };
    exports.useOnScrollOutside = useOnScrollOutside;
});
//# sourceMappingURL=useOnScrollOutside.js.map