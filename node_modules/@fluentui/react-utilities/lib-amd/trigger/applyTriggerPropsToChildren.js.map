{"version":3,"file":"applyTriggerPropsToChildren.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-utilities/src/trigger/applyTriggerPropsToChildren.ts"],"names":[],"mappings":";;;;IAIA;;;OAGG;IACH,SAAgB,2BAA2B,CACzC,QAAqD,EACrD,iBAAoC;QAEpC,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YAClC,OAAO,QAAQ,CAAC,iBAAiB,CAAC,CAAC;SACpC;aAAM,IAAI,QAAQ,EAAE;YACnB,OAAO,gBAAgB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;SACtD;QAED,+FAA+F;QAC/F,sCAAsC;QACtC,0FAA0F;QAC1F,OAAO,QAAQ,IAAI,IAAI,CAAC;IAC1B,CAAC;IAdD,kEAcC;IAED;;;OAGG;IACH,SAAS,gBAAgB,CACvB,KAAsB,EACtB,YAA+B;QAE/B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,QAAQ,EAAE;YACjE,MAAM,IAAI,KAAK,CACb,iEAAiE;gBAC/D,sDAAsD,CACzD,CAAC;SACH;QAED,IAAI,iCAAe,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAM,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YACxE,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;SACzD;aAAM;YACL,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,YAAoD,CAAC,CAAC;SACxF;IACH,CAAC","sourcesContent":["import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\nimport type { TriggerProps } from './types';\n\n/**\n * @internal\n * resolve the trigger props to the children, either by calling the render function, or cloning with the new props.\n */\nexport function applyTriggerPropsToChildren<TriggerChildProps>(\n  children: TriggerProps<TriggerChildProps>['children'],\n  triggerChildProps: TriggerChildProps,\n): React.ReactElement | null {\n  if (typeof children === 'function') {\n    return children(triggerChildProps);\n  } else if (children) {\n    return cloneTriggerTree(children, triggerChildProps);\n  }\n\n  // Components in React should return either JSX elements or \"null\", otherwise React will throw:\n  //   Nothing was returned from render.\n  //   This usually means a return statement is missing. Or, to render nothing, return null.\n  return children || null;\n}\n\n/**\n * Clones a React element tree, and applies the given props to the first grandchild that is not\n * a FluentTriggerComponent or React Fragment (the same element returned by {@link getTriggerChild}).\n */\nfunction cloneTriggerTree<TriggerChildProps>(\n  child: React.ReactNode,\n  triggerProps: TriggerChildProps,\n): React.ReactElement {\n  if (!React.isValidElement(child) || child.type === React.Fragment) {\n    throw new Error(\n      'A trigger element must be a single element for this component. ' +\n        \"Please ensure that you're not using React Fragments.\",\n    );\n  }\n\n  if (isFluentTrigger(child)) {\n    const grandchild = cloneTriggerTree(child.props.children, triggerProps);\n    return React.cloneElement(child, undefined, grandchild);\n  } else {\n    return React.cloneElement(child, triggerProps as TriggerChildProps & React.Attributes);\n  }\n}\n"]}