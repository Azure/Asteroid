"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOnScrollOutside = void 0;

const React = /*#__PURE__*/require("react");

const useEventCallback_1 = /*#__PURE__*/require("./useEventCallback");
/**
 * @internal
 * Utility to perform checks where a click/touch event was made outside a component
 */


const useOnScrollOutside = options => {
  const {
    refs,
    callback,
    element,
    disabled,
    contains: containsProp
  } = options;
  const listener = useEventCallback_1.useEventCallback(ev => {
    const contains = containsProp || ((parent, child) => !!(parent === null || parent === void 0 ? void 0 : parent.contains(child)));

    const isOutside = refs.every(ref => !contains(ref.current || null, ev.target));

    if (isOutside && !disabled) {
      callback(ev);
    }
  });
  React.useEffect(() => {
    if (!disabled) {
      element === null || element === void 0 ? void 0 : element.addEventListener('wheel', listener);
      element === null || element === void 0 ? void 0 : element.addEventListener('touchmove', listener);
    }

    return () => {
      element === null || element === void 0 ? void 0 : element.removeEventListener('wheel', listener);
      element === null || element === void 0 ? void 0 : element.removeEventListener('touchmove', listener);
    };
  }, [listener, element, disabled]);
};

exports.useOnScrollOutside = useOnScrollOutside;
//# sourceMappingURL=useOnScrollOutside.js.map