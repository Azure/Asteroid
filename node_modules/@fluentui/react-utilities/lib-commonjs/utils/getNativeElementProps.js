"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPartitionedNativeProps = exports.getNativeElementProps = void 0;

const properties_1 = /*#__PURE__*/require("./properties");

const nativeElementMap = {
  label: properties_1.labelProperties,
  audio: properties_1.audioProperties,
  video: properties_1.videoProperties,
  ol: properties_1.olProperties,
  li: properties_1.liProperties,
  a: properties_1.anchorProperties,
  button: properties_1.buttonProperties,
  input: properties_1.inputProperties,
  textarea: properties_1.textAreaProperties,
  select: properties_1.selectProperties,
  option: properties_1.optionProperties,
  table: properties_1.tableProperties,
  tr: properties_1.trProperties,
  th: properties_1.thProperties,
  td: properties_1.tdProperties,
  colGroup: properties_1.colGroupProperties,
  col: properties_1.colProperties,
  fieldset: properties_1.fieldsetProperties,
  form: properties_1.formProperties,
  iframe: properties_1.iframeProperties,
  img: properties_1.imgProperties,
  time: properties_1.timeProperties,
  dialog: properties_1.dialogProperties
};
/**
 * Given an element tagname and user props, filters the props to only allowed props for the given
 * element type.
 * @param tagName - Tag name (e.g. "div")
 * @param props - Props object
 * @param excludedPropNames - List of props to disallow
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

function getNativeElementProps(tagName, props, excludedPropNames) {
  const allowedPropNames = tagName && nativeElementMap[tagName] || properties_1.htmlElementProperties;
  allowedPropNames.as = 1;
  return properties_1.getNativeProps(props, allowedPropNames, excludedPropNames);
}

exports.getNativeElementProps = getNativeElementProps;
/**
 * Splits the native props into ones that go to the `root` slot, and ones that go to the primary slot.
 *
 * This function is only for use with components that have a primary slot other than `root`.
 * Most components should use {@link getNativeElementProps} for their root slot if it is the primary slot.
 *
 * @returns An object containing the native props for the `root` and primary slots.
 */

const getPartitionedNativeProps = ({
  primarySlotTagName,
  props,
  excludedPropNames
}) => {
  return {
    root: {
      style: props.style,
      className: props.className
    },
    primary: getNativeElementProps(primarySlotTagName, props, [...(excludedPropNames || []), 'style', 'className'])
  };
};

exports.getPartitionedNativeProps = getPartitionedNativeProps;
//# sourceMappingURL=getNativeElementProps.js.map