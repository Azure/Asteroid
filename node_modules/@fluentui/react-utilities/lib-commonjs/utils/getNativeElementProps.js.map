{"version":3,"sources":["packages/react-components/react-utilities/src/utils/getNativeElementProps.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,YAAA,gBAAA,OAAA,CAAA,cAAA,CAAA;;AA4BA,MAAM,gBAAgB,GAA2C;EAC/D,KAAK,EAAE,YAAA,CAAA,eADwD;EAE/D,KAAK,EAAE,YAAA,CAAA,eAFwD;EAG/D,KAAK,EAAE,YAAA,CAAA,eAHwD;EAI/D,EAAE,EAAE,YAAA,CAAA,YAJ2D;EAK/D,EAAE,EAAE,YAAA,CAAA,YAL2D;EAM/D,CAAC,EAAE,YAAA,CAAA,gBAN4D;EAO/D,MAAM,EAAE,YAAA,CAAA,gBAPuD;EAQ/D,KAAK,EAAE,YAAA,CAAA,eARwD;EAS/D,QAAQ,EAAE,YAAA,CAAA,kBATqD;EAU/D,MAAM,EAAE,YAAA,CAAA,gBAVuD;EAW/D,MAAM,EAAE,YAAA,CAAA,gBAXuD;EAY/D,KAAK,EAAE,YAAA,CAAA,eAZwD;EAa/D,EAAE,EAAE,YAAA,CAAA,YAb2D;EAc/D,EAAE,EAAE,YAAA,CAAA,YAd2D;EAe/D,EAAE,EAAE,YAAA,CAAA,YAf2D;EAgB/D,QAAQ,EAAE,YAAA,CAAA,kBAhBqD;EAiB/D,GAAG,EAAE,YAAA,CAAA,aAjB0D;EAkB/D,QAAQ,EAAE,YAAA,CAAA,kBAlBqD;EAmB/D,IAAI,EAAE,YAAA,CAAA,cAnByD;EAoB/D,MAAM,EAAE,YAAA,CAAA,gBApBuD;EAqB/D,GAAG,EAAE,YAAA,CAAA,aArB0D;EAsB/D,IAAI,EAAE,YAAA,CAAA,cAtByD;EAuB/D,MAAM,EAAE,YAAA,CAAA;AAvBuD,CAAjE;AA0BA;;;;;;AAMG;AACH;;AACA,SAAgB,qBAAhB,CACE,OADF,EAEE,KAFF,EAGE,iBAHF,EAG8B;EAE5B,MAAM,gBAAgB,GAAI,OAAO,IAAI,gBAAgB,CAAC,OAAD,CAA5B,IAA0C,YAAA,CAAA,qBAAnE;EACA,gBAAgB,CAAC,EAAjB,GAAsB,CAAtB;EAEA,OAAO,YAAA,CAAA,cAAA,CAAe,KAAf,EAAsB,gBAAtB,EAAwC,iBAAxC,CAAP;AACD;;AATD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAWA;;;;;;;AAOG;;AACI,MAAM,yBAAyB,GAAG,CAGvC;EACA,kBADA;EAEA,KAFA;EAGA;AAHA,CAHuC,KAgBpC;EACH,OAAO;IACL,IAAI,EAAE;MAAE,KAAK,EAAE,KAAK,CAAC,KAAf;MAAsB,SAAS,EAAE,KAAK,CAAC;IAAvC,CADD;IAEL,OAAO,EAAE,qBAAqB,CAAgC,kBAAhC,EAAoD,KAApD,EAA2D,CACvF,IAAI,iBAAiB,IAAI,EAAzB,CADuF,EAEvF,OAFuF,EAGvF,WAHuF,CAA3D;EAFzB,CAAP;AAQD,CAzBM;;AAAM,OAAA,CAAA,yBAAA,GAAyB,yBAAzB","sourcesContent":["import * as React from 'react';\nimport {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  fieldsetProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n  timeProperties,\n  dialogProperties,\n} from './properties';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  fieldset: fieldsetProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n  time: timeProperties,\n  dialog: dialogProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n  allowedPropNames.as = 1;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n\n/**\n * Splits the native props into ones that go to the `root` slot, and ones that go to the primary slot.\n *\n * This function is only for use with components that have a primary slot other than `root`.\n * Most components should use {@link getNativeElementProps} for their root slot if it is the primary slot.\n *\n * @returns An object containing the native props for the `root` and primary slots.\n */\nexport const getPartitionedNativeProps = <\n  Props extends Pick<React.HTMLAttributes<HTMLElement>, 'style' | 'className'>,\n  ExcludedPropKeys extends Extract<keyof Props, string> = never\n>({\n  primarySlotTagName,\n  props,\n  excludedPropNames,\n}: {\n  /** The primary slot's element type (e.g. 'div') */\n  primarySlotTagName: keyof JSX.IntrinsicElements;\n\n  /** The component's props object */\n  props: Props;\n\n  /** List of native props to exclude from the returned value */\n  excludedPropNames?: ExcludedPropKeys[];\n}) => {\n  return {\n    root: { style: props.style, className: props.className },\n    primary: getNativeElementProps<Omit<Props, ExcludedPropKeys>>(primarySlotTagName, props, [\n      ...(excludedPropNames || []),\n      'style',\n      'className',\n    ]),\n  };\n};\n"],"sourceRoot":"../src/"}