{"version":3,"sources":["packages/react-components/react-toolbar/src/components/ToolbarButton/useToolbarButton.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,cAAA,gBAAA,OAAA,CAAA,wBAAA,CAAA;AAGA;;;;;AAKG;;;AACI,MAAM,yBAAyB,GAAG,CACvC,KADuC,EAEvC,GAFuC,KAGjB;EACtB,MAAM;IAAE,QAAQ,GAAG,KAAb;IAAoB,GAAG;EAAvB,IAAuC,KAA7C;EACA,MAAM,KAAK,GAAG,cAAA,CAAA,kBAAA,CAAmB;IAAE,UAAU,EAAE,QAAd;IAAwB,GAAG;EAA3B,CAAnB,EAA6D,GAA7D,CAAd;EACA,OAAO;IACL,QADK;IAEL,GAAG;EAFE,CAAP;AAID,CAVM;;AAAM,OAAA,CAAA,yBAAA,GAAyB,yBAAzB","sourcesContent":["import * as React from 'react';\nimport { useButton_unstable } from '@fluentui/react-button';\nimport { ToolbarButtonProps, ToolbarButtonState } from './ToolbarButton.types';\n\n/**\n * Given user props, defines default props for the Button, calls useButtonState and useChecked, and returns\n * processed state.\n * @param props - User provided props to the Button component.\n * @param ref - User provided ref to be passed to the Button component.\n */\nexport const useToolbarButton_unstable = (\n  props: ToolbarButtonProps,\n  ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>,\n): ToolbarButtonState => {\n  const { vertical = false, ...buttonProps } = props;\n  const state = useButton_unstable({ appearance: 'subtle', ...buttonProps }, ref);\n  return {\n    vertical,\n    ...state,\n  };\n};\n"],"sourceRoot":"../src/"}