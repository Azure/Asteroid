"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAlert_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_avatar_1 = /*#__PURE__*/require("@fluentui/react-avatar");

const react_button_1 = /*#__PURE__*/require("@fluentui/react-button");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
/**
 * Create the state required to render Alert.
 *
 * The returned state can be modified with hooks such as useAlertStyles_unstable,
 * before being passed to renderAlert_unstable.
 *
 * @param props - props from this instance of Alert
 * @param ref - reference to root HTMLElement of Alert
 */


const useAlert_unstable = (props, ref) => {
  const {
    appearance = 'primary',
    intent
  } = props;
  /** Determine the role and icon to render based on the intent */

  let defaultIcon;
  let defaultRole = 'status';

  switch (intent) {
    case 'success':
      defaultIcon = React.createElement(react_icons_1.CheckmarkCircleFilled, null);
      break;

    case 'error':
      defaultIcon = React.createElement(react_icons_1.DismissCircleFilled, null);
      defaultRole = 'alert';
      break;

    case 'warning':
      defaultIcon = React.createElement(react_icons_1.WarningFilled, null);
      defaultRole = 'alert';
      break;

    case 'info':
      defaultIcon = React.createElement(react_icons_1.InfoFilled, null);
      break;
  }

  const action = react_utilities_1.resolveShorthand(props.action, {
    defaultProps: {
      appearance: 'transparent'
    }
  });
  const avatar = react_utilities_1.resolveShorthand(props.avatar);
  let icon;
  /** Avatar prop takes precedence over the icon or intent prop */

  if (!avatar) {
    icon = react_utilities_1.resolveShorthand(props.icon, {
      defaultProps: {
        children: defaultIcon
      },
      required: !!props.intent
    });
  }

  return {
    action,
    appearance,
    avatar,
    components: {
      root: 'div',
      icon: 'span',
      action: react_button_1.Button,
      avatar: react_avatar_1.Avatar
    },
    icon,
    intent,
    root: react_utilities_1.getNativeElementProps('div', {
      ref,
      role: defaultRole,
      children: props.children,
      ...props
    })
  };
};

exports.useAlert_unstable = useAlert_unstable;
//# sourceMappingURL=useAlert.js.map