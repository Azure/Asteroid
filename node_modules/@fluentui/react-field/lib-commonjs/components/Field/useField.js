"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useField_unstable = exports.getPartitionedFieldProps = void 0;

const React = /*#__PURE__*/require("react");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");

const react_label_1 = /*#__PURE__*/require("@fluentui/react-label");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const validationMessageIcons = {
  error: /*#__PURE__*/React.createElement(react_icons_1.ErrorCircle12Filled, null),
  warning: /*#__PURE__*/React.createElement(react_icons_1.Warning12Filled, null),
  success: /*#__PURE__*/React.createElement(react_icons_1.CheckmarkCircle12Filled, null)
};
/**
 * Partition the props used by the Field itself, from the props that are passed to the underlying field component.
 */

const getPartitionedFieldProps = props => {
  const {
    className,
    control,
    hint,
    label,
    orientation,
    root,
    style,
    validationMessage,
    validationMessageIcon,
    validationState,
    ...restOfProps
  } = props;
  const fieldProps = {
    className,
    control,
    hint,
    label,
    orientation,
    root,
    style,
    validationMessage,
    validationMessageIcon,
    validationState
  };
  return [fieldProps, restOfProps];
};

exports.getPartitionedFieldProps = getPartitionedFieldProps;
/**
 * Create the state required to render Field.
 *
 * The returned state can be modified with hooks such as useFieldStyles_unstable,
 * before being passed to renderField_unstable.
 *
 * @param props - Props passed to this field
 * @param ref - Ref to the control slot (primary slot)
 * @param params - Configuration parameters for this Field
 */

const useField_unstable = (props, ref, params) => {
  var _a, _b, _c;

  const [fieldProps, controlProps] = exports.getPartitionedFieldProps(props);
  const {
    orientation = 'vertical',
    validationState
  } = fieldProps;
  const {
    labelConnection = 'htmlFor',
    ariaInvalidOnError = true
  } = params;
  const baseId = react_utilities_1.useId('field-');
  const root = react_utilities_1.resolveShorthand(fieldProps.root, {
    required: true,
    defaultProps: react_utilities_1.getNativeElementProps('div', fieldProps)
  });
  const label = react_utilities_1.resolveShorthand(fieldProps.label, {
    defaultProps: {
      id: baseId + '__label',
      required: controlProps.required,
      size: typeof controlProps.size === 'string' ? controlProps.size : undefined // htmlFor is handled below

    }
  });
  const validationMessage = react_utilities_1.resolveShorthand(fieldProps.validationMessage, {
    defaultProps: {
      id: baseId + '__validationMessage'
    }
  });
  const hint = react_utilities_1.resolveShorthand(fieldProps.hint, {
    defaultProps: {
      id: baseId + '__hint'
    }
  });
  const validationMessageIcon = react_utilities_1.resolveShorthand(fieldProps.validationMessageIcon, {
    required: !!validationState,
    defaultProps: {
      children: validationState ? validationMessageIcons[validationState] : undefined
    }
  }); // Hook up aria props on the control

  if (label && labelConnection === 'aria-labelledby') {
    (_a = controlProps['aria-labelledby']) !== null && _a !== void 0 ? _a : controlProps['aria-labelledby'] = label.id;
  }

  if (validationMessage || hint) {
    // The control is described by the validation message, or hint, or both
    // We also preserve and append any aria-describedby supplied by the user
    // For reference: https://github.com/microsoft/fluentui/pull/25580#discussion_r1017259933
    controlProps['aria-describedby'] = [validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.id, hint === null || hint === void 0 ? void 0 : hint.id, controlProps['aria-describedby']].filter(Boolean).join(' ');
  }

  if (validationState === 'error' && ariaInvalidOnError) {
    (_b = controlProps['aria-invalid']) !== null && _b !== void 0 ? _b : controlProps['aria-invalid'] = true;
  }

  const control = react_utilities_1.resolveShorthand(fieldProps.control, {
    required: true,
    defaultProps: {
      ref,
      id: baseId + '__control',
      ...controlProps
    }
  });

  if (label && labelConnection === 'htmlFor') {
    (_c = label.htmlFor) !== null && _c !== void 0 ? _c : label.htmlFor = control.id;
  }

  const state = {
    orientation,
    validationState,
    classNames: params.classNames,
    components: {
      root: 'div',
      control: params.component,
      label: react_label_1.Label,
      validationMessage: 'div',
      validationMessageIcon: 'span',
      hint: 'div'
    },
    root,
    control,
    label,
    validationMessageIcon,
    validationMessage,
    hint
  };
  return state;
};

exports.useField_unstable = useField_unstable;
//# sourceMappingURL=useField.js.map