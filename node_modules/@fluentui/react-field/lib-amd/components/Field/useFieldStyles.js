define(["require", "exports", "tslib", "@fluentui/react-theme", "@griffel/react"], function (require, exports, tslib_1, react_theme_1, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useFieldStyles_unstable = exports.getFieldClassNames = void 0;
    var getFieldClassNames = function (name) { return ({
        root: "fui-" + name,
        control: "fui-" + name + "__control",
        label: "fui-" + name + "__label",
        validationMessage: "fui-" + name + "__validationMessage",
        validationMessageIcon: "fui-" + name + "__validationMessageIcon",
        hint: "fui-" + name + "__hint",
    }); };
    exports.getFieldClassNames = getFieldClassNames;
    /**
     * Styles for the root slot
     */
    var useRootStyles = react_1.makeStyles({
        base: {
            display: 'grid',
            gridAutoFlow: 'row',
            justifyItems: 'start',
        },
        horizontal: {
            gridTemplateRows: 'auto auto auto auto',
            gridTemplateColumns: '1fr 2fr',
        },
        secondColumn: {
            gridColumnStart: '2',
        },
    });
    var useLabelStyles = react_1.makeStyles({
        base: {
            marginTop: react_theme_1.tokens.spacingVerticalXXS,
            marginBottom: react_theme_1.tokens.spacingVerticalXXS,
        },
        horizontal: {
            gridRowStart: '1',
            gridRowEnd: '-1',
            marginRight: react_theme_1.tokens.spacingHorizontalM,
            alignSelf: 'start',
            justifySelf: 'stretch',
        },
    });
    var useSecondaryTextStyles = react_1.makeStyles({
        base: tslib_1.__assign({ marginTop: react_theme_1.tokens.spacingVerticalXXS, color: react_theme_1.tokens.colorNeutralForeground3 }, react_theme_1.typographyStyles.caption1),
        error: {
            color: react_theme_1.tokens.colorPaletteRedForeground1,
        },
    });
    var useValidationMessageIconStyles = react_1.makeStyles({
        base: {
            fontSize: '12px',
            lineHeight: '12px',
            verticalAlign: 'middle',
            marginRight: react_theme_1.tokens.spacingHorizontalXS,
        },
        error: {
            color: react_theme_1.tokens.colorPaletteRedForeground1,
        },
        warning: {
            color: react_theme_1.tokens.colorPaletteDarkOrangeForeground1,
        },
        success: {
            color: react_theme_1.tokens.colorPaletteGreenForeground1,
        },
    });
    /**
     * Apply styling to the Field slots based on the state
     */
    var useFieldStyles_unstable = function (state) {
        var classNames = state.classNames;
        var validationState = state.validationState;
        var horizontal = state.orientation === 'horizontal';
        var rootStyles = useRootStyles();
        state.root.className = react_1.mergeClasses(classNames.root, rootStyles.base, horizontal && rootStyles.horizontal, state.root.className);
        if (state.control) {
            state.control.className = react_1.mergeClasses(classNames.control, horizontal && rootStyles.secondColumn, state.control.className);
        }
        var labelStyles = useLabelStyles();
        if (state.label) {
            state.label.className = react_1.mergeClasses(classNames.label, labelStyles.base, horizontal && labelStyles.horizontal, state.label.className);
        }
        var validationMessageIconStyles = useValidationMessageIconStyles();
        if (state.validationMessageIcon) {
            state.validationMessageIcon.className = react_1.mergeClasses(classNames.validationMessageIcon, validationMessageIconStyles.base, !!validationState && validationMessageIconStyles[validationState], state.validationMessageIcon.className);
        }
        var secondaryTextStyles = useSecondaryTextStyles();
        if (state.validationMessage) {
            state.validationMessage.className = react_1.mergeClasses(classNames.validationMessage, secondaryTextStyles.base, horizontal && rootStyles.secondColumn, validationState === 'error' && secondaryTextStyles.error, state.validationMessage.className);
        }
        if (state.hint) {
            state.hint.className = react_1.mergeClasses(classNames.hint, secondaryTextStyles.base, horizontal && rootStyles.secondColumn, state.hint.className);
        }
    };
    exports.useFieldStyles_unstable = useFieldStyles_unstable;
});
//# sourceMappingURL=useFieldStyles.js.map