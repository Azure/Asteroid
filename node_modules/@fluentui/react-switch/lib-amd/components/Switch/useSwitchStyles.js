define(["require", "exports", "tslib", "@fluentui/react-tabster", "@fluentui/react-theme", "@griffel/react"], function (require, exports, tslib_1, react_tabster_1, react_theme_1, react_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSwitchStyles_unstable = exports.switchClassName = exports.switchClassNames = void 0;
    exports.switchClassNames = {
        root: 'fui-Switch',
        indicator: 'fui-Switch__indicator',
        input: 'fui-Switch__input',
        label: 'fui-Switch__label',
    };
    /**
     * @deprecated Use `switchClassNames.root` instead.
     */
    exports.switchClassName = exports.switchClassNames.root;
    // Thumb and track sizes used by the component.
    var spaceBetweenThumbAndTrack = 2;
    var trackHeight = 20;
    var trackWidth = 40;
    var thumbSize = trackHeight - spaceBetweenThumbAndTrack;
    var useRootStyles = react_1.makeStyles({
        base: tslib_1.__assign({ alignItems: 'flex-start', boxSizing: 'border-box', display: 'inline-flex', position: 'relative' }, react_tabster_1.createFocusOutlineStyle({ style: {}, selector: 'focus-within' })),
        vertical: {
            flexDirection: 'column',
        },
    });
    var useIndicatorStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), react_1.shorthands.borderStyle('solid')), react_1.shorthands.borderWidth('1px')), { lineHeight: 0, boxSizing: 'border-box', fill: 'currentColor', flexShrink: 0, fontSize: thumbSize + "px", height: trackHeight + "px" }), react_1.shorthands.margin(react_theme_1.tokens.spacingVerticalS, react_theme_1.tokens.spacingHorizontalS)), { pointerEvents: 'none', transitionDuration: react_theme_1.tokens.durationNormal, transitionTimingFunction: react_theme_1.tokens.curveEasyEase, transitionProperty: 'background, border, color', width: trackWidth + "px", '@media screen and (prefers-reduced-motion: reduce)': {
                transitionDuration: '0.01ms',
            }, '> *': {
                transitionDuration: react_theme_1.tokens.durationNormal,
                transitionTimingFunction: react_theme_1.tokens.curveEasyEase,
                transitionProperty: 'transform',
                '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                },
            } }),
        labelAbove: {
            marginTop: 0,
        },
    });
    var useInputStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign({ boxSizing: 'border-box', cursor: 'pointer', height: '100%' }, react_1.shorthands.margin(0)), { opacity: 0, position: 'absolute', 
            // Calculate the width of the hidden input by taking into account the size of the indicator + the padding around it.
            // This is done so that clicking on that "empty space" still toggles the switch.
            width: "calc(" + trackWidth + "px + 2 * " + react_theme_1.tokens.spacingHorizontalS + ")", 
            // Checked (both enabled and disabled)
            ':checked': (_a = {},
                _a["& ~ ." + exports.switchClassNames.indicator] = {
                    '> *': {
                        transform: "translateX(" + (trackWidth - thumbSize - spaceBetweenThumbAndTrack) + "px)",
                    },
                },
                _a), 
            // Disabled (both checked and unchecked)
            ':disabled': (_b = {
                    cursor: 'default'
                },
                _b["& ~ ." + exports.switchClassNames.indicator] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                },
                _b["& ~ ." + exports.switchClassNames.label] = {
                    cursor: 'default',
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                },
                _b), 
            // Enabled and unchecked
            ':enabled:not(:checked)': (_c = {},
                _c["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralStrokeAccessible }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeAccessible)),
                _c["& ~ ." + exports.switchClassNames.label] = {
                    color: react_theme_1.tokens.colorNeutralForeground1,
                },
                _c[':hover'] = (_d = {},
                    _d["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralStrokeAccessibleHover }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeAccessibleHover)),
                    _d),
                _c[':hover:active'] = (_e = {},
                    _e["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeAccessiblePressed)),
                    _e),
                _c), 
            // Enabled and checked
            ':enabled:checked': (_f = {},
                _f["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorCompoundBrandBackground, color: react_theme_1.tokens.colorNeutralForegroundInverted }, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStroke)),
                _f[':hover'] = (_g = {},
                    _g["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorCompoundBrandBackgroundHover }, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeInteractive)),
                    _g),
                _f[':hover:active'] = (_h = {},
                    _h["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorCompoundBrandBackgroundPressed }, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeInteractive)),
                    _h),
                _f), 
            // Disabled and unchecked
            ':disabled:not(:checked)': (_j = {},
                _j["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)),
                _j), 
            // Disabled and checked
            ':disabled:checked': (_k = {},
                _k["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackgroundDisabled }, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeDisabled)),
                _k) }),
        highContrast: {
            '@media (forced-colors: active)': {
                ':disabled': (_l = {},
                    _l["& ~ ." + exports.switchClassNames.indicator] = tslib_1.__assign({ color: 'GrayText' }, react_1.shorthands.borderColor('GrayText')),
                    _l["& ~ ." + exports.switchClassNames.label] = {
                        color: 'GrayText',
                    },
                    _l),
            },
        },
        before: {
            right: 0,
            top: 0,
        },
        after: {
            left: 0,
            top: 0,
        },
        above: {
            bottom: 0,
            height: "calc(" + trackHeight + "px + " + react_theme_1.tokens.spacingVerticalS + ")",
            width: '100%',
        },
    });
    var useLabelStyles = react_1.makeStyles({
        base: tslib_1.__assign({ cursor: 'pointer', 
            // Use a (negative) margin to account for the difference between the track's height and the label's line height.
            // This prevents the label from expanding the height of the switch, but preserves line height if the label wraps.
            marginBottom: "calc((" + trackHeight + "px - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)", marginTop: "calc((" + trackHeight + "px - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)" }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalS, react_theme_1.tokens.spacingHorizontalS)),
        above: {
            paddingTop: react_theme_1.tokens.spacingVerticalXS,
            paddingBottom: react_theme_1.tokens.spacingVerticalXS,
            width: '100%',
        },
        after: {
            paddingLeft: react_theme_1.tokens.spacingHorizontalXS,
        },
        before: {
            paddingRight: react_theme_1.tokens.spacingHorizontalXS,
        },
    });
    /**
     * Apply styling to the Switch slots based on the state
     */
    var useSwitchStyles_unstable = function (state) {
        var rootStyles = useRootStyles();
        var indicatorStyles = useIndicatorStyles();
        var inputStyles = useInputStyles();
        var labelStyles = useLabelStyles();
        var label = state.label, labelPosition = state.labelPosition;
        state.root.className = react_1.mergeClasses(exports.switchClassNames.root, rootStyles.base, labelPosition === 'above' && rootStyles.vertical, state.root.className);
        state.indicator.className = react_1.mergeClasses(exports.switchClassNames.indicator, indicatorStyles.base, label && labelPosition === 'above' && indicatorStyles.labelAbove, state.indicator.className);
        state.input.className = react_1.mergeClasses(exports.switchClassNames.input, inputStyles.base, inputStyles.highContrast, label && inputStyles[labelPosition], state.input.className);
        if (state.label) {
            state.label.className = react_1.mergeClasses(exports.switchClassNames.label, labelStyles.base, labelStyles[labelPosition], state.label.className);
        }
        return state;
    };
    exports.useSwitchStyles_unstable = useSwitchStyles_unstable;
});
//# sourceMappingURL=useSwitchStyles.js.map