define(["require", "exports", "tslib", "react", "@fluentui/react-icons", "@fluentui/react-label", "@fluentui/react-tabster", "@fluentui/react-utilities"], function (require, exports, tslib_1, React, react_icons_1, react_label_1, react_tabster_1, react_utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSwitch_unstable = void 0;
    /**
     * Create the state required to render Switch.
     *
     * The returned state can be modified with hooks such as useSwitchStyles_unstable,
     * before being passed to renderSwitch_unstable.
     *
     * @param props - props from this instance of Switch
     * @param ref - reference to `<input>` element of Switch
     */
    var useSwitch_unstable = function (props, ref) {
        var checked = props.checked, defaultChecked = props.defaultChecked, disabled = props.disabled, _a = props.labelPosition, labelPosition = _a === void 0 ? 'after' : _a, onChange = props.onChange, required = props.required;
        var nativeProps = react_utilities_1.getPartitionedNativeProps({
            props: props,
            primarySlotTagName: 'input',
            excludedPropNames: ['checked', 'defaultChecked', 'onChange'],
        });
        var id = react_utilities_1.useId('switch-', nativeProps.primary.id);
        var root = react_utilities_1.resolveShorthand(props.root, {
            defaultProps: tslib_1.__assign({ ref: react_tabster_1.useFocusWithin() }, nativeProps.root),
            required: true,
        });
        var indicator = react_utilities_1.resolveShorthand(props.indicator, {
            defaultProps: {
                'aria-hidden': true,
                children: React.createElement(react_icons_1.CircleFilled, null),
            },
            required: true,
        });
        var input = react_utilities_1.resolveShorthand(props.input, {
            defaultProps: tslib_1.__assign({ checked: checked, defaultChecked: defaultChecked, id: id, ref: ref, role: 'switch', type: 'checkbox' }, nativeProps.primary),
            required: true,
        });
        input.onChange = react_utilities_1.mergeCallbacks(input.onChange, function (ev) { return onChange === null || onChange === void 0 ? void 0 : onChange(ev, { checked: ev.currentTarget.checked }); });
        var label = react_utilities_1.resolveShorthand(props.label, {
            defaultProps: {
                disabled: disabled,
                htmlFor: id,
                required: required,
                size: 'medium',
            },
        });
        return {
            labelPosition: labelPosition,
            //Slots definition
            components: {
                root: 'div',
                indicator: 'div',
                input: 'input',
                label: react_label_1.Label,
            },
            root: root,
            indicator: indicator,
            input: input,
            label: label,
        };
    };
    exports.useSwitch_unstable = useSwitch_unstable;
});
//# sourceMappingURL=useSwitch.js.map