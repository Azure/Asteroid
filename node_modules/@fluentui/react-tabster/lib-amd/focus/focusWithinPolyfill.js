define(["require", "exports", "keyborg", "./constants"], function (require, exports, keyborg_1, constants_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.applyFocusWithinPolyfill = void 0;
    /**
     * A ponyfill that allows `:focus-within` to support visibility based on keyboard/mouse navigation
     * like `:focus-visible` https://github.com/WICG/focus-visible/issues/151
     * @returns ref to the element that uses `:focus-within` styles
     */
    function applyFocusWithinPolyfill(element, win) {
        var keyborg = keyborg_1.createKeyborg(win);
        // When navigation mode changes to mouse, remove the focus-within selector
        keyborg.subscribe(function (isNavigatingWithKeyboard) {
            if (!isNavigatingWithKeyboard) {
                removeFocusWithinClass(element);
            }
        });
        // Keyborg's focusin event is delegated so it's only registered once on the window
        // and contains metadata about the focus event
        var keyborgListener = function (e) {
            if (keyborg.isNavigatingWithKeyboard() && isHTMLElement(e.target)) {
                // Griffel can't create chained global styles so use the parent element for now
                applyFocusWithinClass(element);
            }
        };
        // Make sure that when focus leaves the scope, the focus within class is removed
        var blurListener = function (e) {
            if (!e.relatedTarget || (isHTMLElement(e.relatedTarget) && !element.contains(e.relatedTarget))) {
                removeFocusWithinClass(element);
            }
        };
        element.addEventListener(keyborg_1.KEYBORG_FOCUSIN, keyborgListener);
        element.addEventListener('focusout', blurListener);
        // Return disposer
        return function () {
            element.removeEventListener(keyborg_1.KEYBORG_FOCUSIN, keyborgListener);
            element.removeEventListener('focusout', blurListener);
            keyborg_1.disposeKeyborg(keyborg);
        };
    }
    exports.applyFocusWithinPolyfill = applyFocusWithinPolyfill;
    function applyFocusWithinClass(el) {
        el.setAttribute(constants_1.FOCUS_WITHIN_ATTR, '');
    }
    function removeFocusWithinClass(el) {
        el.removeAttribute(constants_1.FOCUS_WITHIN_ATTR);
    }
    function isHTMLElement(target) {
        if (!target) {
            return false;
        }
        return Boolean(target && typeof target === 'object' && 'classList' in target && 'contains' in target);
    }
});
//# sourceMappingURL=focusWithinPolyfill.js.map