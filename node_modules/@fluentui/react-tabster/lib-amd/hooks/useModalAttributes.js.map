{"version":3,"file":"useModalAttributes.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-tabster/src/hooks/useModalAttributes.ts"],"names":[],"mappings":";;;;IA4BA;;;;;;OAMG;IACI,IAAM,kBAAkB,GAAG,UAChC,OAAuC;QAAvC,wBAAA,EAAA,YAAuC;QAE/B,IAAA,SAAS,GAAuC,OAAO,UAA9C,EAAE,eAAe,GAAsB,OAAO,gBAA7B,EAAE,eAAe,GAAK,OAAO,gBAAZ,CAAa;QAChE,IAAM,OAAO,GAAG,uBAAU,EAAE,CAAC;QAC7B,6CAA6C;QAC7C,IAAI,OAAO,EAAE;YACX,sBAAY,CAAC,OAAO,CAAC,CAAC;YACtB,oBAAU,CAAC,OAAO,CAAC,CAAC;SACrB;QAED,IAAM,EAAE,GAAG,uBAAK,CAAC,QAAQ,CAAC,CAAC;QAC3B,IAAM,eAAe,GAAG,2CAAoB,CAAC;YAC3C,OAAO,EAAE,EAAE;YACX,SAAS,EAAE;gBACT,EAAE,IAAA;gBACF,kBAAkB,EAAE,CAAC,SAAS;gBAC9B,kBAAkB,EAAE,eAAe;gBACnC,SAAS,EAAE,eAAe;aAC3B;SACF,CAAC,CAAC;QAEH,IAAM,iBAAiB,GAAG,2CAAoB,CAAC;YAC7C,OAAO,EAAE,EAAE;SACZ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,iBAAA,EAAE,iBAAiB,mBAAA,EAAE,CAAC;IAChD,CAAC,CAAC;IA3BW,QAAA,kBAAkB,sBA2B7B","sourcesContent":["import { useId } from '@fluentui/react-utilities';\nimport { useTabsterAttributes } from './useTabsterAttributes';\nimport { getDeloser, getModalizer, Types as TabsterTypes } from 'tabster';\nimport { useTabster } from './useTabster';\n\nexport interface UseModalAttributesOptions {\n  /**\n   * Traps focus inside the elements the attributes are applied.\n   * Prefer this to `legacyTrapFocus`\n   * it forbids users to tab out of the focus trap into the actual browser.\n   */\n  trapFocus?: boolean;\n\n  /**\n   * Traps focus inside the elements the attributes are applied.\n   * This prop enables legacy behavior to match previous versions of Fluent and is not\n   * recommended for general use.\n   * Enabling `legacyTrapFocus` prevents users from tabbing out of the focus trap and into\n   * the actual browser. Prefer using `trapFocus` instead of this prop.\n   */\n  legacyTrapFocus?: boolean;\n\n  /**\n   * Always reachabled in Tab order\n   */\n  alwaysFocusable?: boolean;\n}\n\n/**\n * Applies modal dialog behaviour through DOM attributes\n * Modal element will focus trap and hide other content on the page\n * The trigger element will be focused if focus is lost after the modal element is removed\n *\n * @returns DOM attributes to apply to the modal element and its trigger\n */\nexport const useModalAttributes = (\n  options: UseModalAttributesOptions = {},\n): { modalAttributes: TabsterTypes.TabsterDOMAttribute; triggerAttributes: TabsterTypes.TabsterDOMAttribute } => {\n  const { trapFocus, alwaysFocusable, legacyTrapFocus } = options;\n  const tabster = useTabster();\n  // Initializes the modalizer and deloser APIs\n  if (tabster) {\n    getModalizer(tabster);\n    getDeloser(tabster);\n  }\n\n  const id = useId('modal-');\n  const modalAttributes = useTabsterAttributes({\n    deloser: {},\n    modalizer: {\n      id,\n      isOthersAccessible: !trapFocus,\n      isAlwaysAccessible: alwaysFocusable,\n      isTrapped: legacyTrapFocus,\n    },\n  });\n\n  const triggerAttributes = useTabsterAttributes({\n    deloser: {},\n  });\n\n  return { modalAttributes, triggerAttributes };\n};\n"]}