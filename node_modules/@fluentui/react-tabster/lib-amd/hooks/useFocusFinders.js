define(["require", "exports", "tslib", "react", "./useTabster"], function (require, exports, tslib_1, React, useTabster_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useFocusFinders = void 0;
    /**
     * Returns a set of helper functions that will traverse focusable elements in the context of a root DOM element
     */
    var useFocusFinders = function () {
        var tabster = useTabster_1.useTabster();
        // Narrow props for now and let need dictate additional props in the future
        var findAllFocusable = React.useCallback(function (container, acceptCondition) {
            return (tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findAll({ container: container, acceptCondition: acceptCondition })) || [];
        }, [tabster]);
        var findFirstFocusable = React.useCallback(function (container) { return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findFirst({ container: container }); }, [tabster]);
        var findLastFocusable = React.useCallback(function (container) { return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findLast({ container: container }); }, [
            tabster,
        ]);
        var findNextFocusable = React.useCallback(function (currentElement, options) {
            if (options === void 0) { options = {}; }
            return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findNext(tslib_1.__assign({ currentElement: currentElement }, options));
        }, [tabster]);
        var findPrevFocusable = React.useCallback(function (currentElement, options) {
            if (options === void 0) { options = {}; }
            return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findPrev(tslib_1.__assign({ currentElement: currentElement }, options));
        }, [tabster]);
        return {
            findAllFocusable: findAllFocusable,
            findFirstFocusable: findFirstFocusable,
            findLastFocusable: findLastFocusable,
            findNextFocusable: findNextFocusable,
            findPrevFocusable: findPrevFocusable,
        };
    };
    exports.useFocusFinders = useFocusFinders;
});
//# sourceMappingURL=useFocusFinders.js.map