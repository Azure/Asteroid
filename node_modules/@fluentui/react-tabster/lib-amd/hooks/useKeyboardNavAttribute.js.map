{"version":3,"file":"useKeyboardNavAttribute.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-tabster/src/hooks/useKeyboardNavAttribute.ts"],"names":[],"mappings":";;;;IAOA;;;;OAIG;IACH,SAAgB,uBAAuB;QAC7B,IAAA,cAAc,GAAK,0CAAS,EAAE,eAAhB,CAAiB;QACvC,IAAM,OAAO,GAAG,eAAO,CAAC,cAAM,OAAA,cAAc,IAAI,uBAAa,CAAC,cAAc,CAAC,WAAY,CAAC,EAA5D,CAA4D,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QAC9G,IAAM,GAAG,GAAG,cAAM,CAAI,IAAI,CAAC,CAAC;QAC5B,iBAAS,CAAC;YACR,IAAI,OAAO,EAAE;gBACX,mBAAmB,CAAC,GAAG,EAAE,kCAAsB,EAAE,OAAO,CAAC,wBAAwB,EAAE,CAAC,CAAC;gBACrF,IAAM,IAAE,GAAoB,UAAA,IAAI;oBAC9B,mBAAmB,CAAC,GAAG,EAAE,kCAAsB,EAAE,IAAI,CAAC,CAAC;gBACzD,CAAC,CAAC;gBACF,OAAO,CAAC,SAAS,CAAC,IAAE,CAAC,CAAC;gBACtB,OAAO,cAAM,OAAA,OAAO,CAAC,WAAW,CAAC,IAAE,CAAC,EAAvB,CAAuB,CAAC;aACtC;QACH,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QACd,OAAO,GAAG,CAAC;IACb,CAAC;IAfD,0DAeC;IAED,SAAS,mBAAmB,CAAC,UAAkC,EAAE,SAAiB,EAAE,KAAc;QAChG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACvB,OAAO;SACR;QACD,IAAI,KAAK,EAAE;YACT,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;SAChD;aAAM;YACL,UAAU,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;SAC/C;IACH,CAAC","sourcesContent":["import { createKeyborg } from 'keyborg';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { KEYBOARD_NAV_ATTRIBUTE } from '../focus/constants';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport type { KeyborgCallback } from 'keyborg';\nimport type { RefObject } from 'react';\n\n/**\n * Instantiates [keyborg](https://github.com/microsoft/keyborg) and adds `data-keyboard-nav`\n * attribute to a referenced element to ensure keyboard navigation awareness\n * synced to keyborg logic without having to cause a re-render on react tree.\n */\nexport function useKeyboardNavAttribute<E extends HTMLElement>() {\n  const { targetDocument } = useFluent();\n  const keyborg = useMemo(() => targetDocument && createKeyborg(targetDocument.defaultView!), [targetDocument]);\n  const ref = useRef<E>(null);\n  useEffect(() => {\n    if (keyborg) {\n      setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, keyborg.isNavigatingWithKeyboard());\n      const cb: KeyborgCallback = next => {\n        setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, next);\n      };\n      keyborg.subscribe(cb);\n      return () => keyborg.unsubscribe(cb);\n    }\n  }, [keyborg]);\n  return ref;\n}\n\nfunction setBooleanAttribute(elementRef: RefObject<HTMLElement>, attribute: string, value: boolean) {\n  if (!elementRef.current) {\n    return;\n  }\n  if (value) {\n    elementRef.current.setAttribute(attribute, '');\n  } else {\n    elementRef.current.removeAttribute(attribute);\n  }\n}\n"]}