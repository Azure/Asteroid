import { Types, getMover } from 'tabster';
import { useTabsterAttributes } from './useTabsterAttributes';
import { useTabster } from './useTabster';
/**
 * A hook that returns the necessary tabster attributes to support arrow key navigation
 * @param options - Options to configure keyboard navigation
 */

export const useArrowNavigationGroup = (options = {}) => {
  const {
    circular,
    axis,
    memorizeCurrent,
    tabbable,
    ignoreDefaultKeydown
  } = options;
  const tabster = useTabster();

  if (tabster) {
    getMover(tabster);
  }

  return useTabsterAttributes({
    mover: {
      cyclic: !!circular,
      direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : 'vertical'),
      memorizeCurrent: memorizeCurrent,
      tabbable: tabbable
    },
    ...(ignoreDefaultKeydown && {
      focusable: {
        ignoreKeydown: ignoreDefaultKeydown
      }
    })
  });
};

function axisToMoverDirection(axis) {
  switch (axis) {
    case 'horizontal':
      return Types.MoverDirections.Horizontal;

    case 'grid':
      return Types.MoverDirections.Grid;

    case 'both':
      return Types.MoverDirections.Both;

    case 'vertical':
    default:
      return Types.MoverDirections.Vertical;
  }
}
//# sourceMappingURL=useArrowNavigationGroup.js.map