{"version":3,"sources":["packages/react-components/react-shared-contexts/src/ThemeClassNameContext/ThemeClassNameContext.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,KAAA,gBAAA,OAAA,CAAA,OAAA,CAAA;AAIA;;;;;AAKG;;;AACH,MAAM,qBAAqB,gBAAG,KAAK,CAAC,aAAN,CAC5B,SAD4B,CAA9B;AAIA,MAAM,gCAAgC,GAAG,EAAzC;AAEa,OAAA,CAAA,sBAAA,GAAyB,qBAAqB,CAAC,QAA/C;AAEb;;AAEG;;AACH,SAAgB,iBAAhB,GAAiC;;;EAC/B,OAAO,CAAA,EAAA,GAAA,KAAK,CAAC,UAAN,CAAiB,qBAAjB,CAAA,MAAuC,IAAvC,IAAuC,EAAA,KAAA,KAAA,CAAvC,GAAuC,EAAvC,GAA2C,gCAAlD;AACD;;AAFD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["import * as React from 'react';\n\nexport type ThemeClassNameContextValue = string;\n\n/**\n * @internal\n * Used to provide a CSS class that applies theme css variables\n *\n * Useful for elements in the React tree (can read context) but not in the DOM Tree. E.g. Portals\n */\nconst ThemeClassNameContext = React.createContext<ThemeClassNameContextValue | undefined>(\n  undefined,\n) as React.Context<ThemeClassNameContextValue>;\n\nconst themeClassNameContextDefaultVaue = '';\n\nexport const ThemeClassNameProvider = ThemeClassNameContext.Provider;\n\n/**\n * @returns CSS class that applies css variables\n */\nexport function useThemeClassName(): ThemeClassNameContextValue {\n  return React.useContext(ThemeClassNameContext) ?? themeClassNameContextDefaultVaue;\n}\n"],"sourceRoot":"../src/"}