/*
This script translates an Excel sheet with various data types to a nested JSON string with max. depth level 2

Import this to Excel Automation
*/
function main(workbook: ExcelScript.Workbook): string {
  // Get the table on the current worksheet. The script needs to be executed under the "Automate" tab as Office Script.
  const table = workbook.getActiveWorksheet().getTables()[0];

  // Create an array of lines and add each row to it.
  let dataRows: TableData[] = [];
  const dataValues = table.getRangeBetweenHeaderAndTotal().getValues();

  // Loop to extract all Excel rows as JSON objects without any depth level
  for (let i = 0; i < dataValues.length; i++) {
    let row = dataValues[i];

    // Extract the data from the Excel sheet
    let jsonObject: TableData = {
      ID: row[table.getColumnByName("ID").getIndex()] as string,
      Parameter: row[table.getColumnByName("Parameter").getIndex()] as string,
      CategoryID: row[table.getColumnByName("CategoryID").getIndex()] as string,
      Question: row[table.getColumnByName("Question").getIndex()] as string,
      AnswerType: row[table.getColumnByName("AnswerType").getIndex()] as string,
      AnswerChoice: row[table.getColumnByName("AnswerChoice").getIndex()] as
        | string
        | string[]
        | null,
      Answers: row[table.getColumnByName("Answers").getIndex()] as unknown as
        | string[],
      Explanation: row[
        table.getColumnByName("Explanation").getIndex()
      ] as string,
      ExplanationLearnLink: row[
        table.getColumnByName("ExplanationLearnLink").getIndex()
      ] as string,
      ExplanationVideoLink: row[
        table.getColumnByName("ExplanationVideoLink").getIndex()
      ] as string,
    };

    // Based on the AnswerTypeID, the data type of AnswerChoice and Answers is casted and transformed
    if (jsonObject.AnswerChoice == null || jsonObject.AnswerChoice == "null") {
      jsonObject.AnswerChoice = null;
    } else if (jsonObject.AnswerType == "stringArray") {
      jsonObject.AnswerChoice = [];
    } else {
      jsonObject.AnswerChoice = row[
        table.getColumnByName("AnswerChoice").getIndex()
      ] as string;
    }

    jsonObject.Answers = String(jsonObject.Answers).split(
      ","
    ) as unknown as string[];

    dataRows.push(jsonObject);
  }

  // print everything for debugging
  // console.log(JSON.stringify(lines));

  let dataRowsWithDepth: TableDataWithDepth[] = [];

  // This loop iterates over all data rows and puts them in the right place by checking the provided depth level and
  // calling a lookup function to find the place of the correct parent element.
  for (let i = 0; i < dataRows.length; i++) {
    let currentElem = dataRows[i];
    // Depth Level 0 gets directly appended to our final output

    let indexStringArray = currentElem.ID.match(/.{1,2}/g);

    if (indexStringArray == null) {
      throw "Data is corrupted. Please check the ID column.";
    }

    // The depth level is calculated by the ID
    let depthLevel0Index = Number(indexStringArray[0]);
    let depthLevel1Index = Number(indexStringArray[1]);
    let depthLevel2Index = Number(indexStringArray[2]);

    // create the Element that needs to be pushed to the final output
    let pushElement: TableDataWithDepth = {
      Parent: currentElem as TableData,
      Childs: [],
    };

    // If the depth level is 0, the element is directly pushed to the final output
    if (
      depthLevel0Index != 0 &&
      depthLevel1Index == 0 &&
      depthLevel2Index == 0
    ) {
      dataRowsWithDepth.push(pushElement);
      // If the depth level is 1, the element is pushed to the correct parent element
    } else if (
      depthLevel0Index != 0 &&
      depthLevel1Index != 0 &&
      depthLevel2Index == 0
    ) {
      dataRowsWithDepth[depthLevel0Index - 1].Childs.push(pushElement);
      // If the depth level is 2, the element is pushed to the correct parent element
    } else if (
      depthLevel0Index != 0 &&
      depthLevel1Index != 0 &&
      depthLevel2Index != 0
    ) {
      dataRowsWithDepth[depthLevel0Index - 1].Childs[
        depthLevel1Index - 1
      ].Childs.push(pushElement);
    }
  }

  // print everything for debugging
  console.log(JSON.stringify(dataRowsWithDepth));

  // return the JSON string to access it with Power Automate
  return JSON.stringify(dataRowsWithDepth);
}

// Basic JSON ELement
interface TableData {
  ID: string;
  Parameter: string;
  CategoryID: string;
  Question: string;
  AnswerType: string;
  AnswerChoice: string | string[] | null;
  Answers: string[];
  Explanation: string;
  ExplanationLearnLink: string;
  ExplanationVideoLink: string;
}

// Data Structure with flexible depth levels
interface TableDataWithDepth {
  Parent: TableData;
  Childs: TableDataWithDepth[];
}
