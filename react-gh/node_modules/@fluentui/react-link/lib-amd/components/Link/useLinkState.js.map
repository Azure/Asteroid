{"version":3,"file":"useLinkState.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-link/src/components/Link/useLinkState.ts"],"names":[],"mappings":";;;;IAIA;;;OAGG;IACI,IAAM,qBAAqB,GAAG,UAAC,KAAgB;QAC5C,IAAA,QAAQ,GAAwB,KAAK,SAA7B,EAAE,iBAAiB,GAAK,KAAK,kBAAV,CAAW;QACxC,IAAA,KAAqC,KAAK,CAAC,IAAI,EAA7C,OAAO,aAAA,EAAE,SAAS,eAAA,EAAE,IAAI,UAAA,EAAE,IAAI,UAAe,CAAC;QAEtD,+CAA+C;QAC/C,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,GAAG,EAAE;YACzB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YACzD,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAErE,4DAA4D;YAC5D,IAAI,QAAQ,IAAI,iBAAiB,EAAE;gBACjC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC;aAClC;SACF;QACD,yCAAyC;aACpC;YACH,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,QAAQ,CAAC;SACpC;QAED,wGAAwG;QACxG,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,UAAC,EAA2D;YAC/E,IAAI,QAAQ,IAAI,iBAAiB,EAAE;gBACjC,EAAE,CAAC,cAAc,EAAE,CAAC;aACrB;iBAAM;gBACL,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,EAAE,CAAC,CAAC;aACf;QACH,CAAC,CAAC;QAEF,0GAA0G;QAC1G,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,UAAC,EAA8D;YACpF,IAAI,CAAC,QAAQ,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,qBAAK,IAAI,EAAE,CAAC,GAAG,KAAK,qBAAK,CAAC,EAAE;gBAC7E,EAAE,CAAC,cAAc,EAAE,CAAC;gBACpB,EAAE,CAAC,eAAe,EAAE,CAAC;aACtB;iBAAM;gBACL,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAG,EAAE,CAAC,CAAC;aACjB;QACH,CAAC,CAAC;QAEF,sDAAsD;QACtD,KAAK,CAAC,QAAQ,GAAG,QAAQ,IAAI,iBAAiB,CAAC;QAC/C,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,QAAQ,IAAI,iBAAiB,IAAI,SAAS,CAAC;QACzE,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,EAAE;YAC9B,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,iBAAiB,CAAC;SACtD;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IA9CW,QAAA,qBAAqB,yBA8ChC","sourcesContent":["import * as React from 'react';\nimport { Enter, Space } from '@fluentui/keyboard-keys';\nimport type { LinkState } from './Link.types';\n\n/**\n * The useLinkState_unstable hook processes the Link state.\n * @param state - Link state to mutate.\n */\nexport const useLinkState_unstable = (state: LinkState): LinkState => {\n  const { disabled, disabledFocusable } = state;\n  const { onClick, onKeyDown, role, type } = state.root;\n\n  // Add href and tabIndex=0 for anchor elements.\n  if (state.root.as === 'a') {\n    state.root.href = disabled ? undefined : state.root.href;\n    state.root.tabIndex = disabled && !disabledFocusable ? undefined : 0;\n\n    // Add role=\"link\" for disabled and disabledFocusable links.\n    if (disabled || disabledFocusable) {\n      state.root.role = role || 'link';\n    }\n  }\n  // Add type=\"button\" for button elements.\n  else {\n    state.root.type = type || 'button';\n  }\n\n  // Disallow click event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onClick = (ev: React.MouseEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if (disabled || disabledFocusable) {\n      ev.preventDefault();\n    } else {\n      onClick?.(ev);\n    }\n  };\n\n  // Disallow keydown event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onKeyDown = (ev: React.KeyboardEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if ((disabled || disabledFocusable) && (ev.key === Enter || ev.key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onKeyDown?.(ev);\n    }\n  };\n\n  // Set the aria-disabled and disabled props correctly.\n  state.disabled = disabled || disabledFocusable;\n  state.root['aria-disabled'] = disabled || disabledFocusable || undefined;\n  if (state.root.as === 'button') {\n    state.root.disabled = disabled && !disabledFocusable;\n  }\n\n  return state;\n};\n"]}