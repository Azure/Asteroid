"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLinkState_unstable = void 0;

const keyboard_keys_1 = /*#__PURE__*/require("@fluentui/keyboard-keys");
/**
 * The useLinkState_unstable hook processes the Link state.
 * @param state - Link state to mutate.
 */


const useLinkState_unstable = state => {
  const {
    disabled,
    disabledFocusable
  } = state;
  const {
    onClick,
    onKeyDown,
    role,
    type
  } = state.root; // Add href and tabIndex=0 for anchor elements.

  if (state.root.as === 'a') {
    state.root.href = disabled ? undefined : state.root.href;
    state.root.tabIndex = disabled && !disabledFocusable ? undefined : 0; // Add role="link" for disabled and disabledFocusable links.

    if (disabled || disabledFocusable) {
      state.root.role = role || 'link';
    }
  } // Add type="button" for button elements.
  else {
    state.root.type = type || 'button';
  } // Disallow click event when component is disabled and eat events when disabledFocusable is set to true.


  state.root.onClick = ev => {
    if (disabled || disabledFocusable) {
      ev.preventDefault();
    } else {
      onClick === null || onClick === void 0 ? void 0 : onClick(ev);
    }
  }; // Disallow keydown event when component is disabled and eat events when disabledFocusable is set to true.


  state.root.onKeyDown = ev => {
    if ((disabled || disabledFocusable) && (ev.key === keyboard_keys_1.Enter || ev.key === keyboard_keys_1.Space)) {
      ev.preventDefault();
      ev.stopPropagation();
    } else {
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);
    }
  }; // Set the aria-disabled and disabled props correctly.


  state.disabled = disabled || disabledFocusable;
  state.root['aria-disabled'] = disabled || disabledFocusable || undefined;

  if (state.root.as === 'button') {
    state.root.disabled = disabled && !disabledFocusable;
  }

  return state;
};

exports.useLinkState_unstable = useLinkState_unstable;
//# sourceMappingURL=useLinkState.js.map