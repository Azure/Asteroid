{"version":3,"sources":["packages/react-components/react-link/src/components/Link/useLinkStyles.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,YAAiC,YAAjC,QAAqD,gBAArD;AACA,SAAS,+BAAT,QAAgD,yBAAhD;AACA,SAAS,MAAT,QAAuB,uBAAvB;AAIA,OAAO,MAAM,cAAc,GAA8B;EACvD,IAAI,EAAE;AADiD,CAAlD;;AAIP,MAAM,SAAS,gBAAG;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA,EAAlB;;AA+EA,OAAO,MAAM,sBAAsB,GAAI,KAAD,IAAgC;EACpE,MAAM,MAAM,GAAG,SAAS,EAAxB;EACA,MAAM;IAAE,UAAF;IAAc,QAAd;IAAwB,MAAxB;IAAgC;EAAhC,IAAyC,KAA/C;EAEA,KAAK,CAAC,IAAN,CAAW,SAAX,GAAuB,YAAY,CACjC,cAAc,CAAC,IADkB,EAEjC,MAAM,CAAC,IAF0B,EAGjC,MAAM,CAAC,cAH0B,EAIjC,IAAI,CAAC,EAAL,KAAY,GAAZ,IAAmB,IAAI,CAAC,IAAxB,IAAgC,MAAM,CAAC,IAJN,EAKjC,IAAI,CAAC,EAAL,KAAY,QAAZ,IAAwB,MAAM,CAAC,MALE,EAMjC,UAAU,KAAK,QAAf,IAA2B,MAAM,CAAC,MAND,EAOjC,MAAM,IAAI,MAAM,CAAC,MAPgB,EAQjC,QAAQ,IAAI,MAAM,CAAC,QARc,EASjC,KAAK,CAAC,IAAN,CAAW,SATsB,CAAnC;EAYA,OAAO,KAAP;AACD,CAjBM","sourcesContent":["import { shorthands, makeStyles, mergeClasses } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from '@fluentui/react-tabster';\nimport { tokens } from '@fluentui/react-theme';\nimport type { LinkSlots, LinkState } from './Link.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\nexport const linkClassNames: SlotClassNames<LinkSlots> = {\n  root: 'fui-Link',\n};\n\nconst useStyles = makeStyles({\n  focusIndicator: createCustomFocusIndicatorStyle({\n    textDecorationColor: tokens.colorStrokeFocus2,\n    textDecorationLine: 'underline',\n    textDecorationStyle: 'double',\n  }),\n  // Common styles.\n  root: {\n    backgroundColor: 'transparent',\n    boxSizing: 'border-box',\n    color: tokens.colorBrandForegroundLink,\n    cursor: 'pointer',\n    display: 'inline',\n    fontFamily: tokens.fontFamilyBase,\n    fontSize: tokens.fontSizeBase300,\n    fontWeight: tokens.fontWeightRegular,\n    ...shorthands.margin(0),\n    ...shorthands.padding(0),\n    ...shorthands.overflow('inherit'),\n    textAlign: 'left',\n    textDecorationLine: 'none',\n    textDecorationThickness: tokens.strokeWidthThin,\n    textOverflow: 'inherit',\n    userSelect: 'text',\n\n    ':hover': {\n      textDecorationLine: 'underline',\n      color: tokens.colorBrandForegroundLinkHover,\n    },\n\n    ':active': {\n      textDecorationLine: 'underline',\n      color: tokens.colorBrandForegroundLinkPressed,\n    },\n  },\n  // Overrides when the Link renders as a button.\n  button: {\n    ...shorthands.borderStyle('none'),\n  },\n  // Overrides when an href is present so the Link renders as an anchor.\n  href: {\n    fontSize: 'inherit',\n  },\n  // Overrides when the Link appears subtle.\n  subtle: {\n    color: tokens.colorNeutralForeground2,\n\n    ':hover': {\n      textDecorationLine: 'underline',\n      color: tokens.colorNeutralForeground2Hover,\n    },\n\n    ':active': {\n      textDecorationLine: 'underline',\n      color: tokens.colorNeutralForeground2Pressed,\n    },\n  },\n  // Overrides when the Link is rendered inline within text.\n  inline: {\n    textDecorationLine: 'underline',\n  },\n  // Overrides when the Link is disabled.\n  disabled: {\n    textDecorationLine: 'none',\n    color: tokens.colorNeutralForegroundDisabled,\n    cursor: 'not-allowed',\n\n    ':hover': {\n      textDecorationLine: 'none',\n      color: tokens.colorNeutralForegroundDisabled,\n    },\n\n    ':active': {\n      textDecorationLine: 'none',\n      color: tokens.colorNeutralForegroundDisabled,\n    },\n  },\n});\n\nexport const useLinkStyles_unstable = (state: LinkState): LinkState => {\n  const styles = useStyles();\n  const { appearance, disabled, inline, root } = state;\n\n  state.root.className = mergeClasses(\n    linkClassNames.root,\n    styles.root,\n    styles.focusIndicator,\n    root.as === 'a' && root.href && styles.href,\n    root.as === 'button' && styles.button,\n    appearance === 'subtle' && styles.subtle,\n    inline && styles.inline,\n    disabled && styles.disabled,\n    state.root.className,\n  );\n\n  return state;\n};\n"],"sourceRoot":"../src/"}