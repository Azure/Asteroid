{"version":3,"file":"Popover.types.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-popover/src/components/Popover/Popover.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type {\n  PositioningVirtualElement,\n  PositioningShorthand,\n  SetVirtualMouseTarget,\n} from '@fluentui/react-positioning';\nimport type { PortalProps } from '@fluentui/react-portal';\nimport type { UseModalAttributesOptions } from '@fluentui/react-tabster';\n\n/**\n * Determines popover padding and arrow size\n */\nexport type PopoverSize = 'small' | 'medium' | 'large';\n\n/**\n * Popover Props\n */\nexport type PopoverProps = Pick<PortalProps, 'mountNode'> & {\n  /**\n   * A popover can appear styled with brand or inverted.\n   * When not specified, the default style is used.\n   */\n  appearance?: 'brand' | 'inverted';\n\n  /**\n   * Can contain two children including {@link PopoverTrigger} and {@link PopoverSurface}.\n   * Alternatively can only contain {@link PopoverSurface} if using a custom `target`.\n   */\n  children: [JSX.Element, JSX.Element] | JSX.Element;\n\n  /**\n   * Close when scroll outside of it\n   *\n   * @default false\n   */\n  closeOnScroll?: boolean;\n\n  /**\n   * Used to set the initial open state of the Popover in uncontrolled mode\n   *\n   * @default false\n   */\n  defaultOpen?: boolean;\n\n  /**\n   * Popovers are rendered out of DOM order on `document.body` by default, use this to render the popover in DOM order\n   *\n   * @default false\n   */\n  inline?: boolean;\n\n  /**\n   * Sets the delay for closing popover on mouse leave\n   */\n  mouseLeaveDelay?: number;\n\n  /**\n   * Display an arrow pointing to the target.\n   *\n   * @default false\n   */\n  withArrow?: boolean;\n\n  /**\n   * Call back when the component requests to change value\n   * The `open` value is used as a hint when directly controlling the component\n   */\n  onOpenChange?: (e: OpenPopoverEvents, data: OnOpenChangeData) => void;\n\n  /**\n   * Controls the opening of the Popover\n   *\n   * @default false\n   */\n  open?: boolean;\n\n  /**\n   * Flag to open the Popover as a context menu. Disables all other interactions\n   *\n   * @default false\n   */\n  openOnContext?: boolean;\n\n  /**\n   * Flag to open the Popover by hovering the trigger\n   *\n   * @default false\n   */\n  openOnHover?: boolean;\n\n  /**\n   * Configures the position of the Popover\n   */\n  positioning?: PositioningShorthand;\n\n  /**\n   * Determines popover padding and arrow size\n   *\n   * @default medium\n   */\n  size?: PopoverSize;\n\n  /**\n   * Should trap focus\n   *\n   * @default false\n   */\n  trapFocus?: UseModalAttributesOptions['trapFocus'];\n\n  /**\n   * Must be used with the `trapFocus` prop\n   * Enables older Fluent UI focus trap behavior where the user\n   * cannot tab into the window outside of the document. This is now\n   * non-standard behavior according to the [HTML dialog spec](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal)\n   * where the focus trap involves setting outside elements inert.\n   *\n   * @default false\n   */\n  legacyTrapFocus?: UseModalAttributesOptions['legacyTrapFocus'];\n};\n\n/**\n * Popover State\n */\nexport type PopoverState = Pick<\n  PopoverProps,\n  | 'appearance'\n  | 'mountNode'\n  | 'onOpenChange'\n  | 'openOnContext'\n  | 'openOnHover'\n  | 'trapFocus'\n  | 'withArrow'\n  | 'legacyTrapFocus'\n> &\n  Required<Pick<PopoverProps, 'inline' | 'open'>> &\n  Pick<PopoverProps, 'children'> & {\n    /**\n     * Ref of the pointing arrow\n     */\n    arrowRef: React.MutableRefObject<HTMLDivElement | null>;\n\n    /**\n     * Ref of the PopoverSurface\n     */\n    contentRef: React.MutableRefObject<HTMLElement | null>;\n\n    /**\n     * Anchors the popper to the mouse click for context events\n     */\n    contextTarget: PositioningVirtualElement | undefined;\n\n    popoverSurface: React.ReactElement | undefined;\n\n    popoverTrigger: React.ReactElement | undefined;\n\n    /**\n     * A callback to set the target of the popper to the mouse click for context events\n     */\n    setContextTarget: SetVirtualMouseTarget;\n\n    /**\n     * Callback to open/close the Popover\n     */\n    setOpen: (e: OpenPopoverEvents, open: boolean) => void;\n\n    size: NonNullable<PopoverProps['size']>;\n\n    /**\n     * Callback to toggle the open state of the Popover\n     */\n    toggleOpen: (e: OpenPopoverEvents) => void;\n\n    /**\n     * Ref of the PopoverTrigger\n     */\n    triggerRef: React.MutableRefObject<HTMLElement | null>;\n  };\n\n/**\n * Data attached to open/close events\n */\nexport type OnOpenChangeData = { open: boolean };\n\n/**\n * The supported events that will trigger open/close of the menu\n */\nexport type OpenPopoverEvents =\n  | MouseEvent\n  | TouchEvent\n  | React.FocusEvent<HTMLElement>\n  | React.KeyboardEvent<HTMLElement>\n  | React.MouseEvent<HTMLElement>;\n"]}