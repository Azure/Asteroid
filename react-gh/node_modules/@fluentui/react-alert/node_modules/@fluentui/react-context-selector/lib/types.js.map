{"version":3,"file":"types.js","sourceRoot":"../src/","sources":["packages/react-components/react-context-selector/src/types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n\n/**\n * @internal\n */\nexport type Context<Value> = React.Context<Value> & {\n  Provider: React.FC<React.ProviderProps<Value>>;\n  Consumer: never;\n};\n\nexport type ContextSelector<Value, SelectedValue> = (value: Value) => SelectedValue;\n\n/**\n * @internal\n */\nexport type ContextVersion = number;\n\n/**\n * @internal\n */\nexport type ContextValue<Value> = {\n  /** Holds a set of subscribers from components. */\n  listeners: ((payload: readonly [ContextVersion, Value]) => void)[];\n\n  /** Holds an actual value of React's context that will be propagated down for computations. */\n  value: React.MutableRefObject<Value>;\n\n  /** A version field is used to sync a context value and consumers. */\n  version: React.MutableRefObject<ContextVersion>;\n};\n\n/**\n * @internal\n */\nexport type ContextValues<Value> = ContextValue<Value> & {\n  /** List of listners to publish changes */\n  listeners: ((payload: readonly [ContextVersion, Record<string, Value>]) => void)[];\n};\n"]}