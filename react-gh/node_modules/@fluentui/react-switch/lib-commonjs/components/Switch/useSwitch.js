"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSwitch_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");

const react_label_1 = /*#__PURE__*/require("@fluentui/react-label");

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
/**
 * Create the state required to render Switch.
 *
 * The returned state can be modified with hooks such as useSwitchStyles_unstable,
 * before being passed to renderSwitch_unstable.
 *
 * @param props - props from this instance of Switch
 * @param ref - reference to `<input>` element of Switch
 */


const useSwitch_unstable = (props, ref) => {
  const {
    checked,
    defaultChecked,
    disabled,
    labelPosition = 'after',
    onChange,
    required
  } = props;
  const nativeProps = react_utilities_1.getPartitionedNativeProps({
    props,
    primarySlotTagName: 'input',
    excludedPropNames: ['checked', 'defaultChecked', 'onChange']
  });
  const id = react_utilities_1.useId('switch-', nativeProps.primary.id);
  const root = react_utilities_1.resolveShorthand(props.root, {
    defaultProps: {
      ref: react_tabster_1.useFocusWithin(),
      ...nativeProps.root
    },
    required: true
  });
  const indicator = react_utilities_1.resolveShorthand(props.indicator, {
    defaultProps: {
      'aria-hidden': true,
      children: React.createElement(react_icons_1.CircleFilled, null)
    },
    required: true
  });
  const input = react_utilities_1.resolveShorthand(props.input, {
    defaultProps: {
      checked,
      defaultChecked,
      id,
      ref,
      role: 'switch',
      type: 'checkbox',
      ...nativeProps.primary
    },
    required: true
  });
  input.onChange = react_utilities_1.mergeCallbacks(input.onChange, ev => onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
    checked: ev.currentTarget.checked
  }));
  const label = react_utilities_1.resolveShorthand(props.label, {
    defaultProps: {
      disabled,
      htmlFor: id,
      required,
      size: 'medium'
    }
  });
  return {
    labelPosition,
    //Slots definition
    components: {
      root: 'div',
      indicator: 'div',
      input: 'input',
      label: react_label_1.Label
    },
    root,
    indicator,
    input,
    label
  };
};

exports.useSwitch_unstable = useSwitch_unstable;
//# sourceMappingURL=useSwitch.js.map