{"version":3,"file":"useFocusFirstElement.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-dialog/src/utils/useFocusFirstElement.ts"],"names":[],"mappings":";;;;IAMA;;OAEG;IACH,SAAgB,oBAAoB,CAAC,IAAa,EAAE,SAA0B;QACpE,IAAA,kBAAkB,GAAK,+BAAe,EAAE,mBAAtB,CAAuB;QACzC,IAAA,cAAc,GAAK,0CAAkB,EAAE,eAAzB,CAA0B;QAChD,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAuB,IAAI,CAAC,CAAC;QAC3D,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,EAAe,CAAC;QAE/C,KAAK,CAAC,SAAS,CAAC;;YACd,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,MAAA,UAAU,CAAC,OAAO,0CAAE,KAAK,EAAE,CAAC;aACpC;YACD,UAAU,CAAC,OAAO,GAAG,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,aAAwC,CAAC;YAC9E,IAAM,OAAO,GAAG,SAAS,CAAC,OAAO,IAAI,kBAAkB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC3E,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,KAAK,EAAE,CAAC;aACjB;iBAAM;gBACL,MAAA,SAAS,CAAC,OAAO,0CAAE,KAAK,EAAE,CAAC,CAAC,qDAAqD;gBACjF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;oBACzC,sCAAsC;oBACtC,OAAO,CAAC,IAAI,CACV;wBACE,mGAAmG;wBACnG,kGAAkG;qBACnG,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;iBACH;aACF;QACH,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;QAE1D,OAAO,SAAS,CAAC;IACnB,CAAC;IA7BD,oDA6BC","sourcesContent":["import * as React from 'react';\nimport { useFocusFinders } from '@fluentui/react-tabster';\nimport { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport type { DialogSurfaceElement } from '../DialogSurface';\nimport type { DialogModalType } from '../Dialog';\n\n/**\n * Focus first element on content when dialog is opened,\n */\nexport function useFocusFirstElement(open: boolean, modalType: DialogModalType) {\n  const { findFirstFocusable } = useFocusFinders();\n  const { targetDocument } = useFluent_unstable();\n  const dialogRef = React.useRef<DialogSurfaceElement>(null);\n  const triggerRef = React.useRef<HTMLElement>();\n\n  React.useEffect(() => {\n    if (!open) {\n      return triggerRef.current?.focus();\n    }\n    triggerRef.current = targetDocument?.activeElement as HTMLElement | undefined;\n    const element = dialogRef.current && findFirstFocusable(dialogRef.current);\n    if (element) {\n      element.focus();\n    } else {\n      dialogRef.current?.focus(); // https://github.com/microsoft/fluentui/issues/25150\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          [\n            '@fluentui/react-dialog: a Dialog should have at least one focusable element inside DialogSurface.',\n            'Please add at least a close button either on `DialogTitle` action slot or inside `DialogActions`',\n          ].join('\\n'),\n        );\n      }\n    }\n  }, [findFirstFocusable, open, modalType, targetDocument]);\n\n  return dialogRef;\n}\n"]}