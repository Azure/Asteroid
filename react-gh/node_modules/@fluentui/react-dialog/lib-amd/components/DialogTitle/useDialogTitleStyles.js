define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "../../contexts/constants", "@fluentui/react-tabster"], function (require, exports, tslib_1, react_1, react_theme_1, constants_1, react_tabster_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDialogTitleStyles_unstable = exports.useDialogTitleInternalStyles = exports.dialogTitleClassNames = void 0;
    exports.dialogTitleClassNames = {
        root: 'fui-DialogTitle',
        action: 'fui-DialogTitle__action',
    };
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle1), react_1.shorthands.gridArea(constants_1.TITLE_GRID_AREA)),
        rootWithoutCloseButton: tslib_1.__assign({}, react_1.shorthands.gridArea(constants_1.TITLE_GRID_AREA, constants_1.TITLE_GRID_AREA, constants_1.TITLE_ACTION_GRID_AREA, constants_1.TITLE_ACTION_GRID_AREA)),
        action: tslib_1.__assign({}, react_1.shorthands.gridArea(constants_1.TITLE_ACTION_GRID_AREA)),
    });
    /**
     * Styles to be applied on internal elements used by default action on non-modal Dialog
     * @internal
     */
    exports.useDialogTitleInternalStyles = react_1.makeStyles({
        button: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'relative', boxSizing: 'content-box', backgroundColor: 'inherit', color: 'inherit', fontFamily: 'inherit', fontSize: 'inherit', cursor: 'pointer', lineHeight: 0 }, react_1.shorthands.overflow('visible')), react_1.shorthands.padding(0)), react_1.shorthands.borderStyle('none')), { WebkitAppearance: 'button', textAlign: 'unset' }), react_tabster_1.createFocusOutlineStyle()),
    });
    /**
     * Apply styling to the DialogTitle slots based on the state
     */
    var useDialogTitleStyles_unstable = function (state) {
        var styles = useStyles();
        state.root.className = react_1.mergeClasses(exports.dialogTitleClassNames.root, styles.root, !state.action && styles.rootWithoutCloseButton, state.root.className);
        if (state.action) {
            state.action.className = react_1.mergeClasses(exports.dialogTitleClassNames.action, styles.action, state.action.className);
        }
        return state;
    };
    exports.useDialogTitleStyles_unstable = useDialogTitleStyles_unstable;
});
//# sourceMappingURL=useDialogTitleStyles.js.map