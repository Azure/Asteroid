define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useBadgeStyles_unstable = exports.badgeClassNames = void 0;
    exports.badgeClassNames = {
        root: 'fui-Badge',
        icon: 'fui-Badge__icon',
    };
    // The text content of the badge has additional horizontal padding, but there is no `text` slot to add that padding to.
    // Instead, add extra padding to the root, and a negative margin on the icon to "remove" the extra padding on the icon.
    var textPadding = react_theme_1.tokens.spacingHorizontalXXS;
    var useRootStyles = react_1.makeStyles({
        base: tslib_1.__assign({ display: 'inline-flex', boxSizing: 'border-box', alignItems: 'center', justifyContent: 'center', position: 'relative' }, react_theme_1.typographyStyles.caption1Strong),
        fontSmallToTiny: tslib_1.__assign({}, react_theme_1.typographyStyles.caption2Strong),
        // size
        tiny: {
            width: '6px',
            height: '6px',
            fontSize: '4px',
            lineHeight: '4px',
        },
        'extra-small': {
            width: '10px',
            height: '10px',
            fontSize: '6px',
            lineHeight: '6px',
        },
        small: tslib_1.__assign({ minWidth: '16px', height: '16px' }, react_1.shorthands.padding(0, "calc(" + react_theme_1.tokens.spacingHorizontalXXS + " + " + textPadding + ")")),
        medium: tslib_1.__assign({ height: '20px', minWidth: '20px' }, react_1.shorthands.padding(0, "calc(" + react_theme_1.tokens.spacingHorizontalXS + " + " + textPadding + ")")),
        large: tslib_1.__assign({ minWidth: '24px', height: '24px' }, react_1.shorthands.padding(0, "calc(" + react_theme_1.tokens.spacingHorizontalXS + " + " + textPadding + ")")),
        'extra-large': tslib_1.__assign({ minWidth: '32px', height: '32px' }, react_1.shorthands.padding(0, "calc(" + react_theme_1.tokens.spacingHorizontalSNudge + " + " + textPadding + ")")),
        // shape
        square: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusNone)),
        rounded: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)),
        roundedSmallToTiny: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusSmall)),
        circular: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)),
        // border (all appearances except ghost)
        border: {
            // The border is applied in an :after pseudo-element because it should not affect layout.
            // The padding and size of the badge should be the same regardless of whether or not it has a border.
            '::after': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ content: '""', position: 'absolute', top: 0, left: 0, bottom: 0, right: 0 }, react_1.shorthands.borderStyle('solid')), react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThin)), react_1.shorthands.borderColor('inherit')), react_1.shorthands.borderRadius('inherit')),
        },
        // appearance: filled
        filled: tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStroke)),
        'filled-brand': {
            backgroundColor: react_theme_1.tokens.colorBrandBackground,
            color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
        },
        'filled-danger': {
            backgroundColor: react_theme_1.tokens.colorPaletteRedBackground3,
            color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
        },
        'filled-important': {
            backgroundColor: react_theme_1.tokens.colorNeutralForeground1,
            color: react_theme_1.tokens.colorNeutralBackground1,
        },
        'filled-informative': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground5,
            color: react_theme_1.tokens.colorNeutralForeground3,
        },
        'filled-severe': {
            backgroundColor: react_theme_1.tokens.colorPaletteDarkOrangeBackground3,
            color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
        },
        'filled-subtle': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground1,
            color: react_theme_1.tokens.colorNeutralForeground1,
        },
        'filled-success': {
            backgroundColor: react_theme_1.tokens.colorPaletteGreenBackground3,
            color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
        },
        'filled-warning': {
            backgroundColor: react_theme_1.tokens.colorPaletteYellowBackground3,
            color: react_theme_1.tokens.colorNeutralForeground1Static,
        },
        // appearance: ghost
        ghost: {
        // No shared colors between ghost appearances
        },
        'ghost-brand': {
            color: react_theme_1.tokens.colorBrandForeground1,
        },
        'ghost-danger': {
            color: react_theme_1.tokens.colorPaletteRedForeground3,
        },
        'ghost-important': {
            color: react_theme_1.tokens.colorNeutralForeground1,
        },
        'ghost-informative': {
            color: react_theme_1.tokens.colorNeutralForeground3,
        },
        'ghost-severe': {
            color: react_theme_1.tokens.colorPaletteDarkOrangeForeground3,
        },
        'ghost-subtle': {
            color: react_theme_1.tokens.colorNeutralForegroundStaticInverted,
        },
        'ghost-success': {
            color: react_theme_1.tokens.colorPaletteGreenForeground3,
        },
        'ghost-warning': {
            color: react_theme_1.tokens.colorPaletteYellowForeground2,
        },
        // appearance: outline
        outline: tslib_1.__assign({}, react_1.shorthands.borderColor('currentColor')),
        'outline-brand': {
            color: react_theme_1.tokens.colorBrandForeground1,
        },
        'outline-danger': tslib_1.__assign({ color: react_theme_1.tokens.colorPaletteRedForeground3 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder2)),
        'outline-important': tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground3 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeAccessible)),
        'outline-informative': tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground3 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke2)),
        'outline-severe': {
            color: react_theme_1.tokens.colorPaletteDarkOrangeForeground3,
        },
        'outline-subtle': {
            color: react_theme_1.tokens.colorNeutralForegroundStaticInverted,
        },
        'outline-success': tslib_1.__assign({ color: react_theme_1.tokens.colorPaletteGreenForeground3 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteGreenBorder2)),
        'outline-warning': {
            color: react_theme_1.tokens.colorPaletteYellowForeground2,
        },
        // appearance: tint
        tint: {
        // No shared colors between tint appearances
        },
        'tint-brand': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorBrandBackground2, color: react_theme_1.tokens.colorBrandForeground2 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorBrandStroke2)),
        'tint-danger': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorPaletteRedBackground1, color: react_theme_1.tokens.colorPaletteRedForeground1 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder1)),
        'tint-important': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralForeground3, color: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStroke)),
        'tint-informative': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground4, color: react_theme_1.tokens.colorNeutralForeground3 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke2)),
        'tint-severe': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorPaletteDarkOrangeBackground1, color: react_theme_1.tokens.colorPaletteDarkOrangeForeground1 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteDarkOrangeBorder1)),
        'tint-subtle': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1, color: react_theme_1.tokens.colorNeutralForeground3 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke2)),
        'tint-success': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorPaletteGreenBackground1, color: react_theme_1.tokens.colorPaletteGreenForeground1 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteGreenBorder1)),
        'tint-warning': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorPaletteYellowBackground1, color: react_theme_1.tokens.colorPaletteYellowForeground1 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteYellowBorder1)),
    });
    var useIconStyles = react_1.makeStyles({
        base: tslib_1.__assign({ display: 'flex', lineHeight: '1' }, react_1.shorthands.margin(0, "calc(-1 * " + textPadding + ")")),
        beforeText: {
            marginRight: "calc(" + react_theme_1.tokens.spacingHorizontalXXS + " + " + textPadding + ")",
        },
        afterText: {
            marginLeft: "calc(" + react_theme_1.tokens.spacingHorizontalXXS + " + " + textPadding + ")",
        },
        beforeTextXL: {
            marginRight: "calc(" + react_theme_1.tokens.spacingHorizontalXS + " + " + textPadding + ")",
        },
        afterTextXL: {
            marginLeft: "calc(" + react_theme_1.tokens.spacingHorizontalXS + " + " + textPadding + ")",
        },
        // size
        tiny: {
            fontSize: '6px',
        },
        'extra-small': {
            fontSize: '10px',
        },
        small: {
            fontSize: '12px',
        },
        medium: {
            fontSize: '12px',
        },
        large: {
            fontSize: '16px',
        },
        'extra-large': {
            fontSize: '20px',
        },
    });
    /**
     * Applies style classnames to slots
     */
    var useBadgeStyles_unstable = function (state) {
        var rootStyles = useRootStyles();
        var smallToTiny = state.size === 'small' || state.size === 'extra-small' || state.size === 'tiny';
        state.root.className = react_1.mergeClasses(exports.badgeClassNames.root, rootStyles.base, smallToTiny && rootStyles.fontSmallToTiny, rootStyles[state.size], rootStyles[state.shape], state.shape === 'rounded' && smallToTiny && rootStyles.roundedSmallToTiny, state.appearance !== 'ghost' && rootStyles.border, rootStyles[state.appearance], rootStyles[state.appearance + "-" + state.color], state.root.className);
        var iconStyles = useIconStyles();
        if (state.icon) {
            var iconPositionClass = void 0;
            if (state.root.children) {
                if (state.size === 'extra-large') {
                    iconPositionClass = state.iconPosition === 'after' ? iconStyles.afterTextXL : iconStyles.beforeTextXL;
                }
                else {
                    iconPositionClass = state.iconPosition === 'after' ? iconStyles.afterText : iconStyles.beforeText;
                }
            }
            state.icon.className = react_1.mergeClasses(exports.badgeClassNames.icon, iconStyles.base, iconPositionClass, iconStyles[state.size], state.icon.className);
        }
        return state;
    };
    exports.useBadgeStyles_unstable = useBadgeStyles_unstable;
});
//# sourceMappingURL=useBadgeStyles.js.map