"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSelect_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");
/**
 * Create the state required to render Select.
 *
 * The returned state can be modified with hooks such as useSelectStyles,
 * before being passed to renderSelect.
 *
 * @param props - props from this instance of Select
 * @param ref - reference to the `<select>` element in Select
 */


const useSelect_unstable = (props, ref) => {
  const {
    defaultValue,
    value,
    select,
    icon,
    root,
    appearance = 'outline',
    onChange,
    size = 'medium'
  } = props;
  const nativeProps = react_utilities_1.getPartitionedNativeProps({
    props,
    primarySlotTagName: 'select',
    excludedPropNames: ['appearance', 'defaultValue', 'onChange', 'size', 'value']
  });
  const state = {
    size,
    appearance,
    components: {
      root: 'span',
      select: 'select',
      icon: 'span'
    },
    select: react_utilities_1.resolveShorthand(select, {
      required: true,
      defaultProps: {
        defaultValue,
        value,
        ref,
        ...nativeProps.primary
      }
    }),
    icon: react_utilities_1.resolveShorthand(icon, {
      required: true,
      defaultProps: {
        children: React.createElement(react_icons_1.ChevronDownRegular, null)
      }
    }),
    root: react_utilities_1.resolveShorthand(root, {
      required: true,
      defaultProps: nativeProps.root
    })
  };
  state.select.onChange = react_utilities_1.useEventCallback(event => {
    onChange === null || onChange === void 0 ? void 0 : onChange(event, {
      value: event.target.value
    });
  });
  return state;
};

exports.useSelect_unstable = useSelect_unstable;
//# sourceMappingURL=useSelect.js.map