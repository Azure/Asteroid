"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTabList_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
/**
 * Create the state required to render TabList.
 *
 * The returned state can be modified with hooks such as useTabListStyles_unstable,
 * before being passed to renderTabList_unstable.
 *
 * @param props - props from this instance of TabList
 * @param ref - reference to root HTMLElement of TabList
 */


const useTabList_unstable = (props, ref) => {
  const {
    appearance = 'transparent',
    reserveSelectedTabSpace = true,
    disabled = false,
    onTabSelect,
    size = 'medium',
    vertical = false
  } = props;
  const innerRef = React.useRef(null);
  const focusAttributes = react_tabster_1.useArrowNavigationGroup({
    circular: true,
    axis: vertical ? 'vertical' : 'horizontal',
    memorizeCurrent: true
  });
  const [selectedValue, setSelectedValue] = react_utilities_1.useControllableState({
    state: props.selectedValue,
    defaultState: props.defaultSelectedValue,
    initialState: undefined
  }); // considered usePrevious, but it is sensitive to re-renders
  // this could cause the previous to move to current in the case where the tab list re-renders.
  // these refs avoid getRegisteredTabs changing when selectedValue changes and causing
  // renders for tabs that have not changed.

  const currentSelectedValue = React.useRef(undefined);
  const previousSelectedValue = React.useRef(undefined);
  React.useEffect(() => {
    previousSelectedValue.current = currentSelectedValue.current;
    currentSelectedValue.current = selectedValue;
  }, [selectedValue]);
  const onSelect = react_utilities_1.useEventCallback((event, data) => {
    setSelectedValue(data.value);
    onTabSelect === null || onTabSelect === void 0 ? void 0 : onTabSelect(event, data);
  });
  const registeredTabs = React.useRef({});
  const onRegister = react_utilities_1.useEventCallback(data => {
    registeredTabs.current[JSON.stringify(data.value)] = data;
  });
  const onUnregister = react_utilities_1.useEventCallback(data => {
    delete registeredTabs.current[JSON.stringify(data.value)];
  });
  const getRegisteredTabs = React.useCallback(() => {
    return {
      selectedValue: currentSelectedValue.current,
      previousSelectedValue: previousSelectedValue.current,
      registeredTabs: registeredTabs.current
    };
  }, []);
  return {
    components: {
      root: 'div'
    },
    root: react_utilities_1.getNativeElementProps('div', {
      ref: react_utilities_1.useMergedRefs(ref, innerRef),
      role: 'tablist',
      ...focusAttributes,
      ...props
    }),
    appearance,
    reserveSelectedTabSpace,
    disabled,
    selectedValue,
    size,
    vertical,
    onRegister,
    onUnregister,
    onSelect,
    getRegisteredTabs
  };
};

exports.useTabList_unstable = useTabList_unstable;
//# sourceMappingURL=useTabList.js.map