define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-icons", "@fluentui/react-tabster", "@fluentui/react-theme", "../../selectable/index"], function (require, exports, tslib_1, react_1, react_icons_1, react_tabster_1, react_theme_1, index_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMenuItemStyles_unstable = exports.menuItemClassNames = void 0;
    exports.menuItemClassNames = {
        root: 'fui-MenuItem',
        icon: 'fui-MenuItem__icon',
        checkmark: 'fui-MenuItem__checkmark',
        submenuIndicator: 'fui-MenuItem__submenuIndicator',
        content: 'fui-MenuItem__content',
        secondaryContent: 'fui-MenuItem__secondaryContent',
    };
    var useStyles = react_1.makeStyles({
        focusIndicator: react_tabster_1.createFocusOutlineStyle(),
        // TODO: this should be extracted to another package
        resetButton: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ boxSizing: 'content-box', backgroundColor: 'inherit', color: 'inherit', fontFamily: 'inherit', fontSize: 'inherit', lineHeight: 'normal' }, react_1.shorthands.borderColor('transparent')), react_1.shorthands.overflow('visible')), react_1.shorthands.padding(0)), { WebkitAppearance: 'button', textAlign: 'unset' }),
        root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { position: 'relative', color: react_theme_1.tokens.colorNeutralForeground2, backgroundColor: react_theme_1.tokens.colorNeutralBackground1, paddingRight: '10px', paddingLeft: '10px', height: '32px', display: 'flex', alignItems: 'center', fontSize: react_theme_1.tokens.fontSizeBase300, cursor: 'pointer' }), react_1.shorthands.gap('4px')), { ':hover': (_a = {
                    backgroundColor: react_theme_1.tokens.colorNeutralBackground1Hover,
                    color: react_theme_1.tokens.colorNeutralForeground2Hover
                },
                _a["& ." + react_icons_1.iconFilledClassName] = {
                    display: 'inline',
                },
                _a["& ." + react_icons_1.iconRegularClassName] = {
                    display: 'none',
                },
                _a["& ." + exports.menuItemClassNames.icon] = {
                    color: react_theme_1.tokens.colorNeutralForeground2BrandSelected,
                },
                _a), userSelect: 'none' }),
        content: {
            paddingLeft: '2px',
            paddingRight: '2px',
            backgroundColor: 'transparent',
            flexGrow: 1,
        },
        secondaryContent: {
            paddingLeft: '2px',
            paddingRight: '2px',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':hover': {
                color: react_theme_1.tokens.colorNeutralForeground3Hover,
            },
            ':focus': {
                color: react_theme_1.tokens.colorNeutralForeground3Hover,
            },
        },
        icon: {
            width: '20px',
            height: '20px',
            fontSize: '20px',
            lineHeight: 0,
            alignItems: 'center',
            display: 'inline-flex',
            justifyContent: 'center',
        },
        submenuIndicator: {
            width: '20px',
            height: '20px',
            fontSize: '20px',
            lineHeight: 0,
            alignItems: 'center',
            display: 'inline-flex',
            justifyContent: 'center',
        },
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':hover': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
            ':focus': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
    });
    /** Applies style classnames to slots */
    var useMenuItemStyles_unstable = function (state) {
        var styles = useStyles();
        state.root.className = react_1.mergeClasses(exports.menuItemClassNames.root, state.isNativeButton && styles.resetButton, styles.root, styles.focusIndicator, state.disabled && styles.disabled, state.root.className);
        if (state.content) {
            state.content.className = react_1.mergeClasses(exports.menuItemClassNames.content, styles.content, state.content.className);
        }
        if (state.checkmark) {
            state.checkmark.className = react_1.mergeClasses(exports.menuItemClassNames.checkmark, state.checkmark.className);
        }
        if (state.secondaryContent) {
            state.secondaryContent.className = react_1.mergeClasses(exports.menuItemClassNames.secondaryContent, !state.disabled && styles.secondaryContent, state.secondaryContent.className);
        }
        if (state.icon) {
            state.icon.className = react_1.mergeClasses(exports.menuItemClassNames.icon, styles.icon, state.icon.className);
        }
        if (state.submenuIndicator) {
            state.submenuIndicator.className = react_1.mergeClasses(exports.menuItemClassNames.submenuIndicator, styles.submenuIndicator, state.submenuIndicator.className);
        }
        index_1.useCheckmarkStyles_unstable(state);
    };
    exports.useMenuItemStyles_unstable = useMenuItemStyles_unstable;
});
//# sourceMappingURL=useMenuItemStyles.js.map