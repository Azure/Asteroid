{"version":3,"file":"useOnMenuEnter.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-menu/src/utils/useOnMenuEnter.ts"],"names":[],"mappings":";;;;IAKA;;OAEG;IACU,QAAA,gBAAgB,GAAG,cAAc,CAAC;IAE/C;;;;;;;;;;OAUG;IACI,IAAM,mBAAmB,GAAG,UAAC,OAAyC;QACnE,IAAA,IAAI,GAAkC,OAAO,KAAzC,EAAE,QAAQ,GAAwB,OAAO,SAA/B,EAAE,OAAO,GAAe,OAAO,QAAtB,EAAE,QAAQ,GAAK,OAAO,SAAZ,CAAa;QAEtD,gFAAgF;QAChF,IAAM,QAAQ,GAAG,kCAAgB,CAAC,UAAC,EAAc;;YAC/C,IAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAM,eAAe,GAAG,EAAE,CAAC,MAAqB,CAAC;YAEjD,sEAAsE;YACtE,0EAA0E;YAC1E,4DAA4D;YAC5D,IAAM,gBAAgB,GAAG,CAAC,8BAAe,CAAC,MAAA,UAAU,CAAC,OAAO,mCAAI,IAAI,EAAE,eAAe,CAAC,CAAC;YACvF,IAAI,gBAAgB,IAAI,CAAC,QAAQ,EAAE;gBACjC,QAAQ,CAAC,EAAE,CAAC,CAAC;aACd;QACH,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,SAAS,CAAC;YACd,kCAAkC;YAClC,IAAI,OAAO,IAAI,IAAI,EAAE;gBACnB,OAAO;aACR;YAUD,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO,CAAC,gBAAgB,CAAC,wBAAgB,EAAE,QAA4B,CAAC,CAAC;aAC1E;YAED,OAAO;gBACL,OAAO,CAAC,mBAAmB,CAAC,wBAAgB,EAAE,QAA4B,CAAC,CAAC;YAC9E,CAAC,CAAC;QACJ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;IAvCW,QAAA,mBAAmB,uBAuC9B;IAEF;;;;OAIG;IACI,IAAM,sBAAsB,GAAG,UAAC,EAAe,EAAE,WAAuB;QAC7E,EAAE,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,wBAAgB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,WAAW,aAAA,EAAE,EAAE,CAAC,CAAC,CAAC;IAClG,CAAC,CAAC;IAFW,QAAA,sBAAsB,0BAEjC","sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { elementContains } from '@fluentui/react-portal';\nimport type { UseOnClickOrScrollOutsideOptions } from '@fluentui/react-utilities';\n\n/**\n * Name of the custom event\n */\nexport const MENU_ENTER_EVENT = 'fuimenuenter';\n\n/**\n * This hook works similarly to @see {useOnClickOutside}\n *\n * Problem: Trying to behave the same as system menus:\n * When the mouse leaves a stack of nested menus the stack should not dismiss.\n * However if the mouse leaves a stack of menus and enters a parent menu all its children menu should dismiss.\n *\n * We don't use the native mouseenter event because it would trigger too many times in the document\n * Instead, dispatch custom DOM event from the menu so that it can bubble\n * Each nested menu can use the listener to check if the event is from a child or parent menu\n */\nexport const useOnMenuMouseEnter = (options: UseOnClickOrScrollOutsideOptions) => {\n  const { refs, callback, element, disabled } = options;\n\n  // Keep mouse event here because this is essentially a custom 'mouseenter' event\n  const listener = useEventCallback((ev: MouseEvent) => {\n    const popoverRef = refs[0];\n    const someMenuPopover = ev.target as HTMLElement;\n\n    // someMenu is a child -> will always be contained because of vParents\n    // someMenu is a parent -> will always not be contained because no vParent\n    // someMenu is the current popover -> it will contain itself\n    const isOutsidePopover = !elementContains(popoverRef.current ?? null, someMenuPopover);\n    if (isOutsidePopover && !disabled) {\n      callback(ev);\n    }\n  });\n\n  React.useEffect(() => {\n    // eslint-disable-next-line eqeqeq\n    if (element == null) {\n      return;\n    }\n\n    /**\n     * Because `addEventListener` type override falls back to 2nd definition (evt name is unknown string literal)\n     * evt is being typed as a base class of MouseEvent -> `Event`.\n     * This type is used to override `listener` calls to make TS happy\n     */\n\n    type ListenerOverride = (evt: Event) => void;\n\n    if (!disabled) {\n      element.addEventListener(MENU_ENTER_EVENT, listener as ListenerOverride);\n    }\n\n    return () => {\n      element.removeEventListener(MENU_ENTER_EVENT, listener as ListenerOverride);\n    };\n  }, [listener, element, disabled]);\n};\n\n/**\n * Dispatches the custom MouseEvent enter event. Similar to calling `el.click()`\n * @param el element for the event target\n * @param nativeEvent the native mouse event this is mapped to\n */\nexport const dispatchMenuEnterEvent = (el: HTMLElement, nativeEvent: MouseEvent) => {\n  el.dispatchEvent(new CustomEvent(MENU_ENTER_EVENT, { bubbles: true, detail: { nativeEvent } }));\n};\n"]}