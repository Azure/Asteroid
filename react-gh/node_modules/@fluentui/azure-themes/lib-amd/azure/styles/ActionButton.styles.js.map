{"version":3,"file":"ActionButton.styles.js","sourceRoot":"../src/","sources":["azure/styles/ActionButton.styles.ts"],"names":[],"mappings":";;;;IAKO,IAAM,kBAAkB,GAAG,UAAC,KAAa;QACtC,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;QACjC,IAAM,sBAAsB,GAAG,cAAyC,CAAC;QACzE,IAAM,SAAS,GAAG,UAAC,KAAa;YAC9B,OAAO;gBACL,SAAS,EAAE;oBACT,iBAAiB,EAAE,EAAE,KAAK,OAAA,EAAE;iBAC7B;aACF,CAAC;QACJ,CAAC,CAAC;QACF,OAAO;YACL,IAAI,qBACF,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EACrC,MAAM,EAAE,cAAc,CAAC,gBAAgB,EACvC,eAAe,EAAE,cAAc,CAAC,gBAAgB,EAChD,KAAK,EAAE,cAAc,CAAC,UAAU,IAC7B,SAAS,CAAC,sBAAsB,CAAC,cAAc,CAAC,CACpD;YACD,YAAY,qBACV,MAAM,EAAK,cAAc,CAAC,WAAW,eAAU,sBAAsB,CAAC,2BAA2B,gBAAa,EAC9G,eAAe,EAAE,cAAc,CAAC,+BAA+B,EAC/D,KAAK,EAAE,cAAc,CAAC,yBAAyB,IAC5C,SAAS,CAAC,cAAc,CAAC,yBAAyB,CAAC,CACvD;YACD,WAAW,EAAE;gBACX,eAAe,EAAE,cAAc,CAAC,uBAAuB;gBACvD,KAAK,EAAE,cAAc,CAAC,iBAAiB;gBACvC,SAAS,EAAE;oBACT,QAAQ,uBACH,SAAS,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,CAC3D;iBACF;aACF;YACD,WAAW,EAAE;gBACX,eAAe,EAAE,cAAc,CAAC,uBAAuB;gBACvD,KAAK,EAAE,cAAc,CAAC,iBAAiB;gBACvC,SAAS,EAAE;oBACT,SAAS,uBACJ,SAAS,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,CAC3D;iBACF;aACF;YACD,WAAW,EAAE;gBACX,MAAM,EAAK,cAAc,CAAC,WAAW,eAAU,sBAAsB,CAAC,kBAAoB;aAC3F;YACD,WAAW,qBACT,MAAM,EAAK,cAAc,CAAC,WAAW,eAAU,cAAc,CAAC,iBAAmB,EACjF,eAAe,EAAE,cAAc,CAAC,uBAAuB,EACvD,KAAK,EAAE,cAAc,CAAC,iBAAiB,IACpC,SAAS,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,CAC3D;YACD,kBAAkB,EAAE;gBAClB,MAAM,EAAK,cAAc,CAAC,WAAW,eAAU,cAAc,CAAC,iBAAmB;gBACjF,eAAe,EAAE,cAAc,CAAC,uBAAuB;gBACvD,KAAK,EAAE,cAAc,CAAC,iBAAiB;gBACvC,SAAS,EAAE;oBACT,QAAQ,uBACH,SAAS,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,CAC3D;iBACF;aACF;YACD,kBAAkB,EAAE;gBAClB,MAAM,EAAK,cAAc,CAAC,WAAW,eAAU,cAAc,CAAC,iBAAmB;gBACjF,eAAe,EAAE,cAAc,CAAC,uBAAuB;gBACvD,KAAK,EAAE,cAAc,CAAC,iBAAiB;gBACvC,SAAS,EAAE;oBACT,SAAS,uBACJ,SAAS,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,CAC3D;iBACF;aACF;SACF,CAAC;IACJ,CAAC,CAAC;IAxEW,QAAA,kBAAkB,sBAwE7B","sourcesContent":["import { IButtonStyles } from '@fluentui/react/lib/Button';\nimport { ITheme } from '@fluentui/react/lib/Styling';\nimport * as StyleConstants from '../Constants';\nimport { IExtendedSemanticColors } from '../IExtendedSemanticColors';\n\nexport const ActionButtonStyles = (theme: ITheme): Partial<IButtonStyles> => {\n  const { semanticColors } = theme;\n  const extendedSemanticColors = semanticColors as IExtendedSemanticColors;\n  const iconColor = (color: string) => {\n    return {\n      selectors: {\n        '.ms-Button-icon': { color },\n      },\n    };\n  };\n  return {\n    root: {\n      fontSize: theme.fonts.medium.fontSize,\n      height: StyleConstants.commandBarHeight,\n      backgroundColor: semanticColors.buttonBackground,\n      color: semanticColors.buttonText,\n      ...iconColor(extendedSemanticColors.iconButtonFill),\n    },\n    rootDisabled: {\n      border: `${StyleConstants.borderWidth} solid ${extendedSemanticColors.primaryButtonBorderDisabled} !important`,\n      backgroundColor: semanticColors.primaryButtonBackgroundDisabled,\n      color: semanticColors.primaryButtonTextDisabled,\n      ...iconColor(semanticColors.primaryButtonTextDisabled),\n    },\n    rootHovered: {\n      backgroundColor: semanticColors.buttonBackgroundHovered,\n      color: semanticColors.buttonTextHovered,\n      selectors: {\n        ':hover': {\n          ...iconColor(extendedSemanticColors.iconButtonFillHovered),\n        },\n      },\n    },\n    rootPressed: {\n      backgroundColor: semanticColors.buttonBackgroundPressed,\n      color: semanticColors.buttonTextPressed,\n      selectors: {\n        ':active': {\n          ...iconColor(extendedSemanticColors.iconButtonFillHovered),\n        },\n      },\n    },\n    rootFocused: {\n      border: `${StyleConstants.borderWidth} solid ${extendedSemanticColors.inputBorderPressed}`,\n    },\n    rootChecked: {\n      border: `${StyleConstants.borderWidth} solid ${semanticColors.buttonTextPressed}`,\n      backgroundColor: semanticColors.buttonBackgroundPressed,\n      color: semanticColors.buttonTextPressed,\n      ...iconColor(extendedSemanticColors.iconButtonFillHovered),\n    },\n    rootCheckedHovered: {\n      border: `${StyleConstants.borderWidth} solid ${semanticColors.buttonTextHovered}`,\n      backgroundColor: semanticColors.buttonBackgroundHovered,\n      color: semanticColors.buttonTextHovered,\n      selectors: {\n        ':hover': {\n          ...iconColor(extendedSemanticColors.iconButtonFillHovered),\n        },\n      },\n    },\n    rootCheckedPressed: {\n      border: `${StyleConstants.borderWidth} solid ${semanticColors.buttonTextPressed}`,\n      backgroundColor: semanticColors.buttonBackgroundPressed,\n      color: semanticColors.buttonTextPressed,\n      selectors: {\n        ':active': {\n          ...iconColor(extendedSemanticColors.iconButtonFillHovered),\n        },\n      },\n    },\n  };\n};\n"]}