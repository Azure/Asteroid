define(["require", "exports", "tslib", "@fluentui/react-tabster", "@fluentui/react-shared-contexts", "@fluentui/react-utilities", "react", "./useFluentProviderThemeStyleTag"], function (require, exports, tslib_1, react_tabster_1, react_shared_contexts_1, react_utilities_1, React, useFluentProviderThemeStyleTag_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useFluentProvider_unstable = void 0;
    /**
     * Create the state required to render FluentProvider.
     *
     * The returned state can be modified with hooks such as useFluentProviderStyles_unstable,
     * before being passed to renderFluentProvider_unstable.
     *
     * @param props - props from this instance of FluentProvider
     * @param ref - reference to root HTMLElement of FluentProvider
     */
    var useFluentProvider_unstable = function (props, ref) {
        var parentContext = react_shared_contexts_1.useFluent_unstable();
        var parentTheme = useTheme();
        /**
         * TODO: add merge functions to "dir" merge,
         * nesting providers with the same "dir" should not add additional attributes to DOM
         * see https://github.com/microsoft/fluentui/blob/0dc74a19f3aa5a058224c20505016fbdb84db172/packages/fluentui/react-northstar/src/utils/mergeProviderContexts.ts#L89-L93
         */
        var _a = props.applyStylesToPortals, applyStylesToPortals = _a === void 0 ? true : _a, _b = props.dir, dir = _b === void 0 ? parentContext.dir : _b, _c = props.targetDocument, targetDocument = _c === void 0 ? parentContext.targetDocument : _c, theme = props.theme;
        var mergedTheme = mergeThemes(parentTheme, theme);
        React.useEffect(function () {
            if (process.env.NODE_ENV !== 'production' && mergedTheme === undefined) {
                // eslint-disable-next-line no-console
                console.warn("\n      FluentProvider: your \"theme\" is not defined !\n      =============================================\n      Make sure your root FluentProvider has set a theme or you're setting the theme in your child FluentProvider.\n      ");
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        return {
            applyStylesToPortals: applyStylesToPortals,
            dir: dir,
            targetDocument: targetDocument,
            theme: mergedTheme,
            themeClassName: useFluentProviderThemeStyleTag_1.useFluentProviderThemeStyleTag({ theme: mergedTheme, targetDocument: targetDocument }),
            components: {
                root: 'div',
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign(tslib_1.__assign({}, props), { dir: dir, ref: react_utilities_1.useMergedRefs(ref, react_tabster_1.useFocusVisible()) })),
        };
    };
    exports.useFluentProvider_unstable = useFluentProvider_unstable;
    function mergeThemes(a, b) {
        // Merge impacts perf: we should like to avoid it if it's possible
        if (a && b) {
            return tslib_1.__assign(tslib_1.__assign({}, a), b);
        }
        if (a) {
            return a;
        }
        return b;
    }
    function useTheme() {
        return React.useContext(react_shared_contexts_1.ThemeContext_unstable);
    }
});
//# sourceMappingURL=useFluentProvider.js.map