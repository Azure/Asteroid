"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFluentProviderThemeStyleTag = void 0;

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const React = /*#__PURE__*/require("react");

const useFluentProviderStyles_1 = /*#__PURE__*/require("./useFluentProviderStyles"); // String concatenation is used to prevent bundlers to complain with older versions of React


const useInsertionEffect = React['useInsertion' + 'Effect'] ? React['useInsertion' + 'Effect'] : react_utilities_1.useIsomorphicLayoutEffect;

const createStyleTag = (target, id) => {
  if (!target) {
    return undefined;
  }

  const tag = target.createElement('style');
  tag.setAttribute('id', id);
  target.head.appendChild(tag);
  return tag;
};

const insertSheet = (tag, rule) => {
  const sheet = tag.sheet;

  if (sheet) {
    if (sheet.cssRules.length > 0) {
      sheet.deleteRule(0);
    }

    sheet.insertRule(rule, 0);
  } else if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.error('FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.');
  }
};
/**
 * Writes a theme as css variables in a style tag on the provided targetDocument as a rule applied to a CSS class
 *
 * @returns CSS class to apply the rule
 */


const useFluentProviderThemeStyleTag = options => {
  const {
    targetDocument,
    theme
  } = options;
  const styleTag = React.useRef();
  const styleTagId = react_utilities_1.useId(useFluentProviderStyles_1.fluentProviderClassNames.root);
  const cssVarsAsString = React.useMemo(() => {
    return theme ? Object.keys(theme).reduce((cssVarRule, cssVar) => {
      cssVarRule += `--${cssVar}: ${theme[cssVar]}; `;
      return cssVarRule;
    }, '') : '';
  }, [theme]);
  const rule = `.${styleTagId} { ${cssVarsAsString} }`;
  useInsertionEffect(() => {
    styleTag.current = createStyleTag(targetDocument, styleTagId);

    if (styleTag.current) {
      insertSheet(styleTag.current, rule);
      return () => {
        var _a;

        (_a = styleTag.current) === null || _a === void 0 ? void 0 : _a.remove();
      };
    }
  }, [styleTagId, targetDocument, rule]);
  return styleTagId;
};

exports.useFluentProviderThemeStyleTag = useFluentProviderThemeStyleTag;
//# sourceMappingURL=useFluentProviderThemeStyleTag.js.map