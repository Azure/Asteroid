"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFocusFinders = void 0;

const React = /*#__PURE__*/require("react");

const useTabster_1 = /*#__PURE__*/require("./useTabster");
/**
 * Returns a set of helper functions that will traverse focusable elements in the context of a root DOM element
 */


const useFocusFinders = () => {
  const tabster = useTabster_1.useTabster(); // Narrow props for now and let need dictate additional props in the future

  const findAllFocusable = React.useCallback((container, acceptCondition) => (tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findAll({
    container,
    acceptCondition
  })) || [], [tabster]);
  const findFirstFocusable = React.useCallback(container => tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findFirst({
    container
  }), [tabster]);
  const findLastFocusable = React.useCallback(container => tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findLast({
    container
  }), [tabster]);
  const findNextFocusable = React.useCallback((currentElement, options = {}) => tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findNext({
    currentElement,
    ...options
  }), [tabster]);
  const findPrevFocusable = React.useCallback((currentElement, options = {}) => tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findPrev({
    currentElement,
    ...options
  }), [tabster]);
  return {
    findAllFocusable,
    findFirstFocusable,
    findLastFocusable,
    findNextFocusable,
    findPrevFocusable
  };
};

exports.useFocusFinders = useFocusFinders;
//# sourceMappingURL=useFocusFinders.js.map