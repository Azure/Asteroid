"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useArrowNavigationGroup = void 0;

const tabster_1 = /*#__PURE__*/require("tabster");

const useTabsterAttributes_1 = /*#__PURE__*/require("./useTabsterAttributes");

const useTabster_1 = /*#__PURE__*/require("./useTabster");
/**
 * A hook that returns the necessary tabster attributes to support arrow key navigation
 * @param options - Options to configure keyboard navigation
 */


const useArrowNavigationGroup = (options = {}) => {
  const {
    circular,
    axis,
    memorizeCurrent,
    tabbable,
    ignoreDefaultKeydown
  } = options;
  const tabster = useTabster_1.useTabster();

  if (tabster) {
    tabster_1.getMover(tabster);
  }

  return useTabsterAttributes_1.useTabsterAttributes({
    mover: {
      cyclic: !!circular,
      direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : 'vertical'),
      memorizeCurrent: memorizeCurrent,
      tabbable: tabbable
    },
    ...(ignoreDefaultKeydown && {
      focusable: {
        ignoreKeydown: ignoreDefaultKeydown
      }
    })
  });
};

exports.useArrowNavigationGroup = useArrowNavigationGroup;

function axisToMoverDirection(axis) {
  switch (axis) {
    case 'horizontal':
      return tabster_1.Types.MoverDirections.Horizontal;

    case 'grid':
      return tabster_1.Types.MoverDirections.Grid;

    case 'both':
      return tabster_1.Types.MoverDirections.Both;

    case 'vertical':
    default:
      return tabster_1.Types.MoverDirections.Vertical;
  }
}
//# sourceMappingURL=useArrowNavigationGroup.js.map