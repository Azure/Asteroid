"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useKeyboardNavAttribute = void 0;

const keyborg_1 = /*#__PURE__*/require("keyborg");

const react_1 = /*#__PURE__*/require("react");

const constants_1 = /*#__PURE__*/require("../focus/constants");

const react_shared_contexts_1 = /*#__PURE__*/require("@fluentui/react-shared-contexts");
/**
 * Instantiates [keyborg](https://github.com/microsoft/keyborg) and adds `data-keyboard-nav`
 * attribute to a referenced element to ensure keyboard navigation awareness
 * synced to keyborg logic without having to cause a re-render on react tree.
 */


function useKeyboardNavAttribute() {
  const {
    targetDocument
  } = react_shared_contexts_1.useFluent_unstable();
  const keyborg = react_1.useMemo(() => targetDocument && keyborg_1.createKeyborg(targetDocument.defaultView), [targetDocument]);
  const ref = react_1.useRef(null);
  react_1.useEffect(() => {
    if (keyborg) {
      setBooleanAttribute(ref, constants_1.KEYBOARD_NAV_ATTRIBUTE, keyborg.isNavigatingWithKeyboard());

      const cb = next => {
        setBooleanAttribute(ref, constants_1.KEYBOARD_NAV_ATTRIBUTE, next);
      };

      keyborg.subscribe(cb);
      return () => keyborg.unsubscribe(cb);
    }
  }, [keyborg]);
  return ref;
}

exports.useKeyboardNavAttribute = useKeyboardNavAttribute;

function setBooleanAttribute(elementRef, attribute, value) {
  if (!elementRef.current) {
    return;
  }

  if (value) {
    elementRef.current.setAttribute(attribute, '');
  } else {
    elementRef.current.removeAttribute(attribute);
  }
}
//# sourceMappingURL=useKeyboardNavAttribute.js.map