{"version":3,"file":"createFocusOutlineStyle.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-tabster/src/focus/createFocusOutlineStyle.ts"],"names":[],"mappings":";;;;IAwBA;;;;;;OAMG;IACH,IAAM,qBAAqB,GAAG,UAAC,OAAiC;;QACtD,IAAA,aAAa,GAAgD,OAAO,cAAvD,EAAE,YAAY,GAAkC,OAAO,aAAzC,EAAE,aAAa,GAAmB,OAAO,cAA1B,EAAE,YAAY,GAAK,OAAO,aAAZ,CAAa;QAE7E,IAAM,gBAAgB,GAAG,CAAA,MAAC,aAAoC,0CAAE,GAAG,KAAI,aAAa,CAAC;QACrF,IAAM,mBAAmB,GAAG,CAAA,MAAC,aAAoC,0CAAE,MAAM,KAAI,aAAa,CAAC;QAC3F,IAAM,iBAAiB,GAAG,CAAA,MAAC,aAAoC,0CAAE,IAAI,KAAI,aAAa,CAAC;QACvF,IAAM,kBAAkB,GAAG,CAAA,MAAC,aAAoC,0CAAE,KAAK,KAAI,aAAa,CAAC;QAEzF,6CACK,kBAAU,CAAC,WAAW,CAAC,aAAa,CAAC,KACxC,SAAS,yFACP,OAAO,EAAE,IAAI,EACb,QAAQ,EAAE,UAAU,EACpB,aAAa,EAAE,MAAM,EACrB,MAAM,EAAE,CAAC,IAEN,kBAAU,CAAC,WAAW,CAAC,OAAO,CAAC,GAC/B,kBAAU,CAAC,WAAW,CAAC,YAAY,CAAC,GACpC,kBAAU,CAAC,YAAY,CAAC,aAAa,CAAC,GACtC,kBAAU,CAAC,WAAW,CAAC,YAAY,CAAC,KAEvC,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,MAAI,YAAc,CAAC,CAAC,CAAC,gBAAc,YAAY,WAAM,gBAAgB,MAAG,EAC9F,MAAM,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,MAAI,YAAc,CAAC,CAAC,CAAC,gBAAc,YAAY,WAAM,mBAAmB,MAAG,EACpG,IAAI,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,MAAI,YAAc,CAAC,CAAC,CAAC,gBAAc,YAAY,WAAM,iBAAiB,MAAG,EAChG,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,MAAI,YAAc,CAAC,CAAC,CAAC,gBAAc,YAAY,WAAM,kBAAkB,MAAG,OAEpG;IACJ,CAAC,CAAC;IAEF;;;;;;OAMG;IACI,IAAM,uBAAuB,GAAG,UAAC,EAGU;YAHV,qBAGJ,0BAAc,KAAA,EAFhD,gBAAkC,EAAlC,QAAQ,mBAAG,0BAAc,CAAC,QAAQ,KAAA,EAClC,aAA4B,EAA5B,KAAK,mBAAG,0BAAc,CAAC,KAAK,KAAA;QAE5B,OAAA,iEAA+B,CAC7B,qBAAqB,oBACnB,YAAY,EAAE,oBAAM,CAAC,iBAAiB,EACtC,aAAa,EAAE,oBAAM,CAAC,kBAAkB;YACxC,wDAAwD;YACxD,YAAY,EAAE,KAAK,IAChB,KAAK,EACR,EACF,EAAE,QAAQ,UAAA,EAAE,CACb;IATD,CASC,CAAC;IAbS,QAAA,uBAAuB,2BAahC","sourcesContent":["import { tokens } from '@fluentui/react-theme';\nimport { shorthands } from '@griffel/react';\nimport type { GriffelStyle } from '@griffel/react';\nimport {\n  createCustomFocusIndicatorStyle,\n  CreateCustomFocusIndicatorStyleOptions,\n} from './createCustomFocusIndicatorStyle';\nimport { defaultOptions } from './constants';\n\nexport type FocusOutlineOffset = Record<'top' | 'bottom' | 'left' | 'right', string>;\nexport type FocusOutlineStyleOptions = {\n  /**\n   * Only property not supported by the native CSS `outline`, if this is no longer needed\n   * we can just go native instead\n   */\n  outlineRadius: string;\n  outlineColor: string;\n  outlineWidth: string;\n  outlineOffset?: string | FocusOutlineOffset;\n};\nexport interface CreateFocusOutlineStyleOptions extends CreateCustomFocusIndicatorStyleOptions {\n  style?: Partial<FocusOutlineStyleOptions>;\n}\n\n/**\n * NOTE: the element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configures the style of the focus outline\n * @returns focus outline styles object\n */\nconst getFocusOutlineStyles = (options: FocusOutlineStyleOptions): GriffelStyle => {\n  const { outlineRadius, outlineColor, outlineOffset, outlineWidth } = options;\n\n  const outlineOffsetTop = (outlineOffset as FocusOutlineOffset)?.top || outlineOffset;\n  const outlineOffsetBottom = (outlineOffset as FocusOutlineOffset)?.bottom || outlineOffset;\n  const outlineOffsetLeft = (outlineOffset as FocusOutlineOffset)?.left || outlineOffset;\n  const outlineOffsetRight = (outlineOffset as FocusOutlineOffset)?.right || outlineOffset;\n\n  return {\n    ...shorthands.borderColor('transparent'),\n    '::after': {\n      content: '\"\"',\n      position: 'absolute',\n      pointerEvents: 'none',\n      zIndex: 1,\n\n      ...shorthands.borderStyle('solid'),\n      ...shorthands.borderWidth(outlineWidth),\n      ...shorthands.borderRadius(outlineRadius),\n      ...shorthands.borderColor(outlineColor),\n\n      top: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetTop})`,\n      bottom: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetBottom})`,\n      left: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetLeft})`,\n      right: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetRight})`,\n    },\n  };\n};\n\n/**\n * NOTE: The element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configure the style of the focus outline\n * @returns focus outline styles object for @see makeStyles\n */\nexport const createFocusOutlineStyle = ({\n  selector = defaultOptions.selector,\n  style = defaultOptions.style,\n}: CreateFocusOutlineStyleOptions = defaultOptions): GriffelStyle =>\n  createCustomFocusIndicatorStyle(\n    getFocusOutlineStyles({\n      outlineColor: tokens.colorStrokeFocus2,\n      outlineRadius: tokens.borderRadiusMedium,\n      // FIXME: tokens.strokeWidthThick causes some weird bugs\n      outlineWidth: '2px',\n      ...style,\n    }),\n    { selector },\n  );\n"]}