{"version":3,"file":"useFocusFinders.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-tabster/src/hooks/useFocusFinders.ts"],"names":[],"mappings":";;;;IAIA;;OAEG;IACI,IAAM,eAAe,GAAG;QAC7B,IAAM,OAAO,GAAG,uBAAU,EAAE,CAAC;QAE7B,2EAA2E;QAC3E,IAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CACxC,UAAC,SAAsB,EAAE,eAA8C;YACrE,OAAA,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,OAAO,CAAC,EAAE,SAAS,WAAA,EAAE,eAAe,iBAAA,EAAE,CAAC,KAAI,EAAE;QAAhE,CAAgE,EAClE,CAAC,OAAO,CAAC,CACV,CAAC;QAEF,IAAM,kBAAkB,GAAG,KAAK,CAAC,WAAW,CAC1C,UAAC,SAAsB,IAAK,OAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,SAAS,CAAC,EAAE,SAAS,WAAA,EAAE,CAAC,EAA3C,CAA2C,EACvE,CAAC,OAAO,CAAC,CACV,CAAC;QAEF,IAAM,iBAAiB,GAAG,KAAK,CAAC,WAAW,CAAC,UAAC,SAAsB,IAAK,OAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,QAAQ,CAAC,EAAE,SAAS,WAAA,EAAE,CAAC,EAA1C,CAA0C,EAAE;YAClH,OAAO;SACR,CAAC,CAAC;QAEH,IAAM,iBAAiB,GAAG,KAAK,CAAC,WAAW,CACzC,UAAC,cAA2B,EAAE,OAA2D;YAA3D,wBAAA,EAAA,YAA2D;YACvF,OAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,QAAQ,oBAAG,cAAc,gBAAA,IAAK,OAAO,EAAG;QAA3D,CAA2D,EAC7D,CAAC,OAAO,CAAC,CACV,CAAC;QAEF,IAAM,iBAAiB,GAAG,KAAK,CAAC,WAAW,CACzC,UAAC,cAA2B,EAAE,OAA2D;YAA3D,wBAAA,EAAA,YAA2D;YACvF,OAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,QAAQ,oBAAG,cAAc,gBAAA,IAAK,OAAO,EAAG;QAA3D,CAA2D,EAC7D,CAAC,OAAO,CAAC,CACV,CAAC;QAEF,OAAO;YACL,gBAAgB,kBAAA;YAChB,kBAAkB,oBAAA;YAClB,iBAAiB,mBAAA;YACjB,iBAAiB,mBAAA;YACjB,iBAAiB,mBAAA;SAClB,CAAC;IACJ,CAAC,CAAC;IAtCW,QAAA,eAAe,mBAsC1B","sourcesContent":["import * as React from 'react';\nimport { Types as TabsterTypes } from 'tabster';\nimport { useTabster } from './useTabster';\n\n/**\n * Returns a set of helper functions that will traverse focusable elements in the context of a root DOM element\n */\nexport const useFocusFinders = () => {\n  const tabster = useTabster();\n\n  // Narrow props for now and let need dictate additional props in the future\n  const findAllFocusable = React.useCallback(\n    (container: HTMLElement, acceptCondition?: (el: HTMLElement) => boolean) =>\n      tabster?.focusable.findAll({ container, acceptCondition }) || [],\n    [tabster],\n  );\n\n  const findFirstFocusable = React.useCallback(\n    (container: HTMLElement) => tabster?.focusable.findFirst({ container }),\n    [tabster],\n  );\n\n  const findLastFocusable = React.useCallback((container: HTMLElement) => tabster?.focusable.findLast({ container }), [\n    tabster,\n  ]);\n\n  const findNextFocusable = React.useCallback(\n    (currentElement: HTMLElement, options: Pick<TabsterTypes.FindNextProps, 'container'> = {}) =>\n      tabster?.focusable.findNext({ currentElement, ...options }),\n    [tabster],\n  );\n\n  const findPrevFocusable = React.useCallback(\n    (currentElement: HTMLElement, options: Pick<TabsterTypes.FindNextProps, 'container'> = {}) =>\n      tabster?.focusable.findPrev({ currentElement, ...options }),\n    [tabster],\n  );\n\n  return {\n    findAllFocusable,\n    findFirstFocusable,\n    findLastFocusable,\n    findNextFocusable,\n    findPrevFocusable,\n  };\n};\n"]}