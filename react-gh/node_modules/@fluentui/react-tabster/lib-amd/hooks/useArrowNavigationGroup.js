define(["require", "exports", "tslib", "tabster", "./useTabsterAttributes", "./useTabster"], function (require, exports, tslib_1, tabster_1, useTabsterAttributes_1, useTabster_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useArrowNavigationGroup = void 0;
    /**
     * A hook that returns the necessary tabster attributes to support arrow key navigation
     * @param options - Options to configure keyboard navigation
     */
    var useArrowNavigationGroup = function (options) {
        if (options === void 0) { options = {}; }
        var circular = options.circular, axis = options.axis, memorizeCurrent = options.memorizeCurrent, tabbable = options.tabbable, ignoreDefaultKeydown = options.ignoreDefaultKeydown;
        var tabster = useTabster_1.useTabster();
        if (tabster) {
            tabster_1.getMover(tabster);
        }
        return useTabsterAttributes_1.useTabsterAttributes(tslib_1.__assign({ mover: {
                cyclic: !!circular,
                direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : 'vertical'),
                memorizeCurrent: memorizeCurrent,
                tabbable: tabbable,
            } }, (ignoreDefaultKeydown && {
            focusable: {
                ignoreKeydown: ignoreDefaultKeydown,
            },
        })));
    };
    exports.useArrowNavigationGroup = useArrowNavigationGroup;
    function axisToMoverDirection(axis) {
        switch (axis) {
            case 'horizontal':
                return tabster_1.Types.MoverDirections.Horizontal;
            case 'grid':
                return tabster_1.Types.MoverDirections.Grid;
            case 'both':
                return tabster_1.Types.MoverDirections.Both;
            case 'vertical':
            default:
                return tabster_1.Types.MoverDirections.Vertical;
        }
    }
});
//# sourceMappingURL=useArrowNavigationGroup.js.map