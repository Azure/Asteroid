"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInfoButton_unstable = void 0;

const React = /*#__PURE__*/require("react");

const DefaultInfoButtonIcons_1 = /*#__PURE__*/require("./DefaultInfoButtonIcons");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_popover_1 = /*#__PURE__*/require("@fluentui/react-popover");

const react_utilities_2 = /*#__PURE__*/require("@fluentui/react-utilities");

const infoButtonIconMap = {
  small: /*#__PURE__*/React.createElement(DefaultInfoButtonIcons_1.DefaultInfoButtonIcon12, null),
  medium: /*#__PURE__*/React.createElement(DefaultInfoButtonIcons_1.DefaultInfoButtonIcon16, null),
  large: /*#__PURE__*/React.createElement(DefaultInfoButtonIcons_1.DefaultInfoButtonIcon20, null)
};
const popoverSizeMap = {
  small: 'small',
  medium: 'small',
  large: 'medium'
};
/**
 * Create the state required to render InfoButton.
 *
 * The returned state can be modified with hooks such as useInfoButtonStyles_unstable,
 * before being passed to renderInfoButton_unstable.
 *
 * @param props - props from this instance of InfoButton
 * @param ref - reference to root HTMLElement of InfoButton
 */

const useInfoButton_unstable = (props, ref) => {
  const {
    size = 'medium'
  } = props;
  const state = {
    size,
    components: {
      root: 'button',
      popover: react_popover_1.Popover,
      content: react_popover_1.PopoverSurface
    },
    root: react_utilities_1.getNativeElementProps('button', {
      children: infoButtonIconMap[size],
      type: 'button',
      ...props,
      ref
    }),
    popover: react_utilities_1.resolveShorthand(props.popover, {
      required: true,
      defaultProps: {
        children: React.createElement(React.Fragment, null),
        positioning: 'above-start',
        size: popoverSizeMap[size],
        withArrow: true
      }
    }),
    content: react_utilities_1.resolveShorthand(props.content, {
      required: true,
      defaultProps: {
        role: 'dialog'
      }
    })
  };
  const [popoverOpen, setPopoverOpen] = react_utilities_2.useControllableState({
    state: state.popover.open,
    defaultState: state.popover.defaultOpen,
    initialState: false
  });
  state.popover.open = popoverOpen;
  state.popover.onOpenChange = react_utilities_1.mergeCallbacks(state.popover.onOpenChange, (e, data) => setPopoverOpen(data.open));
  return state;
};

exports.useInfoButton_unstable = useInfoButton_unstable;
//# sourceMappingURL=useInfoButton.js.map