{"version":3,"file":"ComboboxBase.types.js","sourceRoot":"../src/","sources":["packages/react-components/react-combobox/src/utils/ComboboxBase.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { PositioningShorthand } from '@fluentui/react-positioning';\nimport type { ComboboxContextValue } from '../contexts/ComboboxContext';\nimport type { OptionValue, OptionCollectionState } from '../utils/OptionCollection.types';\nimport { SelectionProps, SelectionState } from '../utils/Selection.types';\n\n/**\n * ComboboxBase Props\n * Shared types between Combobox and Dropdown components\n */\nexport type ComboboxBaseProps = SelectionProps & {\n  /**\n   * Controls the colors and borders of the combobox trigger.\n   * @default 'outline'\n   */\n  appearance?: 'filled-darker' | 'filled-lighter' | 'outline' | 'underline';\n\n  /**\n   * The default open state when open is uncontrolled\n   */\n  defaultOpen?: boolean;\n\n  /**\n   * The default value displayed in the trigger input or button when the combobox's value is uncontrolled\n   */\n  defaultValue?: string;\n\n  /**\n   * Render the combobox's popup inline in the DOM.\n   * This has accessibility benefits, particularly for touch screen readers.\n   */\n  inlinePopup?: boolean;\n\n  /**\n   * Callback when the open/closed state of the dropdown changes\n   */\n  onOpenChange?: (e: ComboboxBaseOpenEvents, data: ComboboxBaseOpenChangeData) => void;\n\n  /**\n   * Sets the open/closed state of the dropdown.\n   * Use together with onOpenChange to fully control the dropdown's visibility\n   */\n  open?: boolean;\n\n  /**\n   * If set, the placeholder will show when no value is selected\n   */\n  placeholder?: string;\n\n  /**\n   * Configure the positioning of the combobox dropdown\n   *\n   * @defaultvalue below\n   */\n  positioning?: PositioningShorthand;\n\n  /**\n   * Controls the size of the combobox faceplate\n   * @default 'medium'\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * The value displayed by the Combobox.\n   * Use this with `onOptionSelect` to directly control the displayed value string\n   */\n  value?: string;\n};\n\n/**\n * State used in rendering Combobox\n */\nexport type ComboboxBaseState = Required<Pick<ComboboxBaseProps, 'appearance' | 'open' | 'inlinePopup' | 'size'>> &\n  Pick<ComboboxBaseProps, 'placeholder' | 'value' | 'multiselect'> &\n  OptionCollectionState &\n  SelectionState & {\n    /* Option data for the currently highlighted option (not the selected option) */\n    activeOption?: OptionValue;\n\n    // Whether the keyboard focus outline style should be visible\n    focusVisible: boolean;\n\n    // whether the combobox/dropdown currently has focus\n    hasFocus: boolean;\n\n    /* Whether the next blur event should be ignored, and the combobox/dropdown will not close.*/\n    ignoreNextBlur: React.MutableRefObject<boolean>;\n\n    setActiveOption(option?: OptionValue): void;\n\n    setFocusVisible(focusVisible: boolean): void;\n\n    setHasFocus(hasFocus: boolean): void;\n\n    setOpen(event: ComboboxBaseOpenEvents, newState: boolean): void;\n\n    setValue(newValue: string | undefined): void;\n  };\n\n/**\n * Data for the Combobox onOpenChange event.\n */\nexport type ComboboxBaseOpenChangeData = {\n  open: boolean;\n};\n\n/* Possible event types for onOpen */\nexport type ComboboxBaseOpenEvents =\n  | React.MouseEvent<HTMLElement>\n  | React.KeyboardEvent<HTMLElement>\n  | React.FocusEvent<HTMLElement>;\n\nexport type ComboboxBaseContextValues = {\n  combobox: ComboboxContextValue;\n};\n"]}