"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEventCallback = void 0;

const React = /*#__PURE__*/require("react");

const useIsomorphicLayoutEffect_1 = /*#__PURE__*/require("./useIsomorphicLayoutEffect");
/**
 * @internal
 * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback
 *
 * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when
 * e.g. user props are dependencies which could change on every render
 * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently
 *
 * This should not be used often, but can be a useful re-render optimization since the callback is a ref and
 * will not be invalidated between re-renders
 *
 * @param fn - The callback function that will be used
 */


const useEventCallback = fn => {
  const callbackRef = React.useRef(() => {
    throw new Error('Cannot call an event handler while rendering');
  });
  useIsomorphicLayoutEffect_1.useIsomorphicLayoutEffect(() => {
    callbackRef.current = fn;
  }, [fn]);
  return React.useCallback((...args) => {
    const callback = callbackRef.current;
    return callback(...args);
  }, [callbackRef]);
};

exports.useEventCallback = useEventCallback;
//# sourceMappingURL=useEventCallback.js.map