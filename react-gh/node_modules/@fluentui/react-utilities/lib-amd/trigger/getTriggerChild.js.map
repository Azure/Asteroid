{"version":3,"file":"getTriggerChild.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-utilities/src/trigger/getTriggerChild.ts"],"names":[],"mappings":";;;;IAIA;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,SAAgB,eAAe,CAC7B,QAAqD;QAGrD,IAAI,CAAC,KAAK,CAAC,cAAc,CAAoB,QAAQ,CAAC,EAAE;YACtD,OAAO,IAAI,CAAC;SACb;QACD,OAAO,iCAAe,CAAC,QAAQ,CAAC;YAC9B,CAAC,CAAC,eAAe;YACb,uFAAuF;YACvF,4CAA4C;YAC3C,QAAQ,CAAC,KAAsB,CAAC,QAAQ,CAC1C;YACH,CAAC,CAAC,QAAQ,CAAC;IACf,CAAC;IAdD,0CAcC","sourcesContent":["import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\nimport type { TriggerProps } from './types';\n\n/**\n * @internal\n * Gets the trigger element of a FluentTriggerComponent (such as Tooltip or MenuTrigger).\n *\n * In the case where the immediate child is itself a FluentTriggerComponent and/or React Fragment,\n * it returns the first descendant that is _not_ a FluentTriggerComponent or Fragment.\n * This allows multiple triggers to be stacked, and still apply their props to the actual trigger element.\n *\n * For example, the following returns `<div id=\"child\" />`:\n * ```jsx\n * getTriggerChild(\n *   <Tooltip>\n *     <MenuTrigger>\n *       <div id=\"child\" />\n *     </MenuTrigger>\n *   </Tooltip>\n * );\n * ```\n *\n * In the case where the immediate child is not a valid element,\n * null is returned\n */\nexport function getTriggerChild<TriggerChildProps>(\n  children: TriggerProps<TriggerChildProps>['children'],\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): (React.ReactElement<Partial<TriggerChildProps>> & { ref?: React.Ref<any> }) | null {\n  if (!React.isValidElement<TriggerChildProps>(children)) {\n    return null;\n  }\n  return isFluentTrigger(children)\n    ? getTriggerChild(\n        // FIXME: This casting should be unnecessary as isFluentTrigger is a guard type method,\n        // but for some reason it's failing on build\n        (children.props as TriggerProps).children,\n      )\n    : children;\n}\n"]}