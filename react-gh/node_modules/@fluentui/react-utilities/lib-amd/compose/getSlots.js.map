{"version":3,"file":"getSlots.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-utilities/src/compose/getSlots.ts"],"names":[],"mappings":";;;;IA+BA;;;;;;;;;;;;;;;;OAgBG;IACH,SAAgB,QAAQ,CACtB,KAAwB;QAKxB,IAAM,KAAK,GAAG,EAAc,CAAC;QAC7B,IAAM,SAAS,GAAG,EAAO,CAAC;QAE1B,IAAM,SAAS,GAAgB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC7D,KAAuB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;YAA7B,IAAM,QAAQ,kBAAA;YACX,IAAA,KAAgB,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAvC,IAAI,QAAA,EAAE,KAAK,QAA4B,CAAC;YAC/C,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAiC,CAAC;YACpD,SAAS,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;SAC7B;QACD,OAAO,EAAE,KAAK,OAAA,EAAE,SAAS,EAAG,SAA2C,EAAE,CAAC;IAC5E,CAAC;IAhBD,4BAgBC;IAED,SAAS,OAAO,CACd,KAAwB,EACxB,QAAW;;QAEX,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;YACjC,OAAO,CAAC,IAAI,EAAE,SAAiB,CAAC,CAAC;SAClC;QACD,IAAM,KAAoC,KAAK,CAAC,QAAQ,CAAE,EAAlD,QAAQ,cAAA,EAAM,MAAM,QAAA,EAAK,IAAI,sBAA/B,kBAAiC,CAAmB,CAAC;QAE3D,IAAM,IAAI,GAAG,CAAC,CAAA,MAAA,KAAK,CAAC,UAAU,0CAAG,QAAQ,CAAC,MAAK,SAAS,IAAI,OAAO,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,QAAQ;YACxG,CAAC,CAAC,MAAM,KAAI,MAAA,KAAK,CAAC,UAAU,0CAAG,QAAQ,CAAC,CAAA,IAAI,KAAK;YACjD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAA4B,CAAC;QAE3D,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YAClC,IAAM,MAAM,GAAG,QAAoC,CAAC;YACpD,OAAO;gBACL,KAAK,CAAC,QAAQ;gBACb;oBACC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,IAAqC,CAAC;iBAC1C;aACtB,CAAC;SACH;QAED,IAAM,gBAAgB,GAAG,OAAO,IAAI,KAAK,QAAQ,KAAI,MAAA,KAAK,CAAC,QAAQ,CAAC,0CAAE,EAAE,CAAA,CAAC;QACzE,IAAM,SAAS,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,WAAI,CAAC,KAAK,CAAC,QAAQ,CAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAS,CAAC;QAEhG,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC3B,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { omit } from '../utils/omit';\nimport type {\n  AsIntrinsicElement,\n  ComponentState,\n  ExtractSlotProps,\n  SlotPropsRecord,\n  SlotRenderFunction,\n  UnionToIntersection,\n} from './types';\n\nexport type Slots<S extends SlotPropsRecord> = {\n  [K in keyof S]: ExtractSlotProps<S[K]> extends AsIntrinsicElement<infer As>\n    ? // for slots with an `as` prop, the slot will be any one of the possible values of `as`\n      As\n    : ExtractSlotProps<S[K]> extends React.ComponentType<infer P>\n    ? React.ElementType<NonNullable<P>>\n    : React.ElementType<ExtractSlotProps<S[K]>>;\n};\n\ntype ObjectSlotProps<S extends SlotPropsRecord> = {\n  [K in keyof S]-?: ExtractSlotProps<S[K]> extends AsIntrinsicElement<infer As>\n    ? // For intrinsic element types, return the intersection of all possible\n      // element's props, to be compatible with the As type returned by Slots<>\n      UnionToIntersection<JSX.IntrinsicElements[As]>\n    : ExtractSlotProps<S[K]> extends React.ComponentType<infer P>\n    ? P\n    : never;\n};\n\n/**\n * Given the state and an array of slot names, will break out `slots` and `slotProps`\n * collections.\n *\n * The root is derived from a mix of `components` props and `as` prop.\n *\n * Slots will render as null if they are rendered as primitives with undefined children.\n *\n * The slotProps will always omit the `as` prop within them, and for slots that are string\n * primitives, the props will be filtered according to the slot type by the type system.\n * For example, if the slot is rendered `as: 'a'`, the props will be filtered for acceptable\n * anchor props. Note that this is only enforced at build time by Typescript -- there is no\n * runtime code filtering props in this function.\n *\n * @param state - State including slot definitions\n * @returns An object containing the `slots` map and `slotProps` map.\n */\nexport function getSlots<R extends SlotPropsRecord>(\n  state: ComponentState<R>,\n): {\n  slots: Slots<R>;\n  slotProps: ObjectSlotProps<R>;\n} {\n  const slots = {} as Slots<R>;\n  const slotProps = {} as R;\n\n  const slotNames: (keyof R)[] = Object.keys(state.components);\n  for (const slotName of slotNames) {\n    const [slot, props] = getSlot(state, slotName);\n    slots[slotName] = slot as Slots<R>[typeof slotName];\n    slotProps[slotName] = props;\n  }\n  return { slots, slotProps: (slotProps as unknown) as ObjectSlotProps<R> };\n}\n\nfunction getSlot<R extends SlotPropsRecord, K extends keyof R>(\n  state: ComponentState<R>,\n  slotName: K,\n): readonly [React.ElementType<R[K]> | null, R[K]] {\n  if (state[slotName] === undefined) {\n    return [null, undefined as R[K]];\n  }\n  const { children, as: asProp, ...rest } = state[slotName]!;\n\n  const slot = (state.components?.[slotName] === undefined || typeof state.components[slotName] === 'string'\n    ? asProp || state.components?.[slotName] || 'div'\n    : state.components[slotName]) as React.ElementType<R[K]>;\n\n  if (typeof children === 'function') {\n    const render = children as SlotRenderFunction<R[K]>;\n    return [\n      React.Fragment,\n      ({\n        children: render(slot, rest as Omit<R[K], 'children' | 'as'>),\n      } as unknown) as R[K],\n    ];\n  }\n\n  const shouldOmitAsProp = typeof slot === 'string' && state[slotName]?.as;\n  const slotProps = (shouldOmitAsProp ? omit(state[slotName]!, ['as']) : state[slotName]) as R[K];\n\n  return [slot, slotProps];\n}\n"]}