{"version":3,"file":"useControllableState.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-utilities/src/hooks/useControllableState.ts"],"names":[],"mappings":";;;;IAqBA,SAAS,iBAAiB,CAAQ,QAAqC;QACrE,OAAO,OAAO,QAAQ,KAAK,UAAU,CAAC;IACxC,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACI,IAAM,oBAAoB,GAAG,UAClC,OAA2C;QAE3C,IAAM,YAAY,GAAG,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpD,IAAM,YAAY,GAAG,OAAO,OAAO,CAAC,YAAY,KAAK,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;QACzG,IAAA,KAAoC,KAAK,CAAC,QAAQ,CAAQ,YAAY,CAAC,EAAtE,aAAa,QAAA,EAAE,gBAAgB,QAAuC,CAAC;QAE9E,IAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAE,OAAO,CAAC,KAAe,CAAC,CAAC,CAAC,aAAa,CAAC;QAEtE,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrC,KAAK,CAAC,SAAS,CAAC;YACd,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;QAC3B,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAEZ,2FAA2F;QAC3F,4FAA4F;QAC5F,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,UAAC,QAAqC;YACvE,mCAAmC;YACnC,mEAAmE;YACnE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,EAAE;gBAC/B,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC/C;iBAAM;gBACL,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC;aAC7B;YAED,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC3B,CAAC,CAAC;IA7BW,QAAA,oBAAoB,wBA6B/B;IAEF;;;;OAIG;IACH,IAAM,eAAe,GAAG,UAAC,eAAwB;QACxC,IAAA,YAAY,GAAI,KAAK,CAAC,QAAQ,CAAU,cAAM,OAAA,eAAe,KAAK,SAAS,EAA7B,CAA6B,CAAC,GAAhE,CAAiE;QAEpF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;YACzC,wFAAwF;YACxF,sDAAsD;YACtD,KAAK,CAAC,SAAS,CAAC;gBACd,IAAI,YAAY,KAAK,CAAC,eAAe,KAAK,SAAS,CAAC,EAAE;oBACpD,IAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;oBAE1B,IAAM,cAAc,GAAG,YAAY;wBACjC,CAAC,CAAC,uCAAuC;wBACzC,CAAC,CAAC,wCAAwC,CAAC;oBAE7C,IAAM,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,wBAAwB,CAAC;oBAE7F,sCAAsC;oBACtC,OAAO,CAAC,KAAK,CACX;wBACE,sBAAsB;wBACtB,0BAA0B,GAAG,cAAc,GAAG,sCAAsC;wBACpF,gBAAgB,GAAG,gBAAgB,GAAG,kCAAkC;wBACxE,oGAAoG;wBACpG,2DAA2D;wBAC3D,KAAK,CAAC,KAAK;qBACZ,CAAC,IAAI,CAAC,GAAG,CAAC,CACZ,CAAC;iBACH;YACH,CAAC,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC;SACrC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\n/**\n * @internal\n */\nexport type UseControllableStateOptions<State> = {\n  /**\n   * User-provided default state or initializer, for uncontrolled usage.\n   */\n  defaultState?: State | (() => State);\n  /**\n   * User-provided controlled state. `undefined` means internal state will be used.\n   */\n  state: State | undefined;\n  /**\n   * Used as the initial state if `state` and `defaultState` are both `undefined`.\n   * If `undefined` is the correct initial state, pass that here.\n   */\n  initialState: State;\n};\n\nfunction isFactoryDispatch<State>(newState: React.SetStateAction<State>): newState is (prevState: State) => State {\n  return typeof newState === 'function';\n}\n\n/**\n * @internal\n *\n * A `useState`-like hook to manage a value that could be either controlled or uncontrolled,\n * such as a checked state or text input string.\n *\n * Unlike `setState`, it's okay to call the returned updater (dispatch) function for either a\n * controlled or uncontrolled component. Calls will only be respected if the component is uncontrolled.\n *\n * @returns Same as [`useState`](https://reactjs.org/docs/hooks-reference.html#usestate): an array\n * of the current value and an updater (dispatch) function. The updater function is referentially\n * stable (won't change during the component's lifecycle). It can take either a new value, or a\n * function which is passed the previous value and returns the new value. Unlike `setState`, calls\n * to the updater function will only be respected if the component is uncontrolled.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport const useControllableState = <State>(\n  options: UseControllableStateOptions<State>,\n): [State, React.Dispatch<React.SetStateAction<State>>] => {\n  const isControlled = useIsControlled(options.state);\n  const initialState = typeof options.defaultState === 'undefined' ? options.initialState : options.defaultState;\n  const [internalState, setInternalState] = React.useState<State>(initialState);\n\n  const state = isControlled ? (options.state as State) : internalState;\n\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  const setState = React.useCallback((newState: React.SetStateAction<State>) => {\n    // React dispatch can use a factory\n    // https://reactjs.org/docs/hooks-reference.html#functional-updates\n    if (isFactoryDispatch(newState)) {\n      stateRef.current = newState(stateRef.current);\n    } else {\n      stateRef.current = newState;\n    }\n\n    setInternalState(stateRef.current);\n  }, []);\n\n  return [state, setState];\n};\n\n/**\n * Helper hook to handle previous comparison of controlled/uncontrolled\n * Prints an error when isControlled value switches between subsequent renders\n * @returns - whether the value is controlled\n */\nconst useIsControlled = (controlledValue: unknown) => {\n  const [isControlled] = React.useState<boolean>(() => controlledValue !== undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // We don't want these warnings in production even though it is against native behaviour\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled !== (controlledValue !== undefined)) {\n        const error = new Error();\n\n        const controlWarning = isControlled\n          ? 'a controlled value to be uncontrolled'\n          : 'an uncontrolled value to be controlled';\n\n        const undefinedWarning = isControlled ? 'defined to an undefined' : 'undefined to a defined';\n\n        // eslint-disable-next-line no-console\n        console.error(\n          [\n            // Default react error\n            'A component is changing ' + controlWarning + '. This is likely caused by the value',\n            'changing from ' + undefinedWarning + ' value, which should not happen.',\n            'Decide between using a controlled or uncontrolled input element for the lifetime of the component.',\n            'More info: https://reactjs.org/link/controlled-components',\n            error.stack,\n          ].join(' '),\n        );\n      }\n    }, [isControlled, controlledValue]);\n  }\n\n  return isControlled;\n};\n"]}