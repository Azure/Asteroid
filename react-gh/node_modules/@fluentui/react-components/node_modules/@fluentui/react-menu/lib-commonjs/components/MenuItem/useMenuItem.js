"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuItem_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const react_shared_contexts_1 = /*#__PURE__*/require("@fluentui/react-shared-contexts");

const useCharacterSearch_1 = /*#__PURE__*/require("./useCharacterSearch");

const menuTriggerContext_1 = /*#__PURE__*/require("../../contexts/menuTriggerContext");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");

const menuListContext_1 = /*#__PURE__*/require("../../contexts/menuListContext");

const menuContext_1 = /*#__PURE__*/require("../../contexts/menuContext");

const react_aria_1 = /*#__PURE__*/require("@fluentui/react-aria");

const keyboard_keys_1 = /*#__PURE__*/require("@fluentui/keyboard-keys");

const ChevronRightIcon = /*#__PURE__*/react_icons_1.bundleIcon(react_icons_1.ChevronRightFilled, react_icons_1.ChevronRightRegular);
const ChevronLeftIcon = /*#__PURE__*/react_icons_1.bundleIcon(react_icons_1.ChevronLeftFilled, react_icons_1.ChevronLeftRegular);
/**
 * Returns the props and state required to render the component
 */

const useMenuItem_unstable = (props, ref) => {
  const isSubmenuTrigger = menuTriggerContext_1.useMenuTriggerContext_unstable();
  const persistOnClickContext = menuContext_1.useMenuContext_unstable(context => context.persistOnItemClick);
  const {
    as = 'div',
    disabled,
    disabledFocusable,
    hasSubmenu = isSubmenuTrigger,
    persistOnClick = persistOnClickContext
  } = props;
  const hasIcons = menuListContext_1.useMenuListContext_unstable(context => context.hasIcons);
  const hasCheckmarks = menuListContext_1.useMenuListContext_unstable(context => context.hasCheckmarks);
  const setOpen = menuContext_1.useMenuContext_unstable(context => context.setOpen);
  const {
    dir
  } = react_shared_contexts_1.useFluent_unstable();
  const innerRef = React.useRef(null);
  const dismissedWithKeyboardRef = React.useRef(false);
  const isDisabled = Boolean(disabled || disabledFocusable);
  const state = {
    hasSubmenu,
    disabled: isDisabled,
    persistOnClick,
    components: {
      root: 'div',
      icon: 'span',
      checkmark: 'span',
      submenuIndicator: 'span',
      content: 'span',
      secondaryContent: 'span'
    },
    isNativeButton: as === 'button',
    root: react_utilities_1.getNativeElementProps(as, react_aria_1.useARIAButtonShorthand({
      disabled: false,
      disabledFocusable: isDisabled,
      as
    }, {
      required: true,
      defaultProps: {
        role: 'menuitem',
        ...props,
        ref: react_utilities_1.useMergedRefs(ref, innerRef),
        onKeyDown: react_utilities_1.useEventCallback(event => {
          var _a;

          (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, event);

          if (!event.isDefaultPrevented() && (event.key === keyboard_keys_1.Space || event.key === keyboard_keys_1.Enter)) {
            dismissedWithKeyboardRef.current = true;
          }
        }),
        onMouseEnter: react_utilities_1.useEventCallback(event => {
          var _a, _b;

          (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
          (_b = props.onMouseEnter) === null || _b === void 0 ? void 0 : _b.call(props, event);
        }),
        onClick: react_utilities_1.useEventCallback(event => {
          var _a;

          if (!hasSubmenu && !persistOnClick) {
            setOpen(event, {
              open: false,
              keyboard: dismissedWithKeyboardRef.current,
              bubble: true,
              type: 'menuItemClick',
              event
            });
            dismissedWithKeyboardRef.current = false;
          }

          (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, event);
        })
      }
    })),
    icon: react_utilities_1.resolveShorthand(props.icon, {
      required: hasIcons
    }),
    checkmark: react_utilities_1.resolveShorthand(props.checkmark, {
      required: hasCheckmarks
    }),
    submenuIndicator: react_utilities_1.resolveShorthand(props.submenuIndicator, {
      required: hasSubmenu,
      defaultProps: {
        children: dir === 'ltr' ? React.createElement(ChevronRightIcon, null) : React.createElement(ChevronLeftIcon, null)
      }
    }),
    content: react_utilities_1.resolveShorthand(props.content, {
      required: !!props.children,
      defaultProps: {
        children: props.children
      }
    }),
    secondaryContent: react_utilities_1.resolveShorthand(props.secondaryContent)
  };
  useCharacterSearch_1.useCharacterSearch(state, innerRef);
  return state;
};

exports.useMenuItem_unstable = useMenuItem_unstable;
//# sourceMappingURL=useMenuItem.js.map