"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Overflow = void 0;

const React = /*#__PURE__*/require("react");

const react_1 = /*#__PURE__*/require("@griffel/react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const overflowContext_1 = /*#__PURE__*/require("../overflowContext");

const useOverflowContainer_1 = /*#__PURE__*/require("../useOverflowContainer");

const constants_1 = /*#__PURE__*/require("../constants");

const useStyles = /*#__PURE__*/react_1.__styles({
  "overflowMenu": {
    "Brvla84": "fyfkpbf"
  },
  "overflowingItems": {
    "Hevnzl": "ftz08xh"
  }
}, {
  "d": [".fyfkpbf [data-overflow-menu]{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", ".ftz08xh>[data-overflowing]{display:none;}"]
});
/**
 * Provides an OverflowContext for OverflowItem descendants.
 */


exports.Overflow = /*#__PURE__*/React.forwardRef((props, ref) => {
  const styles = useStyles();
  const {
    children,
    minimumVisible,
    overflowAxis = 'horizontal',
    overflowDirection,
    padding
  } = props;
  const [hasOverflow, setHasOverflow] = React.useState(false);
  const [itemVisibility, setItemVisibility] = React.useState({});
  const [groupVisibility, setGroupVisibility] = React.useState({}); // useOverflowContainer wraps this method in a useEventCallback.
  // TODO: Do we need a useEventCallback here too?

  const update = data => {
    setHasOverflow(() => data.invisibleItems.length > 0);
    setItemVisibility(() => {
      const newState = {};
      data.visibleItems.forEach(x => newState[x.id] = true);
      data.invisibleItems.forEach(x => newState[x.id] = false);
      return newState;
    });
    setGroupVisibility(data.groupVisibility);
  };

  const {
    containerRef,
    registerItem,
    updateOverflow,
    registerOverflowMenu
  } = useOverflowContainer_1.useOverflowContainer(update, {
    overflowDirection,
    overflowAxis,
    padding,
    minimumVisible,
    onUpdateItemVisibility: useOverflowContainer_1.updateVisibilityAttribute
  });
  const clonedChild = react_utilities_1.applyTriggerPropsToChildren(children, {
    ref: react_utilities_1.useMergedRefs(containerRef, ref),
    className: react_1.mergeClasses(styles.overflowMenu, styles.overflowingItems, children.props.className)
  });
  return React.createElement(overflowContext_1.OverflowContext.Provider, {
    value: {
      itemVisibility,
      groupVisibility,
      hasOverflow,
      registerItem,
      updateOverflow,
      registerOverflowMenu
    }
  }, clonedChild);
});
//# sourceMappingURL=Overflow.js.map