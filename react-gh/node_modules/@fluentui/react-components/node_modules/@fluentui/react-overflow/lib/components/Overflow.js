import * as React from 'react';
import { __styles, mergeClasses } from '@griffel/react';
import { applyTriggerPropsToChildren, useMergedRefs } from '@fluentui/react-utilities';
import { OverflowContext } from '../overflowContext';
import { updateVisibilityAttribute, useOverflowContainer } from '../useOverflowContainer';
import { DATA_OVERFLOWING, DATA_OVERFLOW_MENU } from '../constants';

const useStyles = /*#__PURE__*/__styles({
  "overflowMenu": {
    "Brvla84": "fyfkpbf"
  },
  "overflowingItems": {
    "Hevnzl": "ftz08xh"
  }
}, {
  "d": [".fyfkpbf [data-overflow-menu]{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", ".ftz08xh>[data-overflowing]{display:none;}"]
});
/**
 * Provides an OverflowContext for OverflowItem descendants.
 */


export const Overflow = /*#__PURE__*/React.forwardRef((props, ref) => {
  const styles = useStyles();
  const {
    children,
    minimumVisible,
    overflowAxis = 'horizontal',
    overflowDirection,
    padding
  } = props;
  const [hasOverflow, setHasOverflow] = React.useState(false);
  const [itemVisibility, setItemVisibility] = React.useState({});
  const [groupVisibility, setGroupVisibility] = React.useState({}); // useOverflowContainer wraps this method in a useEventCallback.
  // TODO: Do we need a useEventCallback here too?

  const update = data => {
    setHasOverflow(() => data.invisibleItems.length > 0);
    setItemVisibility(() => {
      const newState = {};
      data.visibleItems.forEach(x => newState[x.id] = true);
      data.invisibleItems.forEach(x => newState[x.id] = false);
      return newState;
    });
    setGroupVisibility(data.groupVisibility);
  };

  const {
    containerRef,
    registerItem,
    updateOverflow,
    registerOverflowMenu
  } = useOverflowContainer(update, {
    overflowDirection,
    overflowAxis,
    padding,
    minimumVisible,
    onUpdateItemVisibility: updateVisibilityAttribute
  });
  const clonedChild = applyTriggerPropsToChildren(children, {
    ref: useMergedRefs(containerRef, ref),
    className: mergeClasses(styles.overflowMenu, styles.overflowingItems, children.props.className)
  });
  return /*#__PURE__*/React.createElement(OverflowContext.Provider, {
    value: {
      itemVisibility,
      groupVisibility,
      hasOverflow,
      registerItem,
      updateOverflow,
      registerOverflowMenu
    }
  }, clonedChild);
});
//# sourceMappingURL=Overflow.js.map