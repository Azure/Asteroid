define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "../TabList/TabListContext", "@fluentui/react-context-selector"], function (require, exports, tslib_1, React, react_utilities_1, TabListContext_1, react_context_selector_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTab_unstable = void 0;
    /**
     * Create the state required to render Tab.
     *
     * The returned state can be modified with hooks such as useTabStyles_unstable,
     * before being passed to renderTab_unstable.
     *
     * @param props - props from this instance of Tab
     * @param ref - reference to root HTMLElement of Tab
     */
    var useTab_unstable = function (props, ref) {
        var content = props.content, _a = props.disabled, tabDisabled = _a === void 0 ? false : _a, icon = props.icon, value = props.value;
        var appearance = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.appearance; });
        var reserveSelectedTabSpace = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.reserveSelectedTabSpace; });
        var listDisabled = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.disabled; });
        var selected = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.selectedValue === value; });
        var onRegister = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.onRegister; });
        var onUnregister = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.onUnregister; });
        var onSelect = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.onSelect; });
        var size = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return ctx.size; });
        var vertical = react_context_selector_1.useContextSelector(TabListContext_1.TabListContext, function (ctx) { return !!ctx.vertical; });
        var disabled = listDisabled || tabDisabled;
        var innerRef = React.useRef(null);
        var onClick = react_utilities_1.useEventCallback(function (event) { return onSelect(event, { value: value }); });
        React.useEffect(function () {
            onRegister({
                value: value,
                ref: innerRef,
            });
            return function () {
                onUnregister({ value: value, ref: innerRef });
            };
        }, [onRegister, onUnregister, innerRef, value]);
        var iconShorthand = react_utilities_1.resolveShorthand(icon);
        var contentShorthand = react_utilities_1.resolveShorthand(content, { required: true, defaultProps: { children: props.children } });
        return {
            components: {
                root: 'button',
                icon: 'span',
                content: 'span',
            },
            root: react_utilities_1.getNativeElementProps('button', tslib_1.__assign(tslib_1.__assign({ ref: react_utilities_1.useMergedRefs(ref, innerRef), role: 'tab', type: 'button', 
                // aria-selected undefined indicates it is not selectable
                // according to https://www.w3.org/TR/wai-aria-1.1/#aria-selected
                'aria-selected': disabled ? undefined : "" + selected }, props), { disabled: disabled, onClick: onClick })),
            icon: iconShorthand,
            iconOnly: Boolean((iconShorthand === null || iconShorthand === void 0 ? void 0 : iconShorthand.children) && !contentShorthand.children),
            content: contentShorthand,
            appearance: appearance,
            contentReservedSpaceClassName: reserveSelectedTabSpace ? '' : undefined,
            disabled: disabled,
            selected: selected,
            size: size,
            value: value,
            vertical: vertical,
        };
    };
    exports.useTab_unstable = useTab_unstable;
});
//# sourceMappingURL=useTab.js.map