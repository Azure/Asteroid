define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-tabster", "@fluentui/react-theme", "./useTabAnimatedIndicator"], function (require, exports, tslib_1, react_1, react_tabster_1, react_theme_1, useTabAnimatedIndicator_1) {
    "use strict";
    var _a, _b;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTabStyles_unstable = exports.tabClassNames = void 0;
    exports.tabClassNames = {
        root: 'fui-Tab',
        icon: 'fui-Tab__icon',
        content: 'fui-Tab__content',
    };
    var reservedSpaceClassNames = {
        content: 'fui-Tab__content--reserved-space',
    };
    // These should match the constants defined in @fluentui/react-icons
    // This package avoids taking a dependency on the icons package for only the constants.
    var iconClassNames = {
        filled: 'fui-Icon-filled',
        regular: 'fui-Icon-regular',
    };
    /**
     * Styles for the root slot
     */
    /* eslint-disable @typescript-eslint/naming-convention */
    var useRootStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ alignItems: 'center' }, react_1.shorthands.borderColor('none')), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), react_1.shorthands.borderWidth(0)), { cursor: 'pointer', display: 'grid', flexShrink: 0, gridAutoFlow: 'column', gridTemplateColumns: 'auto', gridTemplateRows: 'auto', fontFamily: react_theme_1.tokens.fontFamilyBase, lineHeight: react_theme_1.tokens.lineHeightBase300, outlineStyle: 'none', position: 'relative' }), react_1.shorthands.overflow('hidden')), { textTransform: 'none' }),
        horizontal: {
            justifyContent: 'center',
        },
        vertical: {
            justifyContent: 'start',
        },
        smallHorizontal: tslib_1.__assign({ columnGap: react_theme_1.tokens.spacingHorizontalXXS }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalSNudge, react_theme_1.tokens.spacingHorizontalSNudge)),
        smallVertical: tslib_1.__assign({ 
            // horizontal spacing is deliberate. This is the gap between icon and content.
            columnGap: react_theme_1.tokens.spacingHorizontalXXS }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalXXS, react_theme_1.tokens.spacingHorizontalSNudge)),
        mediumHorizontal: tslib_1.__assign({ columnGap: react_theme_1.tokens.spacingHorizontalSNudge }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalM, react_theme_1.tokens.spacingHorizontalMNudge)),
        mediumVertical: tslib_1.__assign({ 
            // horizontal spacing is deliberate. This is the gap between icon and content.
            columnGap: react_theme_1.tokens.spacingHorizontalSNudge }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalSNudge, react_theme_1.tokens.spacingHorizontalMNudge)),
        largeHorizontal: tslib_1.__assign({ columnGap: react_theme_1.tokens.spacingHorizontalSNudge }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalL, react_theme_1.tokens.spacingHorizontalMNudge)),
        largeVertical: tslib_1.__assign({ 
            // horizontal spacing is deliberate. This is the gap between icon and content.
            columnGap: react_theme_1.tokens.spacingHorizontalSNudge }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalS, react_theme_1.tokens.spacingHorizontalMNudge)),
        transparent: {
            backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            ':hover': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackgroundHover,
            },
            ':active': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackgroundPressed,
            },
            '& .fui-Tab__icon': {
                color: react_theme_1.tokens.colorNeutralForeground2,
            },
            ':hover .fui-Tab__icon': {
                color: react_theme_1.tokens.colorNeutralForeground2Hover,
            },
            ':active .fui-Tab__icon': {
                color: react_theme_1.tokens.colorNeutralForeground2Pressed,
            },
            '& .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground2,
            },
            ':hover .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground2Hover,
            },
            ':active .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground2Pressed,
            },
        },
        subtle: {
            backgroundColor: react_theme_1.tokens.colorSubtleBackground,
            ':hover': {
                backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
            },
            ':active': {
                backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
            },
            '& .fui-Tab__icon': {
                color: react_theme_1.tokens.colorNeutralForeground2,
            },
            ':hover .fui-Tab__icon': {
                color: react_theme_1.tokens.colorNeutralForeground2Hover,
            },
            ':active .fui-Tab__icon': {
                color: react_theme_1.tokens.colorNeutralForeground2Pressed,
            },
            '& .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground2,
            },
            ':hover .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground2Hover,
            },
            ':active .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground2Pressed,
            },
        },
        disabled: {
            backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            '& .fui-Tab__icon': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
            '& .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
            cursor: 'not-allowed',
        },
        selected: {
            '& .fui-Tab__icon': {
                color: react_theme_1.tokens.colorCompoundBrandForeground1,
            },
            ':hover .fui-Tab__icon': {
                color: react_theme_1.tokens.colorCompoundBrandForeground1Hover,
            },
            ':active .fui-Tab__icon': {
                color: react_theme_1.tokens.colorCompoundBrandForeground1Pressed,
            },
            '& .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground1,
            },
            ':hover .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground1Hover,
            },
            ':active .fui-Tab__content': {
                color: react_theme_1.tokens.colorNeutralForeground1Pressed,
            },
        },
    });
    /* eslint-enable @typescript-eslint/naming-convention */
    /**
     * Focus styles for the root slot
     */
    var useFocusStyles = react_1.makeStyles({
        // Tab creates a custom focus indicator because the default focus indicator
        // is applied using an ::after pseudo-element on the root. Since the selection
        // indicator uses an ::after pseudo-element on the root, there is a conflict.
        base: react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor('transparent')), { outlineWidth: react_theme_1.tokens.strokeWidthThick, outlineColor: 'transparent', outlineStyle: 'solid', boxShadow: "\n      " + react_theme_1.tokens.shadow4 + ",\n      0 0 0 " + react_theme_1.tokens.strokeWidthThick + " " + react_theme_1.tokens.colorStrokeFocus2 + "\n    ", zIndex: 1 })),
    });
    /** Indicator styles for when pending selection */
    var usePendingIndicatorStyles = react_1.makeStyles({
        base: {
            ':hover::before': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralStroke1Hover }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), { content: '""', position: 'absolute' }),
            ':active::before': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralStroke1Pressed }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), { content: '""', position: 'absolute' }),
            '@media (forced-colors: active)': {
                ':hover::before': {
                    backgroundColor: 'Highlight',
                },
                ':active::before': {
                    backgroundColor: 'Highlight',
                },
            },
        },
        disabled: {
            ':hover::before': {
                backgroundColor: react_theme_1.tokens.colorTransparentStroke,
            },
            ':active::before': {
                backgroundColor: react_theme_1.tokens.colorTransparentStroke,
            },
        },
        smallHorizontal: {
            '::before': {
                bottom: 0,
                height: react_theme_1.tokens.strokeWidthThick,
                left: react_theme_1.tokens.spacingHorizontalSNudge,
                right: react_theme_1.tokens.spacingHorizontalSNudge,
            },
        },
        smallVertical: {
            '::before': {
                bottom: react_theme_1.tokens.spacingVerticalXS,
                left: 0,
                top: react_theme_1.tokens.spacingVerticalXS,
                width: react_theme_1.tokens.strokeWidthThicker,
            },
        },
        mediumHorizontal: {
            '::before': {
                bottom: 0,
                height: react_theme_1.tokens.strokeWidthThicker,
                left: react_theme_1.tokens.spacingHorizontalM,
                right: react_theme_1.tokens.spacingHorizontalM,
            },
        },
        mediumVertical: {
            '::before': {
                bottom: react_theme_1.tokens.spacingVerticalS,
                left: 0,
                top: react_theme_1.tokens.spacingVerticalS,
                width: react_theme_1.tokens.strokeWidthThicker,
            },
        },
        largeHorizontal: {
            '::before': {
                bottom: 0,
                height: react_theme_1.tokens.strokeWidthThicker,
                left: react_theme_1.tokens.spacingHorizontalM,
                right: react_theme_1.tokens.spacingHorizontalM,
            },
        },
        largeVertical: {
            '::before': {
                bottom: react_theme_1.tokens.spacingVerticalMNudge,
                left: 0,
                top: react_theme_1.tokens.spacingVerticalMNudge,
                width: react_theme_1.tokens.strokeWidthThicker,
            },
        },
    });
    var useActiveIndicatorStyles = react_1.makeStyles({
        base: {
            '::after': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentStroke }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), { content: '""', position: 'absolute', zIndex: 1 }),
        },
        selected: {
            '::after': {
                backgroundColor: react_theme_1.tokens.colorCompoundBrandStroke,
            },
            ':hover::after': {
                backgroundColor: react_theme_1.tokens.colorCompoundBrandStrokeHover,
            },
            ':active::after': {
                backgroundColor: react_theme_1.tokens.colorCompoundBrandStrokePressed,
            },
            '@media (forced-colors: active)': {
                '::after': {
                    backgroundColor: 'ButtonText',
                },
                ':hover::after': {
                    backgroundColor: 'ButtonText',
                },
                ':active::after': {
                    backgroundColor: 'ButtonText',
                },
            },
        },
        disabled: {
            '::after': {
                backgroundColor: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
        smallHorizontal: {
            '::after': {
                bottom: 0,
                height: react_theme_1.tokens.strokeWidthThick,
                left: react_theme_1.tokens.spacingHorizontalSNudge,
                right: react_theme_1.tokens.spacingHorizontalSNudge,
            },
        },
        smallVertical: {
            '::after': {
                bottom: react_theme_1.tokens.spacingVerticalXS,
                left: '0',
                top: react_theme_1.tokens.spacingVerticalXS,
                width: react_theme_1.tokens.strokeWidthThicker,
            },
        },
        mediumHorizontal: {
            '::after': {
                bottom: '0',
                height: react_theme_1.tokens.strokeWidthThicker,
                left: react_theme_1.tokens.spacingHorizontalM,
                right: react_theme_1.tokens.spacingHorizontalM,
            },
        },
        mediumVertical: {
            '::after': {
                bottom: react_theme_1.tokens.spacingVerticalS,
                left: 0,
                top: react_theme_1.tokens.spacingVerticalS,
                width: react_theme_1.tokens.strokeWidthThicker,
            },
        },
        largeHorizontal: {
            '::after': {
                bottom: 0,
                height: react_theme_1.tokens.strokeWidthThicker,
                left: react_theme_1.tokens.spacingHorizontalM,
                right: react_theme_1.tokens.spacingHorizontalM,
            },
        },
        largeVertical: {
            '::after': {
                bottom: react_theme_1.tokens.spacingVerticalMNudge,
                left: 0,
                top: react_theme_1.tokens.spacingVerticalMNudge,
                width: react_theme_1.tokens.strokeWidthThicker,
            },
        },
    });
    /**
     * Styles for the icon slot.
     */
    var useIconStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign({ gridColumnStart: 1, gridRowStart: 1, alignItems: 'center', display: 'inline-flex', justifyContent: 'center' }, react_1.shorthands.overflow('hidden')), (_a = {}, _a["& ." + iconClassNames.filled] = {
            display: 'none',
        }, _a["& ." + iconClassNames.regular] = {
            display: 'inline',
        }, _a)),
        // per design, the small and medium font sizes are the same.
        // the size prop only affects spacing.
        small: {
            fontSize: '20px',
            height: '20px',
            width: '20px',
        },
        medium: {
            fontSize: '20px',
            height: '20px',
            width: '20px',
        },
        large: {
            fontSize: '24px',
            height: '24px',
            width: '24px',
        },
        selected: (_b = {},
            _b["& ." + iconClassNames.filled] = {
                display: 'inline',
            },
            _b["& ." + iconClassNames.regular] = {
                display: 'none',
            },
            _b),
    });
    /**
     * Styles for the content slot (children)
     */
    var useContentStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_theme_1.typographyStyles.body1), react_1.shorthands.overflow('hidden')), react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalNone, react_theme_1.tokens.spacingHorizontalXXS)),
        selected: tslib_1.__assign({}, react_theme_1.typographyStyles.body1Strong),
        large: tslib_1.__assign({}, react_theme_1.typographyStyles.body2),
        largeSelected: tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle2),
        noIconBefore: {
            gridColumnStart: 1,
            gridRowStart: 1,
        },
        iconBefore: {
            gridColumnStart: 2,
            gridRowStart: 1,
        },
        placeholder: {
            visibility: 'hidden',
        },
    });
    /**
     * Apply styling to the Tab slots based on the state
     */
    var useTabStyles_unstable = function (state) {
        var rootStyles = useRootStyles();
        var focusStyles = useFocusStyles();
        var pendingIndicatorStyles = usePendingIndicatorStyles();
        var activeIndicatorStyles = useActiveIndicatorStyles();
        var iconStyles = useIconStyles();
        var contentStyles = useContentStyles();
        var appearance = state.appearance, disabled = state.disabled, selected = state.selected, size = state.size, vertical = state.vertical;
        state.root.className = react_1.mergeClasses(exports.tabClassNames.root, rootStyles.base, vertical ? rootStyles.vertical : rootStyles.horizontal, size === 'small' && (vertical ? rootStyles.smallVertical : rootStyles.smallHorizontal), size === 'medium' && (vertical ? rootStyles.mediumVertical : rootStyles.mediumHorizontal), size === 'large' && (vertical ? rootStyles.largeVertical : rootStyles.largeHorizontal), focusStyles.base, !disabled && appearance === 'subtle' && rootStyles.subtle, !disabled && appearance === 'transparent' && rootStyles.transparent, !disabled && selected && rootStyles.selected, disabled && rootStyles.disabled, 
        // pending indicator (before pseudo element)
        pendingIndicatorStyles.base, size === 'small' && (vertical ? pendingIndicatorStyles.smallVertical : pendingIndicatorStyles.smallHorizontal), size === 'medium' && (vertical ? pendingIndicatorStyles.mediumVertical : pendingIndicatorStyles.mediumHorizontal), size === 'large' && (vertical ? pendingIndicatorStyles.largeVertical : pendingIndicatorStyles.largeHorizontal), disabled && pendingIndicatorStyles.disabled, 
        // active indicator (after pseudo element)
        selected && activeIndicatorStyles.base, selected && !disabled && activeIndicatorStyles.selected, selected &&
            size === 'small' &&
            (vertical ? activeIndicatorStyles.smallVertical : activeIndicatorStyles.smallHorizontal), selected &&
            size === 'medium' &&
            (vertical ? activeIndicatorStyles.mediumVertical : activeIndicatorStyles.mediumHorizontal), selected &&
            size === 'large' &&
            (vertical ? activeIndicatorStyles.largeVertical : activeIndicatorStyles.largeHorizontal), selected && disabled && activeIndicatorStyles.disabled, state.root.className);
        if (state.icon) {
            state.icon.className = react_1.mergeClasses(exports.tabClassNames.icon, iconStyles.base, iconStyles[size], selected && iconStyles.selected, state.icon.className);
        }
        // This needs to be before state.content.className is updated
        if (state.contentReservedSpaceClassName !== undefined) {
            state.contentReservedSpaceClassName = react_1.mergeClasses(reservedSpaceClassNames.content, contentStyles.base, size === 'large' ? contentStyles.largeSelected : contentStyles.selected, state.icon ? contentStyles.iconBefore : contentStyles.noIconBefore, contentStyles.placeholder, state.content.className);
        }
        state.content.className = react_1.mergeClasses(exports.tabClassNames.content, contentStyles.base, size === 'large' && contentStyles.large, selected && (size === 'large' ? contentStyles.largeSelected : contentStyles.selected), state.icon ? contentStyles.iconBefore : contentStyles.noIconBefore, state.content.className);
        useTabAnimatedIndicator_1.useTabAnimatedIndicatorStyles_unstable(state);
        return state;
    };
    exports.useTabStyles_unstable = useTabStyles_unstable;
});
//# sourceMappingURL=useTabStyles.js.map