"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAccordionHeader_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const index_1 = /*#__PURE__*/require("../AccordionItem/index");

const react_aria_1 = /*#__PURE__*/require("@fluentui/react-aria");

const AccordionContext_1 = /*#__PURE__*/require("../Accordion/AccordionContext");

const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");

const react_shared_contexts_1 = /*#__PURE__*/require("@fluentui/react-shared-contexts");
/**
 * Returns the props and state required to render the component
 * @param props - AccordionHeader properties
 * @param ref - reference to root HTMLElement of AccordionHeader
 */


const useAccordionHeader_unstable = (props, ref) => {
  const {
    as,
    icon,
    button,
    expandIcon,
    inline = false,
    size = 'medium',
    expandIconPosition = 'start'
  } = props;
  const {
    onHeaderClick: onAccordionHeaderClick,
    disabled,
    open
  } = index_1.useAccordionItemContext_unstable();
  /**
   * force disabled state on button if accordion isn't collapsible
   * and this is the only item opened
   */

  const disabledFocusable = AccordionContext_1.useAccordionContext_unstable(ctx => !ctx.collapsible && ctx.openItems.length === 1 && open);
  const {
    dir
  } = react_shared_contexts_1.useFluent_unstable(); // Calculate how to rotate the expand icon [>] (ChevronRightRegular)

  let expandIconRotation;

  if (expandIconPosition === 'end') {
    // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed
    expandIconRotation = open ? -90 : 90;
  } else {
    // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed
    expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;
  }

  const buttonShorthand = react_aria_1.useARIAButtonShorthand(button, {
    required: true,
    defaultProps: {
      disabled,
      disabledFocusable,
      'aria-expanded': open,
      type: 'button'
    }
  });
  return {
    disabled,
    open,
    size,
    inline,
    expandIconPosition,
    components: {
      root: 'div',
      button: 'button',
      expandIcon: 'span',
      icon: 'div'
    },
    root: react_utilities_1.getNativeElementProps(as || 'div', {
      ref,
      ...props
    }),
    icon: react_utilities_1.resolveShorthand(icon),
    expandIcon: react_utilities_1.resolveShorthand(expandIcon, {
      required: true,
      defaultProps: {
        children: React.createElement(react_icons_1.ChevronRightRegular, {
          style: {
            transform: `rotate(${expandIconRotation}deg)`
          }
        }),
        'aria-hidden': true
      }
    }),
    button: { ...buttonShorthand,
      onClick: react_utilities_1.useEventCallback(ev => {
        var _a;

        (_a = buttonShorthand.onClick) === null || _a === void 0 ? void 0 : _a.call(buttonShorthand, ev);

        if (!ev.defaultPrevented) {
          onAccordionHeaderClick(ev);
        }
      })
    }
  };
};

exports.useAccordionHeader_unstable = useAccordionHeader_unstable;
//# sourceMappingURL=useAccordionHeader.js.map