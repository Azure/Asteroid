{"version":3,"sources":["packages/react-components/react-accordion/src/components/AccordionHeader/useAccordionHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useEventCallback } from '@fluentui/react-utilities';\nimport { useAccordionItemContext_unstable } from '../AccordionItem/index';\nimport { useARIAButtonShorthand } from '@fluentui/react-aria';\nimport type { AccordionHeaderProps, AccordionHeaderState } from './AccordionHeader.types';\nimport { useAccordionContext_unstable } from '../Accordion/AccordionContext';\nimport { ChevronRightRegular } from '@fluentui/react-icons';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Returns the props and state required to render the component\n * @param props - AccordionHeader properties\n * @param ref - reference to root HTMLElement of AccordionHeader\n */\nexport const useAccordionHeader_unstable = (\n  props: AccordionHeaderProps,\n  ref: React.Ref<HTMLElement>,\n): AccordionHeaderState => {\n  const { as, icon, button, expandIcon, inline = false, size = 'medium', expandIconPosition = 'start' } = props;\n  const { onHeaderClick: onAccordionHeaderClick, disabled, open } = useAccordionItemContext_unstable();\n\n  /**\n   * force disabled state on button if accordion isn't collapsible\n   * and this is the only item opened\n   */\n  const disabledFocusable = useAccordionContext_unstable(ctx => !ctx.collapsible && ctx.openItems.length === 1 && open);\n\n  const { dir } = useFluent();\n\n  // Calculate how to rotate the expand icon [>] (ChevronRightRegular)\n  let expandIconRotation: 0 | 90 | -90 | 180;\n  if (expandIconPosition === 'end') {\n    // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed\n    expandIconRotation = open ? -90 : 90;\n  } else {\n    // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed\n    expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;\n  }\n\n  const buttonShorthand = useARIAButtonShorthand(button, {\n    required: true,\n    defaultProps: {\n      disabled,\n      disabledFocusable,\n      'aria-expanded': open,\n      type: 'button',\n    },\n  });\n\n  return {\n    disabled,\n    open,\n    size,\n    inline,\n    expandIconPosition,\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      icon: 'div',\n    },\n    root: getNativeElementProps(as || 'div', {\n      ref,\n      ...props,\n    }),\n    icon: resolveShorthand(icon),\n    expandIcon: resolveShorthand(expandIcon, {\n      required: true,\n      defaultProps: {\n        children: <ChevronRightRegular style={{ transform: `rotate(${expandIconRotation}deg)` }} />,\n        'aria-hidden': true,\n      },\n    }),\n    button: {\n      ...buttonShorthand,\n      onClick: useEventCallback(\n        (ev: React.MouseEvent<HTMLButtonElement & HTMLDivElement & HTMLSpanElement & HTMLAnchorElement>) => {\n          buttonShorthand.onClick?.(ev);\n          if (!ev.defaultPrevented) {\n            onAccordionHeaderClick(ev);\n          }\n        },\n      ),\n    },\n  };\n};\n"],"sourceRoot":"../src/"}