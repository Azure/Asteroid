define(["require", "exports", "tslib", "@fluentui/react-utilities", "../Button/Button", "../MenuButton/MenuButton"], function (require, exports, tslib_1, react_utilities_1, Button_1, MenuButton_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSplitButton_unstable = void 0;
    /**
     * Given user props, defines default props for the SplitButton and returns processed state.
     * @param props - User provided props to the SplitButton component.
     * @param ref - User provided ref to be passed to the SplitButton component.
     */
    var useSplitButton_unstable = function (props, ref) {
        var _a = props.appearance, appearance = _a === void 0 ? 'secondary' : _a, children = props.children, _b = props.disabled, disabled = _b === void 0 ? false : _b, _c = props.disabledFocusable, disabledFocusable = _c === void 0 ? false : _c, icon = props.icon, _d = props.iconPosition, iconPosition = _d === void 0 ? 'before' : _d, menuButton = props.menuButton, menuIcon = props.menuIcon, primaryActionButton = props.primaryActionButton, _e = props.shape, shape = _e === void 0 ? 'rounded' : _e, _f = props.size, size = _f === void 0 ? 'medium' : _f;
        var baseId = react_utilities_1.useId('splitButton-');
        var menuButtonShorthand = react_utilities_1.resolveShorthand(menuButton, {
            defaultProps: {
                appearance: appearance,
                disabled: disabled,
                disabledFocusable: disabledFocusable,
                menuIcon: menuIcon,
                shape: shape,
                size: size,
            },
            required: true,
        });
        var primaryActionButtonShorthand = react_utilities_1.resolveShorthand(primaryActionButton, {
            defaultProps: {
                appearance: appearance,
                children: children,
                disabled: disabled,
                disabledFocusable: disabledFocusable,
                icon: icon,
                iconPosition: iconPosition,
                id: baseId + '__primaryActionButton',
                shape: shape,
                size: size,
            },
            required: true,
        });
        // Resolve menu button's aria-labelledby to be labelled by the primary action button if not a label was not provided
        // by the user.
        if (menuButtonShorthand &&
            primaryActionButtonShorthand &&
            !menuButtonShorthand['aria-label'] &&
            !menuButtonShorthand['aria-labelledby']) {
            menuButtonShorthand['aria-labelledby'] = primaryActionButtonShorthand.id;
        }
        return {
            // Props passed at the top-level
            appearance: appearance,
            disabled: disabled,
            disabledFocusable: disabledFocusable,
            iconPosition: iconPosition,
            shape: shape,
            size: size,
            // Slots definition
            components: {
                root: 'div',
                menuButton: MenuButton_1.MenuButton,
                primaryActionButton: Button_1.Button,
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign({ ref: ref }, props)),
            menuButton: menuButtonShorthand,
            primaryActionButton: primaryActionButtonShorthand,
        };
    };
    exports.useSplitButton_unstable = useSplitButton_unstable;
});
//# sourceMappingURL=useSplitButton.js.map