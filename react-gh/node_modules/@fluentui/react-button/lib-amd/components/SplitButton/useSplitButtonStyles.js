define(["require", "exports", "@griffel/react", "@fluentui/react-tabster", "@fluentui/react-theme"], function (require, exports, react_1, react_tabster_1, react_theme_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSplitButtonStyles_unstable = exports.splitButtonClassNames = void 0;
    exports.splitButtonClassNames = {
        root: 'fui-SplitButton',
        menuButton: 'fui-SplitButton__menuButton',
        primaryActionButton: 'fui-SplitButton__primaryActionButton',
    };
    var useFocusStyles = react_1.makeStyles({
        primaryActionButton: react_tabster_1.createCustomFocusIndicatorStyle({
            borderTopRightRadius: 0,
            borderBottomRightRadius: 0,
        }),
        menuButton: react_tabster_1.createCustomFocusIndicatorStyle({
            borderLeftWidth: 0,
            borderTopLeftRadius: 0,
            borderBottomLeftRadius: 0,
        }),
    });
    var useRootStyles = react_1.makeStyles({
        // Base styles
        base: (_a = {
                display: 'inline-flex',
                justifyContent: 'stretch',
                position: 'relative',
                verticalAlign: 'middle'
            },
            _a["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                borderTopRightRadius: 0,
                borderBottomRightRadius: 0,
            },
            _a["& ." + exports.splitButtonClassNames.menuButton] = {
                borderLeftWidth: 0,
                borderTopLeftRadius: 0,
                borderBottomLeftRadius: 0,
                minWidth: 0,
            },
            _a),
        // Appearance variations
        outline: {
        /* No styles */
        },
        primary: (_b = {},
            _b["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                borderRightColor: react_theme_1.tokens.colorNeutralForegroundOnBrand,
            },
            _b[':hover'] = (_c = {},
                _c["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralForegroundOnBrand,
                },
                _c),
            _b[':hover:active'] = (_d = {},
                _d["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralForegroundOnBrand,
                },
                _d),
            _b),
        secondary: {
        /* The secondary styles are exactly the same as the base styles. */
        },
        subtle: (_e = {},
            _e["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                borderRightColor: react_theme_1.tokens.colorNeutralStroke1,
            },
            _e[':hover'] = (_f = {},
                _f["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralStroke1Hover,
                },
                _f),
            _e[':hover:active'] = (_g = {},
                _g["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralStroke1Pressed,
                },
                _g),
            _e),
        transparent: (_h = {},
            _h["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                borderRightColor: react_theme_1.tokens.colorNeutralStroke1,
            },
            _h[':hover'] = (_j = {},
                _j["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralStroke1Hover,
                },
                _j),
            _h[':hover:active'] = (_k = {},
                _k["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralStroke1Pressed,
                },
                _k),
            _h),
        // Shape variations
        circular: {},
        rounded: {},
        square: {},
        // Disabled styles
        disabled: (_l = {},
            _l["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                borderRightColor: react_theme_1.tokens.colorNeutralStrokeDisabled,
            },
            _l[':hover'] = (_m = {},
                _m["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralStrokeDisabled,
                },
                _m),
            _l[':hover:active'] = (_o = {},
                _o["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: react_theme_1.tokens.colorNeutralStrokeDisabled,
                },
                _o),
            _l),
        // Disabled high contrast styles
        disabledHighContrast: {
            '@media (forced-colors: active)': (_p = {},
                _p["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                    borderRightColor: 'GrayText',
                },
                _p[':hover'] = (_q = {},
                    _q["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                        borderRightColor: 'GrayText',
                    },
                    _q),
                _p[':hover:active'] = (_r = {},
                    _r["& ." + exports.splitButtonClassNames.primaryActionButton] = {
                        borderRightColor: 'GrayText',
                    },
                    _r),
                _p),
        },
    });
    var useSplitButtonStyles_unstable = function (state) {
        var rootStyles = useRootStyles();
        var focusStyles = useFocusStyles();
        var appearance = state.appearance, disabled = state.disabled, disabledFocusable = state.disabledFocusable;
        state.root.className = react_1.mergeClasses(exports.splitButtonClassNames.root, rootStyles.base, appearance && rootStyles[appearance], (disabled || disabledFocusable) && rootStyles.disabled, (disabled || disabledFocusable) && rootStyles.disabledHighContrast, state.root.className);
        if (state.menuButton) {
            state.menuButton.className = react_1.mergeClasses(exports.splitButtonClassNames.menuButton, focusStyles.menuButton, state.menuButton.className);
        }
        if (state.primaryActionButton) {
            state.primaryActionButton.className = react_1.mergeClasses(exports.splitButtonClassNames.primaryActionButton, focusStyles.primaryActionButton, state.primaryActionButton.className);
        }
        return state;
    };
    exports.useSplitButtonStyles_unstable = useSplitButtonStyles_unstable;
});
//# sourceMappingURL=useSplitButtonStyles.js.map