define(["require", "exports", "tslib", "@fluentui/react-theme", "@griffel/react", "../Button/useButtonStyles"], function (require, exports, tslib_1, react_theme_1, react_1, useButtonStyles_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useCompoundButtonStyles_unstable = exports.compoundButtonClassNames = void 0;
    exports.compoundButtonClassNames = {
        root: 'fui-CompoundButton',
        icon: 'fui-CompoundButton__icon',
        contentContainer: 'fui-CompoundButton__contentContainer',
        secondaryContent: 'fui-CompoundButton__secondaryContent',
    };
    var useRootStyles = react_1.makeStyles({
        // Base styles
        base: (_a = {
                height: 'auto'
            },
            _a["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                color: react_theme_1.tokens.colorNeutralForeground2,
            },
            _a[':hover'] = (_b = {},
                _b["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForeground2Hover,
                },
                _b),
            _a[':hover:active'] = (_c = {},
                _c["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForeground2Pressed,
                },
                _c),
            _a),
        // High contrast styles
        highContrast: {
            '@media (forced-colors: active)': {
                ':hover': (_d = {},
                    _d["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                        color: 'Highlight',
                    },
                    _d),
                ':hover:active': (_e = {},
                    _e["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                        color: 'Highlight',
                    },
                    _e),
            },
        },
        // Appearance variations
        outline: {
        /* No styles */
        },
        primary: (_f = {},
            _f["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
            },
            _f[':hover'] = (_g = {},
                _g["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
                },
                _g),
            _f[':hover:active'] = (_h = {},
                _h["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForegroundOnBrand,
                },
                _h),
            _f),
        secondary: {
        /* The secondary styles are exactly the same as the base styles. */
        },
        subtle: (_j = {},
            _j["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                color: react_theme_1.tokens.colorNeutralForeground2,
            },
            _j[':hover'] = (_k = {},
                _k["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForeground2Hover,
                },
                _k),
            _j[':hover:active'] = (_l = {},
                _l["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForeground2Pressed,
                },
                _l),
            _j),
        transparent: (_m = {},
            _m["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                color: react_theme_1.tokens.colorNeutralForeground2,
            },
            _m[':hover'] = (_o = {},
                _o["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForeground2BrandHover,
                },
                _o),
            _m[':hover:active'] = (_p = {},
                _p["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForeground2BrandPressed,
                },
                _p),
            _m),
        // Size variations
        small: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingHorizontalS, react_theme_1.tokens.spacingHorizontalS, react_theme_1.tokens.spacingHorizontalMNudge, react_theme_1.tokens.spacingHorizontalS)), { fontSize: react_theme_1.tokens.fontSizeBase300, lineHeight: react_theme_1.tokens.lineHeightBase300 }),
        medium: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding('14px', react_theme_1.tokens.spacingHorizontalM, react_theme_1.tokens.spacingHorizontalL, react_theme_1.tokens.spacingHorizontalM)), { fontSize: react_theme_1.tokens.fontSizeBase300, lineHeight: react_theme_1.tokens.lineHeightBase300 }),
        large: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding('18px', react_theme_1.tokens.spacingHorizontalL, react_theme_1.tokens.spacingHorizontalXL, react_theme_1.tokens.spacingHorizontalL)), { fontSize: react_theme_1.tokens.fontSizeBase400, lineHeight: react_theme_1.tokens.lineHeightBase400 }),
        // Disabled styles
        disabled: (_q = {},
            _q["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
            _q[':hover'] = (_r = {},
                _r["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                },
                _r),
            _q[':hover:active'] = (_s = {},
                _s["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                },
                _s),
            _q),
        // Disabled high contrast styles
        disabledHighContrast: {
            '@media (forced-colors: active)': (_t = {},
                _t["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                    color: 'GrayText',
                },
                _t[':hover'] = (_u = {},
                    _u["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                        color: 'GrayText',
                    },
                    _u),
                _t[':hover:active'] = (_v = {},
                    _v["& ." + exports.compoundButtonClassNames.secondaryContent] = {
                        color: 'GrayText',
                    },
                    _v),
                _t),
        },
    });
    var useRootIconOnlyStyles = react_1.makeStyles({
        // Size variations
        small: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingHorizontalXS)), { maxWidth: '48px', minWidth: '48px' }),
        medium: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingHorizontalSNudge)), { maxWidth: '52px', minWidth: '52px' }),
        large: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding(react_theme_1.tokens.spacingHorizontalS)), { maxWidth: '56px', minWidth: '56px' }),
    });
    var useIconStyles = react_1.makeStyles({
        // Base styles
        base: {
            fontSize: '40px',
            height: '40px',
            width: '40px',
        },
        // Icon position variations
        before: {
            marginRight: react_theme_1.tokens.spacingHorizontalM,
        },
        after: {
            marginLeft: react_theme_1.tokens.spacingHorizontalM,
        },
    });
    var useContentContainerStyles = react_1.makeStyles({
        // Base styles
        base: {
            display: 'flex',
            flexDirection: 'column',
            textAlign: 'left',
        },
    });
    var useSecondaryContentStyles = react_1.makeStyles({
        // Base styles
        base: {
            lineHeight: '100%',
            fontWeight: react_theme_1.tokens.fontWeightRegular,
        },
        // Size variations
        small: {
            fontSize: react_theme_1.tokens.fontSizeBase200,
        },
        medium: {
            fontSize: react_theme_1.tokens.fontSizeBase200,
        },
        large: {
            fontSize: react_theme_1.tokens.fontSizeBase300,
        },
    });
    var useCompoundButtonStyles_unstable = function (state) {
        var rootStyles = useRootStyles();
        var rootIconOnlyStyles = useRootIconOnlyStyles();
        var iconStyles = useIconStyles();
        var contentContainerStyles = useContentContainerStyles();
        var secondaryContentStyles = useSecondaryContentStyles();
        var appearance = state.appearance, disabled = state.disabled, disabledFocusable = state.disabledFocusable, iconOnly = state.iconOnly, iconPosition = state.iconPosition, size = state.size;
        state.root.className = react_1.mergeClasses(exports.compoundButtonClassNames.root, 
        // Root styles
        rootStyles.base, rootStyles.highContrast, appearance && rootStyles[appearance], rootStyles[size], 
        // Disabled styles
        (disabled || disabledFocusable) && rootStyles.disabled, (disabled || disabledFocusable) && rootStyles.disabledHighContrast, 
        // Icon-only styles
        iconOnly && rootIconOnlyStyles[size], 
        // User provided class name
        state.root.className);
        state.contentContainer.className = react_1.mergeClasses(exports.compoundButtonClassNames.contentContainer, contentContainerStyles.base, state.contentContainer.className);
        if (state.icon) {
            state.icon.className = react_1.mergeClasses(exports.compoundButtonClassNames.icon, iconStyles.base, state.root.children !== undefined && state.root.children !== null && iconStyles[iconPosition], state.icon.className);
        }
        if (state.secondaryContent) {
            state.secondaryContent.className = react_1.mergeClasses(exports.compoundButtonClassNames.secondaryContent, secondaryContentStyles.base, secondaryContentStyles[size], state.secondaryContent.className);
        }
        useButtonStyles_1.useButtonStyles_unstable(state);
        return state;
    };
    exports.useCompoundButtonStyles_unstable = useCompoundButtonStyles_unstable;
});
//# sourceMappingURL=useCompoundButtonStyles.js.map