define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "../AccordionItem/index", "@fluentui/react-aria", "../Accordion/AccordionContext", "@fluentui/react-icons", "@fluentui/react-shared-contexts"], function (require, exports, tslib_1, React, react_utilities_1, index_1, react_aria_1, AccordionContext_1, react_icons_1, react_shared_contexts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAccordionHeader_unstable = void 0;
    /**
     * Returns the props and state required to render the component
     * @param props - AccordionHeader properties
     * @param ref - reference to root HTMLElement of AccordionHeader
     */
    var useAccordionHeader_unstable = function (props, ref) {
        var as = props.as, icon = props.icon, button = props.button, expandIcon = props.expandIcon, _a = props.inline, inline = _a === void 0 ? false : _a, _b = props.size, size = _b === void 0 ? 'medium' : _b, _c = props.expandIconPosition, expandIconPosition = _c === void 0 ? 'start' : _c;
        var _d = index_1.useAccordionItemContext_unstable(), onAccordionHeaderClick = _d.onHeaderClick, disabled = _d.disabled, open = _d.open;
        /**
         * force disabled state on button if accordion isn't collapsible
         * and this is the only item opened
         */
        var disabledFocusable = AccordionContext_1.useAccordionContext_unstable(function (ctx) { return !ctx.collapsible && ctx.openItems.length === 1 && open; });
        var dir = react_shared_contexts_1.useFluent_unstable().dir;
        // Calculate how to rotate the expand icon [>] (ChevronRightRegular)
        var expandIconRotation;
        if (expandIconPosition === 'end') {
            // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed
            expandIconRotation = open ? -90 : 90;
        }
        else {
            // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed
            expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;
        }
        var buttonShorthand = react_aria_1.useARIAButtonShorthand(button, {
            required: true,
            defaultProps: {
                disabled: disabled,
                disabledFocusable: disabledFocusable,
                'aria-expanded': open,
                type: 'button',
            },
        });
        return {
            disabled: disabled,
            open: open,
            size: size,
            inline: inline,
            expandIconPosition: expandIconPosition,
            components: {
                root: 'div',
                button: 'button',
                expandIcon: 'span',
                icon: 'div',
            },
            root: react_utilities_1.getNativeElementProps(as || 'div', tslib_1.__assign({ ref: ref }, props)),
            icon: react_utilities_1.resolveShorthand(icon),
            expandIcon: react_utilities_1.resolveShorthand(expandIcon, {
                required: true,
                defaultProps: {
                    children: React.createElement(react_icons_1.ChevronRightRegular, { style: { transform: "rotate(" + expandIconRotation + "deg)" } }),
                    'aria-hidden': true,
                },
            }),
            button: tslib_1.__assign(tslib_1.__assign({}, buttonShorthand), { onClick: react_utilities_1.useEventCallback(function (ev) {
                    var _a;
                    (_a = buttonShorthand.onClick) === null || _a === void 0 ? void 0 : _a.call(buttonShorthand, ev);
                    if (!ev.defaultPrevented) {
                        onAccordionHeaderClick(ev);
                    }
                }) }),
        };
    };
    exports.useAccordionHeader_unstable = useAccordionHeader_unstable;
});
//# sourceMappingURL=useAccordionHeader.js.map