define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTextareaStyles_unstable = exports.textareaClassNames = void 0;
    exports.textareaClassNames = {
        root: 'fui-Textarea',
        textarea: 'fui-Textarea__textarea',
    };
    var textareaHeight = {
        small: '24px',
        medium: '32px',
        large: '40px',
    };
    /**
     * Styles for the root(wrapper) slot
     */
    var useRootStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', boxSizing: 'border-box', position: 'relative' }, react_1.shorthands.padding('0', '0', react_theme_1.tokens.strokeWidthThick, '0')), react_1.shorthands.margin('0')), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)),
        disabled: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStrokeDisabled)), (_a = {}, _a["& > textarea"] = {
            cursor: 'not-allowed',
            '::placeholder': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        }, _a['@media (forced-colors: active)'] = tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')), _a)),
        interactive: {
            // This is all for the bottom focus border.
            // It's supposed to be 2px flat all the way across and match the radius of the field's corners.
            '::after': tslib_1.__assign(tslib_1.__assign({ boxSizing: 'border-box', content: '""', position: 'absolute', left: '-1px', bottom: '-1px', right: '-1px', 
                // Maintaining the correct corner radius:
                // Use the whole border-radius as the height and only put radii on the bottom corners.
                // (Otherwise the radius would be automatically reduced to fit available space.)
                // max() ensures the focus border still shows up even if someone sets tokens.borderRadiusMedium to 0.
                height: "max(" + react_theme_1.tokens.strokeWidthThick + ", " + react_theme_1.tokens.borderRadiusMedium + ")", borderBottomLeftRadius: react_theme_1.tokens.borderRadiusMedium, borderBottomRightRadius: react_theme_1.tokens.borderRadiusMedium }, react_1.shorthands.borderBottom(react_theme_1.tokens.strokeWidthThick, 'solid', react_theme_1.tokens.colorCompoundBrandStroke)), { clipPath: "inset(calc(100% - " + react_theme_1.tokens.strokeWidthThick + ") 0 0 0)", 
                // Animation for focus OUT
                transform: 'scaleX(0)', transitionProperty: 'transform', transitionDuration: react_theme_1.tokens.durationUltraFast, transitionDelay: react_theme_1.tokens.curveAccelerateMid, '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                } }),
            ':focus-within::after': {
                // Animation for focus IN
                transform: 'scaleX(1)',
                transitionProperty: 'transform',
                transitionDuration: react_theme_1.tokens.durationNormal,
                transitionDelay: react_theme_1.tokens.curveDecelerateMid,
                '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                },
            },
            ':focus-within:active::after': {
                // This is if the user clicks the field again while it's already focused
                borderBottomColor: react_theme_1.tokens.colorCompoundBrandStrokePressed,
            },
            ':focus-within': {
                outlineWidth: react_theme_1.tokens.strokeWidthThick,
                outlineStyle: 'solid',
                outlineColor: 'transparent',
            },
        },
        filled: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorTransparentStroke)), { ':hover,:focus-within': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeInteractive)) }),
        'filled-darker': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground3,
        },
        'filled-lighter': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground1,
        },
        'filled-darker-shadow': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground3 }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorTransparentStrokeInteractive)), { boxShadow: react_theme_1.tokens.shadow2 }),
        'filled-lighter-shadow': tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorTransparentStrokeInteractive)), { boxShadow: react_theme_1.tokens.shadow2 }),
        outline: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStroke1)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
        outlineInteractive: {
            ':hover': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStroke1Hover)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover }),
            ':active': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStroke1Pressed)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed }),
            ':focus-within': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStroke1)), { borderBottomColor: react_theme_1.tokens.colorCompoundBrandStroke }),
        },
        invalid: {
            ':not(:focus-within),:hover:not(:focus-within)': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder2)),
        },
    });
    /**
     * Styles for the textarea slot
     */
    var useTextareaStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderStyle('none')), react_1.shorthands.margin('0')), { backgroundColor: 'transparent', boxSizing: 'border-box', color: react_theme_1.tokens.colorNeutralForeground1, flexGrow: 1, fontFamily: react_theme_1.tokens.fontFamilyBase, height: '100%', maxHeight: '100%', '::placeholder': {
                color: react_theme_1.tokens.colorNeutralForeground4,
                opacity: 1,
            }, '::selection': {
                color: react_theme_1.tokens.colorNeutralForegroundInverted,
                backgroundColor: react_theme_1.tokens.colorNeutralBackgroundInverted,
            }, outlineStyle: 'none' }),
        // The padding style adds both content and regular padding (from design spec), this is because the handle is not
        // affected by changing the padding of the root.
        small: tslib_1.__assign(tslib_1.__assign({ height: textareaHeight.small, minHeight: '40px' }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalXS, "calc(" + react_theme_1.tokens.spacingHorizontalSNudge + " + " + react_theme_1.tokens.spacingHorizontalXXS + ")")), react_theme_1.typographyStyles.caption1),
        medium: tslib_1.__assign(tslib_1.__assign({ height: textareaHeight.medium, minHeight: '52px' }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalSNudge, "calc(" + react_theme_1.tokens.spacingHorizontalMNudge + " + " + react_theme_1.tokens.spacingHorizontalXXS + ")")), react_theme_1.typographyStyles.body1),
        large: tslib_1.__assign(tslib_1.__assign({ height: textareaHeight.large, minHeight: '64px' }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalS, "calc(" + react_theme_1.tokens.spacingHorizontalM + " + " + react_theme_1.tokens.spacingHorizontalXXS + ")")), react_theme_1.typographyStyles.body2),
    });
    /**
     * Styles for the textarea's resize property
     */
    var useTextareaResizeStyles = react_1.makeStyles({
        none: {
            resize: 'none',
        },
        both: {
            resize: 'both',
        },
        horizontal: {
            resize: 'horizontal',
        },
        vertical: {
            resize: 'vertical',
        },
    });
    /**
     * Apply styling to the Textarea slots based on the state
     */
    var useTextareaStyles_unstable = function (state) {
        var size = state.size, appearance = state.appearance, resize = state.resize;
        var disabled = state.textarea.disabled;
        var invalid = "" + state.textarea['aria-invalid'] === 'true';
        var filled = appearance.startsWith('filled');
        var rootStyles = useRootStyles();
        state.root.className = react_1.mergeClasses(exports.textareaClassNames.root, rootStyles.base, rootStyles[appearance], filled && rootStyles.filled, disabled && rootStyles.disabled, !disabled && rootStyles.interactive, !disabled && appearance === 'outline' && rootStyles.outlineInteractive, !disabled && invalid && rootStyles.invalid, state.root.className);
        var textareaStyles = useTextareaStyles();
        var textareaResizeStyles = useTextareaResizeStyles();
        state.textarea.className = react_1.mergeClasses(exports.textareaClassNames.textarea, textareaStyles.base, textareaStyles[size], textareaResizeStyles[resize], state.textarea.className);
        return state;
    };
    exports.useTextareaStyles_unstable = useTextareaStyles_unstable;
});
//# sourceMappingURL=useTextareaStyles.js.map