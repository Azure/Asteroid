{"version":3,"file":"useText.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-text/src/components/Text/useText.ts"],"names":[],"mappings":";;;;IAIA;;;;;;;;OAQG;IACI,IAAM,gBAAgB,GAAG,UAAC,KAAgB,EAAE,GAA2B;;QACpE,IAAA,IAAI,GAAmF,KAAK,KAAxF,EAAE,QAAQ,GAAyE,KAAK,SAA9E,EAAE,KAAK,GAAkE,KAAK,MAAvE,EAAE,MAAM,GAA0D,KAAK,OAA/D,EAAE,SAAS,GAA+C,KAAK,UAApD,EAAE,aAAa,GAAgC,KAAK,cAArC,EAAE,IAAI,GAA0B,KAAK,KAA/B,EAAE,IAAI,GAAoB,KAAK,KAAzB,EAAE,MAAM,GAAY,KAAK,OAAjB,EAAE,KAAK,GAAK,KAAK,MAAV,CAAW;QACrG,IAAM,EAAE,GAAG,MAAA,KAAK,CAAC,EAAE,mCAAI,MAAM,CAAC;QAE9B,IAAM,KAAK,GAAc;YACvB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,OAAO;YACvB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,KAAK;YACrB,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,MAAM;YACpB,MAAM,EAAE,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,KAAK;YACvB,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,GAAG;YACjB,aAAa,EAAE,aAAa,aAAb,aAAa,cAAb,aAAa,GAAI,KAAK;YACrC,QAAQ,EAAE,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,KAAK;YAC3B,SAAS,EAAE,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,KAAK;YAC7B,MAAM,EAAE,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,SAAS;YAC3B,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,IAAI;YAElB,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAE5B,IAAI,EAAE,uCAAqB,CAAC,EAAE,sCAC5B,GAAG,KAAA,IACA,KAAK,KACR,EAAE,IAAA,IACF;SACH,CAAC;QAEF,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IA1BW,QAAA,gBAAgB,oBA0B3B","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps } from '@fluentui/react-utilities';\nimport type { TextProps, TextState } from './Text.types';\n\n/**\n * Create the state required to render Text.\n *\n * The returned state can be modified with hooks such as useTextStyles_unstable,\n * before being passed to renderText_unstable.\n *\n * @param props - props from this instance of Text\n * @param ref - reference to root HTMLElement of Text\n */\nexport const useText_unstable = (props: TextProps, ref: React.Ref<HTMLElement>): TextState => {\n  const { wrap, truncate, block, italic, underline, strikethrough, size, font, weight, align } = props;\n  const as = props.as ?? 'span';\n\n  const state: TextState = {\n    align: align ?? 'start',\n    block: block ?? false,\n    font: font ?? 'base',\n    italic: italic ?? false,\n    size: size ?? 300,\n    strikethrough: strikethrough ?? false,\n    truncate: truncate ?? false,\n    underline: underline ?? false,\n    weight: weight ?? 'regular',\n    wrap: wrap ?? true,\n\n    components: { root: 'span' },\n\n    root: getNativeElementProps(as, {\n      ref,\n      ...props,\n      as,\n    }),\n  };\n\n  return state;\n};\n"]}