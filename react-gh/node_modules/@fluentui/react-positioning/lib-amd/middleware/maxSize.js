define(["require", "exports", "tslib", "@floating-ui/dom", "../utils/index"], function (require, exports, tslib_1, dom_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.maxSize = void 0;
    function maxSize(autoSize) {
        var _this = this;
        return {
            name: 'maxSize',
            fn: function (middlewareArguments) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var placement, rects, elements, middlewareData, basePlacement, overflow, _a, x, y, _b, width, height, widthProp, heightProp, applyMaxWidth, applyMaxHeight;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            placement = middlewareArguments.placement, rects = middlewareArguments.rects, elements = middlewareArguments.elements, middlewareData = middlewareArguments.middlewareData;
                            basePlacement = index_1.parseFloatingUIPlacement(placement).side;
                            return [4 /*yield*/, dom_1.detectOverflow(middlewareArguments)];
                        case 1:
                            overflow = _c.sent();
                            _a = middlewareData.shift || { x: 0, y: 0 }, x = _a.x, y = _a.y;
                            _b = rects.floating, width = _b.width, height = _b.height;
                            widthProp = basePlacement === 'left' ? 'left' : 'right';
                            heightProp = basePlacement === 'top' ? 'top' : 'bottom';
                            applyMaxWidth = autoSize === 'always' ||
                                autoSize === 'width-always' ||
                                (overflow[widthProp] > 0 && (autoSize === true || autoSize === 'width'));
                            applyMaxHeight = autoSize === 'always' ||
                                autoSize === 'height-always' ||
                                (overflow[heightProp] > 0 && (autoSize === true || autoSize === 'height'));
                            if (applyMaxWidth) {
                                elements.floating.style.maxWidth = width - overflow[widthProp] - x + "px";
                            }
                            if (applyMaxHeight) {
                                elements.floating.style.maxHeight = height - overflow[heightProp] - y + "px";
                            }
                            return [2 /*return*/, {}];
                    }
                });
            }); },
        };
    }
    exports.maxSize = maxSize;
});
//# sourceMappingURL=maxSize.js.map