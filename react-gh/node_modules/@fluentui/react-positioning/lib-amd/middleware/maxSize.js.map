{"version":3,"file":"maxSize.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-positioning/src/middleware/maxSize.ts"],"names":[],"mappings":";;;;IAKA,SAAgB,OAAO,CAAC,QAAwC;QAAhE,iBAiCC;QAhCC,OAAO;YACL,IAAI,EAAE,SAAS;YACf,EAAE,EAAE,UAAM,mBAAmB;;;;;4BACnB,SAAS,GAAsC,mBAAmB,UAAzD,EAAE,KAAK,GAA+B,mBAAmB,MAAlD,EAAE,QAAQ,GAAqB,mBAAmB,SAAxC,EAAE,cAAc,GAAK,mBAAmB,eAAxB,CAAyB;4BACrE,aAAa,GAAG,gCAAwB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC;4BAE9C,qBAAM,oBAAc,CAAC,mBAAmB,CAAC,EAAA;;4BAApD,QAAQ,GAAG,SAAyC;4BACpD,KAAW,cAAc,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAA/C,CAAC,OAAA,EAAE,CAAC,OAAA,CAA4C;4BAClD,KAAoB,KAAK,CAAC,QAAQ,EAAhC,KAAK,WAAA,EAAE,MAAM,YAAA,CAAoB;4BAEnC,SAAS,GAAS,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;4BAC9D,UAAU,GAAS,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;4BAE9D,aAAa,GACjB,QAAQ,KAAK,QAAQ;gCACrB,QAAQ,KAAK,cAAc;gCAC3B,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC;4BACrE,cAAc,GAClB,QAAQ,KAAK,QAAQ;gCACrB,QAAQ,KAAK,eAAe;gCAC5B,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAE7E,IAAI,aAAa,EAAE;gCACjB,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,OAAI,CAAC;6BAC3E;4BACD,IAAI,cAAc,EAAE;gCAClB,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,GAAM,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAI,CAAC;6BAC9E;4BAED,sBAAO,EAAE,EAAC;;;iBACX;SACF,CAAC;IACJ,CAAC;IAjCD,0BAiCC","sourcesContent":["import { detectOverflow } from '@floating-ui/dom';\nimport type { Middleware, Side } from '@floating-ui/dom';\nimport type { PositioningOptions } from '../types';\nimport { parseFloatingUIPlacement } from '../utils/index';\n\nexport function maxSize(autoSize: PositioningOptions['autoSize']): Middleware {\n  return {\n    name: 'maxSize',\n    fn: async middlewareArguments => {\n      const { placement, rects, elements, middlewareData } = middlewareArguments;\n      const basePlacement = parseFloatingUIPlacement(placement).side;\n\n      const overflow = await detectOverflow(middlewareArguments);\n      const { x, y } = middlewareData.shift || { x: 0, y: 0 };\n      const { width, height } = rects.floating;\n\n      const widthProp: Side = basePlacement === 'left' ? 'left' : 'right';\n      const heightProp: Side = basePlacement === 'top' ? 'top' : 'bottom';\n\n      const applyMaxWidth =\n        autoSize === 'always' ||\n        autoSize === 'width-always' ||\n        (overflow[widthProp] > 0 && (autoSize === true || autoSize === 'width'));\n      const applyMaxHeight =\n        autoSize === 'always' ||\n        autoSize === 'height-always' ||\n        (overflow[heightProp] > 0 && (autoSize === true || autoSize === 'height'));\n\n      if (applyMaxWidth) {\n        elements.floating.style.maxWidth = `${width - overflow[widthProp] - x}px`;\n      }\n      if (applyMaxHeight) {\n        elements.floating.style.maxHeight = `${height - overflow[heightProp] - y}px`;\n      }\n\n      return {};\n    },\n  };\n}\n"]}