{"version":3,"file":"usePositioningMouseTarget.js","sourceRoot":"","sources":["../../../../../../../packages/react-components/react-positioning/src/usePositioningMouseTarget.ts"],"names":[],"mappings":";;;;IAIA;;;;;;;;OAQG;IACI,IAAM,yBAAyB,GAAG,UACvC,YAA4E;QAEtE,IAAA,KAAsC,KAAK,CAAC,QAAQ,CAAwC,YAAY,CAAC,EAAxG,cAAc,QAAA,EAAE,iBAAiB,QAAuE,CAAC;QAEhH,IAAM,qBAAqB,GAA0B,UAAA,KAAK;YACxD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;gBACzC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBAC7B,OAAO;aACR;YAED,IAAI,UAAsB,CAAC;YAC3B,IAAI,CAAC,CAAC,KAAK,YAAY,UAAU,CAAC,EAAE;gBAClC,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC;aAChC;iBAAM;gBACL,UAAU,GAAG,KAAK,CAAC;aACpB;YAED,IAAI,CAAC,CAAC,UAAU,YAAY,UAAU,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;gBAChF,sCAAsC;gBACtC,OAAO,CAAC,KAAK,CAAC,+DAA+D,CAAC,CAAC;aAChF;YAED,IAAM,aAAa,GAAG,6DAA6B,CAAC,UAAU,CAAC,CAAC;YAChE,iBAAiB,CAAC,aAAa,CAAC,CAAC;QACnC,CAAC,CAAC;QAEF,OAAO,CAAC,cAAc,EAAE,qBAAqB,CAAU,CAAC;IAC1D,CAAC,CAAC;IA5BW,QAAA,yBAAyB,6BA4BpC","sourcesContent":["import * as React from 'react';\nimport { createVirtualElementFromClick } from './createVirtualElementFromClick';\nimport { PositioningVirtualElement, SetVirtualMouseTarget } from './types';\n\n/**\n * @internal\n * A state hook that manages a popper virtual element from mouseevents.\n * Useful for scenarios where a component needs to be positioned by mouse click (e.g. contextmenu)\n * React synthetic events are not persisted by this hook\n *\n * @param initialState - initializes a user provided state similare to useState\n * @returns state and dispatcher for a Popper virtual element that uses native/synthetic mouse events\n */\nexport const usePositioningMouseTarget = (\n  initialState?: PositioningVirtualElement | (() => PositioningVirtualElement),\n) => {\n  const [virtualElement, setVirtualElement] = React.useState<PositioningVirtualElement | undefined>(initialState);\n\n  const setVirtualMouseTarget: SetVirtualMouseTarget = event => {\n    if (event === undefined || event === null) {\n      setVirtualElement(undefined);\n      return;\n    }\n\n    let mouseevent: MouseEvent;\n    if (!(event instanceof MouseEvent)) {\n      mouseevent = event.nativeEvent;\n    } else {\n      mouseevent = event;\n    }\n\n    if (!(mouseevent instanceof MouseEvent) && process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error('usePositioningMouseTarget should only be used with MouseEvent');\n    }\n\n    const contextTarget = createVirtualElementFromClick(mouseevent);\n    setVirtualElement(contextTarget);\n  };\n\n  return [virtualElement, setVirtualMouseTarget] as const;\n};\n"]}