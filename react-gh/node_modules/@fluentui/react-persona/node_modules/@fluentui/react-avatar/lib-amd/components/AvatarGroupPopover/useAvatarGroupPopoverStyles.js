define(["require", "exports", "tslib", "@fluentui/react-tabster", "@griffel/react", "@fluentui/react-theme", "../AvatarGroupItem/useAvatarGroupItemStyles", "../Avatar/useAvatarStyles"], function (require, exports, tslib_1, react_tabster_1, react_1, react_theme_1, useAvatarGroupItemStyles_1, useAvatarStyles_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAvatarGroupPopoverStyles_unstable = exports.avatarGroupPopoverClassNames = void 0;
    exports.avatarGroupPopoverClassNames = {
        root: 'fui-AvatarGroupPopover',
        content: 'fui-AvatarGroupPopover__content',
        popoverSurface: 'fui-AvatarGroupPopover__popoverSurface',
        tooltip: 'fui-AvatarGroupPopover__tooltip',
        triggerButton: 'fui-AvatarGroupPopover__triggerButton',
    };
    /**
     * Styles for the content slot.
     */
    var useContentStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign({ listStyleType: 'none' }, react_1.shorthands.margin('0')), react_1.shorthands.padding('0')),
    });
    /**
     * Styles for the popoverSurface slot.
     */
    var usePopoverSurfaceStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ maxHeight: '220px', minHeight: '80px' }, react_1.shorthands.overflow('hidden', 'scroll')), react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalS, react_theme_1.tokens.spacingHorizontalS)), { width: '220px' }),
    });
    /**
     * Styles for the triggerButton slot.
     */
    var useTriggerButtonStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', position: 'relative', flexShrink: 0, justifyContent: 'center', alignItems: 'center', color: react_theme_1.tokens.colorNeutralForeground1, backgroundColor: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), react_1.shorthands.borderStyle('solid')), react_1.shorthands.padding(0)), { 
            // Match color to Avatar's outline color.
            '@media (forced-colors: active)': tslib_1.__assign({}, react_1.shorthands.borderColor('CanvasText')) }),
        pie: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStroke)), { color: 'transparent' }),
        focusIndicator: react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign({}, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThick, 'solid', react_theme_1.tokens.colorStrokeFocus2))),
        states: {
            '&:hover': tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground1Hover, backgroundColor: react_theme_1.tokens.colorNeutralBackground1Hover }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Hover)),
            '&:active': tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground1Pressed, backgroundColor: react_theme_1.tokens.colorNeutralBackground1Pressed }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Pressed)),
        },
        selected: tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground1Selected, backgroundColor: react_theme_1.tokens.colorNeutralBackground1Selected }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Selected)),
        icon12: { fontSize: '12px' },
        icon16: { fontSize: '16px' },
        icon20: { fontSize: '20px' },
        icon24: { fontSize: '24px' },
        icon28: { fontSize: '28px' },
        icon32: { fontSize: '32px' },
        icon48: { fontSize: '48px' },
        caption2Strong: tslib_1.__assign({}, react_theme_1.typographyStyles.caption2Strong),
        caption1Strong: tslib_1.__assign({}, react_theme_1.typographyStyles.caption1Strong),
        body1Strong: tslib_1.__assign({}, react_theme_1.typographyStyles.body1Strong),
        subtitle2: tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle2),
        subtitle1: tslib_1.__assign({}, react_theme_1.typographyStyles.subtitle1),
        title3: tslib_1.__assign({}, react_theme_1.typographyStyles.title3),
        borderThin: tslib_1.__assign({}, react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThin)),
        borderThick: tslib_1.__assign({}, react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThick)),
        borderThicker: tslib_1.__assign({}, react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThicker)),
        borderThickest: tslib_1.__assign({}, react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThickest)),
    });
    /**
     * Apply styling to the AvatarGroupPopover slots based on the state
     */
    var useAvatarGroupPopoverStyles_unstable = function (state) {
        var indicator = state.indicator, size = state.size, layout = state.layout, popoverOpen = state.popoverOpen;
        var sizeStyles = useAvatarStyles_1.useSizeStyles();
        var triggerButtonStyles = useTriggerButtonStyles();
        var contentStyles = useContentStyles();
        var popoverSurfaceStyles = usePopoverSurfaceStyles();
        var groupChildClassName = useAvatarGroupItemStyles_1.useGroupChildClassName(layout, size);
        var triggerButtonClasses = [];
        if (size < 36) {
            triggerButtonClasses.push(triggerButtonStyles.borderThin);
        }
        else if (size < 56) {
            triggerButtonClasses.push(triggerButtonStyles.borderThick);
        }
        else if (size < 72) {
            triggerButtonClasses.push(triggerButtonStyles.borderThicker);
        }
        else {
            triggerButtonClasses.push(triggerButtonStyles.borderThickest);
        }
        if (indicator === 'count') {
            if (size <= 24) {
                triggerButtonClasses.push(triggerButtonStyles.caption2Strong);
            }
            else if (size <= 28) {
                triggerButtonClasses.push(triggerButtonStyles.caption1Strong);
            }
            else if (size <= 40) {
                triggerButtonClasses.push(triggerButtonStyles.body1Strong);
            }
            else if (size <= 56) {
                triggerButtonClasses.push(triggerButtonStyles.subtitle2);
            }
            else if (size <= 96) {
                triggerButtonClasses.push(triggerButtonStyles.subtitle1);
            }
            else {
                triggerButtonClasses.push(triggerButtonStyles.title3);
            }
        }
        else {
            if (size <= 16) {
                triggerButtonClasses.push(triggerButtonStyles.icon12);
            }
            else if (size <= 24) {
                triggerButtonClasses.push(triggerButtonStyles.icon16);
            }
            else if (size <= 40) {
                triggerButtonClasses.push(triggerButtonStyles.icon20);
            }
            else if (size <= 48) {
                triggerButtonClasses.push(triggerButtonStyles.icon24);
            }
            else if (size <= 56) {
                triggerButtonClasses.push(triggerButtonStyles.icon28);
            }
            else if (size <= 72) {
                triggerButtonClasses.push(triggerButtonStyles.icon32);
            }
            else {
                triggerButtonClasses.push(triggerButtonStyles.icon48);
            }
        }
        state.triggerButton.className = react_1.mergeClasses.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray([exports.avatarGroupPopoverClassNames.triggerButton,
            groupChildClassName,
            sizeStyles[size],
            triggerButtonStyles.base,
            layout === 'pie' && triggerButtonStyles.pie,
            triggerButtonStyles.focusIndicator,
            layout !== 'pie' && triggerButtonStyles.states,
            layout !== 'pie' && popoverOpen && triggerButtonStyles.selected], triggerButtonClasses), [state.triggerButton.className]));
        state.content.className = react_1.mergeClasses(exports.avatarGroupPopoverClassNames.content, contentStyles.base, state.content.className);
        state.popoverSurface.className = react_1.mergeClasses(exports.avatarGroupPopoverClassNames.popoverSurface, popoverSurfaceStyles.base, state.popoverSurface.className);
        return state;
    };
    exports.useAvatarGroupPopoverStyles_unstable = useAvatarGroupPopoverStyles_unstable;
});
//# sourceMappingURL=useAvatarGroupPopoverStyles.js.map