define(["require", "exports", "tslib", "react", "../../contexts/AvatarGroupContext", "../AvatarGroup/useAvatarGroup", "@fluentui/react-utilities", "@fluentui/react-icons", "@fluentui/react-popover", "@fluentui/react-tooltip"], function (require, exports, tslib_1, React, AvatarGroupContext_1, useAvatarGroup_1, react_utilities_1, react_icons_1, react_popover_1, react_tooltip_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAvatarGroupPopover_unstable = void 0;
    /**
     * Create the state required to render AvatarGroupPopover.
     *
     * The returned state can be modified with hooks such as useAvatarGroupPopoverStyles_unstable,
     * before being passed to renderAvatarGroupPopover_unstable.
     *
     * @param props - props from this instance of AvatarGroupPopover
     */
    var useAvatarGroupPopover_unstable = function (props) {
        var _a;
        var size = (_a = AvatarGroupContext_1.useAvatarGroupContext_unstable(function (ctx) { return ctx.size; })) !== null && _a !== void 0 ? _a : useAvatarGroup_1.defaultAvatarGroupSize;
        var layout = AvatarGroupContext_1.useAvatarGroupContext_unstable(function (ctx) { return ctx.layout; });
        var _b = props.indicator, indicator = _b === void 0 ? size < 24 ? 'icon' : 'count' : _b, _c = props.count, count = _c === void 0 ? React.Children.count(props.children) : _c, children = props.children, restOfProps = tslib_1.__rest(props, ["indicator", "count", "children"]);
        var _d = react_utilities_1.useControllableState({
            state: props.open,
            defaultState: props.defaultOpen,
            initialState: false,
        }), popoverOpen = _d[0], setPopoverOpen = _d[1];
        var handleOnPopoverChange = function (e, data) {
            var _a;
            (_a = restOfProps.onOpenChange) === null || _a === void 0 ? void 0 : _a.call(restOfProps, e, data);
            setPopoverOpen(data.open);
        };
        var triggerButtonChildren;
        if (layout === 'pie') {
            triggerButtonChildren = null;
        }
        else if (indicator === 'icon') {
            triggerButtonChildren = React.createElement(react_icons_1.MoreHorizontalRegular, null);
        }
        else {
            triggerButtonChildren = count > 99 ? '99+' : "+" + count;
        }
        return {
            count: count,
            indicator: indicator,
            layout: layout,
            popoverOpen: popoverOpen,
            size: size,
            components: {
                root: react_popover_1.Popover,
                triggerButton: 'button',
                content: 'ul',
                popoverSurface: react_popover_1.PopoverSurface,
                tooltip: react_tooltip_1.Tooltip,
            },
            root: tslib_1.__assign(tslib_1.__assign({ 
                // Popover expects a child for its children. The children are added in the renderAvatarGroupPopover.
                children: React.createElement(React.Fragment, null), size: 'small', trapFocus: true }, restOfProps), { open: popoverOpen, onOpenChange: handleOnPopoverChange }),
            triggerButton: react_utilities_1.resolveShorthand(props.triggerButton, {
                required: true,
                defaultProps: {
                    children: triggerButtonChildren,
                    type: 'button',
                },
            }),
            content: react_utilities_1.resolveShorthand(props.content, {
                required: true,
                defaultProps: {
                    children: children,
                    role: 'list',
                },
            }),
            popoverSurface: react_utilities_1.resolveShorthand(props.popoverSurface, {
                required: true,
                defaultProps: {
                    'aria-label': 'Overflow',
                    tabIndex: 0,
                },
            }),
            tooltip: react_utilities_1.resolveShorthand(props.tooltip, {
                required: true,
                defaultProps: {
                    content: 'View more people.',
                    relationship: 'label',
                },
            }),
        };
    };
    exports.useAvatarGroupPopover_unstable = useAvatarGroupPopover_unstable;
});
//# sourceMappingURL=useAvatarGroupPopover.js.map