{"version":3,"sources":["packages/react-components/react-slider/src/components/Slider/useSliderStyles.ts"],"names":[],"mappings":"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","sourcesContent":["import { shorthands, makeStyles, mergeClasses } from '@griffel/react';\nimport { createFocusOutlineStyle } from '@fluentui/react-tabster';\nimport { tokens } from '@fluentui/react-theme';\nimport type { SliderState, SliderSlots } from './Slider.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\nexport const sliderClassNames: SlotClassNames<SliderSlots> = {\n  root: 'fui-Slider',\n  rail: 'fui-Slider__rail',\n  thumb: 'fui-Slider__thumb',\n  input: 'fui-Slider__input',\n};\n\n// Internal CSS variables\nconst thumbSizeVar = `--fui-Slider__thumb--size`;\nconst railSizeVar = `--fui-Slider__rail--size`;\nconst railColorVar = `--fui-Slider__rail--color`;\nconst progressColorVar = `--fui-Slider__progress--color`;\nconst thumbColorVar = `--fui-Slider__thumb--color`;\n\nexport const sliderCSSVars = {\n  sliderDirectionVar: `--fui-Slider--direction`,\n  sliderProgressVar: `--fui-Slider--progress`,\n  sliderStepsPercentVar: `--fui-Slider--steps-percent`,\n};\n\nconst { sliderDirectionVar, sliderStepsPercentVar, sliderProgressVar } = sliderCSSVars;\n\n/**\n * Styles for the root slot\n */\nconst useRootStyles = makeStyles({\n  root: {\n    position: 'relative',\n    display: 'inline-grid',\n    touchAction: 'none',\n    alignItems: 'center',\n    justifyItems: 'center',\n  },\n\n  small: {\n    [thumbSizeVar]: '16px',\n    [railSizeVar]: '2px',\n    minHeight: '24px',\n  },\n\n  medium: {\n    [thumbSizeVar]: '20px',\n    [railSizeVar]: '4px',\n    minHeight: '32px',\n  },\n\n  horizontal: {\n    minWidth: '120px',\n    // 3x3 grid with the rail and thumb in the center cell [2,2] and the hidden input stretching across all cells\n    gridTemplateRows: `1fr var(${thumbSizeVar}) 1fr`,\n    gridTemplateColumns: `1fr calc(100% - var(${thumbSizeVar})) 1fr`,\n  },\n\n  vertical: {\n    minHeight: '120px',\n    // 3x3 grid with the rail and thumb in the center cell [2,2] and the hidden input stretching across all cells\n    gridTemplateRows: `1fr calc(100% - var(${thumbSizeVar})) 1fr`,\n    gridTemplateColumns: `1fr var(${thumbSizeVar}) 1fr`,\n  },\n\n  enabled: {\n    [railColorVar]: tokens.colorNeutralStrokeAccessible,\n    [progressColorVar]: tokens.colorCompoundBrandBackground,\n    [thumbColorVar]: tokens.colorCompoundBrandBackground,\n    ':hover': {\n      [thumbColorVar]: tokens.colorCompoundBrandBackgroundHover,\n      [progressColorVar]: tokens.colorCompoundBrandBackgroundHover,\n    },\n    ':active': {\n      [thumbColorVar]: tokens.colorCompoundBrandBackgroundPressed,\n      [progressColorVar]: tokens.colorCompoundBrandBackgroundPressed,\n    },\n    '@media (forced-colors: active)': {\n      [railColorVar]: 'CanvasText',\n      [thumbColorVar]: 'Highlight',\n      [progressColorVar]: 'Highlight',\n      ':hover': {\n        [thumbColorVar]: 'Highlight',\n        [progressColorVar]: 'Highlight',\n      },\n    },\n  },\n\n  disabled: {\n    [thumbColorVar]: tokens.colorNeutralForegroundDisabled,\n    [railColorVar]: tokens.colorNeutralBackgroundDisabled,\n    [progressColorVar]: tokens.colorNeutralForegroundDisabled,\n    '@media (forced-colors: active)': {\n      [railColorVar]: 'GrayText',\n      [thumbColorVar]: 'GrayText',\n      [progressColorVar]: 'GrayText',\n    },\n  },\n\n  focusIndicatorHorizontal: createFocusOutlineStyle({\n    selector: 'focus-within',\n    style: { outlineOffset: { top: '-2px', bottom: '-2px', left: '8px', right: '8px' } },\n  }),\n\n  focusIndicatorVertical: createFocusOutlineStyle({\n    selector: 'focus-within',\n    style: { outlineOffset: { top: '6px', bottom: '6px', left: '4px', right: '4px' } },\n  }),\n});\n\n/**\n * Styles for the rail slot\n */\nconst useRailStyles = makeStyles({\n  rail: {\n    ...shorthands.borderRadius(tokens.borderRadiusXLarge),\n    pointerEvents: 'none',\n    gridRowStart: '2',\n    gridRowEnd: '2',\n    gridColumnStart: '2',\n    gridColumnEnd: '2',\n    position: 'relative',\n    forcedColorAdjust: 'none',\n    // Background gradient represents the progress of the slider\n    backgroundImage: `linear-gradient(\n      var(${sliderDirectionVar}),\n      var(${progressColorVar}) 0%,\n      var(${progressColorVar}) var(${sliderProgressVar}),\n      var(${railColorVar}) var(${sliderProgressVar})\n    )`,\n    outlineWidth: '1px',\n    outlineStyle: 'solid',\n    outlineColor: tokens.colorTransparentStroke,\n    '::before': {\n      content: \"''\",\n      position: 'absolute',\n      // Repeating gradient represents the steps if provided\n      backgroundImage: `repeating-linear-gradient(\n        var(${sliderDirectionVar}),\n        #0000 0%,\n        #0000 calc(var(${sliderStepsPercentVar}) - 1px),\n        ${tokens.colorNeutralBackground1} calc(var(${sliderStepsPercentVar}) - 1px),\n        ${tokens.colorNeutralBackground1} var(${sliderStepsPercentVar})\n      )`,\n      // force steps to use HighlightText for high contrast mode\n      '@media (forced-colors: active)': {\n        backgroundImage: `repeating-linear-gradient(\n          var(${sliderDirectionVar}),\n          #0000 0%,\n          #0000 calc(var(${sliderStepsPercentVar}) - 1px),\n          HighlightText calc(var(${sliderStepsPercentVar}) - 1px),\n          HighlightText var(${sliderStepsPercentVar})\n        )`,\n      },\n    },\n  },\n\n  horizontal: {\n    width: '100%',\n    height: `var(${railSizeVar})`,\n    '::before': {\n      left: '-1px',\n      right: '-1px',\n      height: `var(${railSizeVar})`,\n    },\n  },\n\n  vertical: {\n    width: `var(${railSizeVar})`,\n    height: '100%',\n    '::before': {\n      width: `var(${railSizeVar})`,\n      top: '-1px',\n      bottom: '1px',\n    },\n  },\n});\n\n/**\n * Styles for the thumb slot\n */\nconst useThumbStyles = makeStyles({\n  thumb: {\n    gridRowStart: '2',\n    gridRowEnd: '2',\n    gridColumnStart: '2',\n    gridColumnEnd: '2',\n    position: 'absolute',\n    width: `var(${thumbSizeVar})`,\n    height: `var(${thumbSizeVar})`,\n    pointerEvents: 'none',\n    outlineStyle: 'none',\n    forcedColorAdjust: 'none',\n    ...shorthands.borderRadius(tokens.borderRadiusCircular),\n    boxShadow: `0 0 0 calc(var(${thumbSizeVar}) * .2) ${tokens.colorNeutralBackground1} inset`,\n    backgroundColor: `var(${thumbColorVar})`,\n    '::before': {\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      bottom: '0px',\n      right: '0px',\n      ...shorthands.borderRadius(tokens.borderRadiusCircular),\n      boxSizing: 'border-box',\n      content: \"''\",\n      ...shorthands.border(`calc(var(${thumbSizeVar}) * .05)`, 'solid', tokens.colorNeutralStroke1),\n    },\n  },\n  disabled: {\n    '::before': {\n      ...shorthands.border(`calc(var(${thumbSizeVar}) * .05)`, 'solid', tokens.colorNeutralForegroundDisabled),\n    },\n  },\n  horizontal: {\n    transform: 'translateX(-50%)',\n    left: `var(${sliderProgressVar})`,\n  },\n  vertical: {\n    transform: 'translateY(50%)',\n    bottom: `var(${sliderProgressVar})`,\n  },\n});\n\n/**\n * Styles for the Input slot\n */\nconst useInputStyles = makeStyles({\n  input: {\n    cursor: 'pointer',\n    opacity: 0,\n    gridRowStart: '1',\n    gridRowEnd: '-1',\n    gridColumnStart: '1',\n    gridColumnEnd: '-1',\n    ...shorthands.padding(0),\n    ...shorthands.margin(0),\n  },\n  disabled: {\n    cursor: 'default',\n  },\n  horizontal: {\n    height: `var(${thumbSizeVar})`,\n    width: '100%',\n  },\n  vertical: {\n    height: '100%',\n    width: `var(${thumbSizeVar})`,\n    '-webkit-appearance': 'slider-vertical',\n  },\n});\n\n/**\n * Apply styling to the Slider slots based on the state\n */\nexport const useSliderStyles_unstable = (state: SliderState): SliderState => {\n  const rootStyles = useRootStyles();\n  const railStyles = useRailStyles();\n  const thumbStyles = useThumbStyles();\n  const inputStyles = useInputStyles();\n  const isVertical = state.vertical;\n\n  state.root.className = mergeClasses(\n    sliderClassNames.root,\n    rootStyles.root,\n    isVertical ? rootStyles.focusIndicatorVertical : rootStyles.focusIndicatorHorizontal,\n    rootStyles[state.size!],\n    isVertical ? rootStyles.vertical : rootStyles.horizontal,\n    state.disabled ? rootStyles.disabled : rootStyles.enabled,\n    state.root.className,\n  );\n\n  state.rail.className = mergeClasses(\n    sliderClassNames.rail,\n    railStyles.rail,\n    isVertical ? railStyles.vertical : railStyles.horizontal,\n    state.rail.className,\n  );\n\n  state.thumb.className = mergeClasses(\n    sliderClassNames.thumb,\n    thumbStyles.thumb,\n    isVertical ? thumbStyles.vertical : thumbStyles.horizontal,\n    state.disabled && thumbStyles.disabled,\n    state.thumb.className,\n  );\n\n  state.input.className = mergeClasses(\n    sliderClassNames.input,\n    inputStyles.input,\n    isVertical ? inputStyles.vertical : inputStyles.horizontal,\n    state.disabled && inputStyles.disabled,\n    state.input.className,\n  );\n\n  return state;\n};\n"],"sourceRoot":"../src/"}