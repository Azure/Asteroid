define(["require", "exports", "tslib", "@fluentui/react-utilities", "@fluentui/react-shared-contexts", "./useSliderStyles"], function (require, exports, tslib_1, react_utilities_1, react_shared_contexts_1, useSliderStyles_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSliderState_unstable = void 0;
    var sliderStepsPercentVar = useSliderStyles_1.sliderCSSVars.sliderStepsPercentVar, sliderProgressVar = useSliderStyles_1.sliderCSSVars.sliderProgressVar, sliderDirectionVar = useSliderStyles_1.sliderCSSVars.sliderDirectionVar;
    var getPercent = function (value, min, max) {
        return max === min ? 0 : ((value - min) / (max - min)) * 100;
    };
    var useSliderState_unstable = function (state, props) {
        var _a;
        var _b = props.defaultValue, defaultValue = _b === void 0 ? 0 : _b, _c = props.min, min = _c === void 0 ? 0 : _c, _d = props.max, max = _d === void 0 ? 100 : _d, step = props.step, value = props.value;
        var dir = react_shared_contexts_1.useFluent_unstable().dir;
        var _e = react_utilities_1.useControllableState({
            state: value !== undefined ? react_utilities_1.clamp(value, min, max) : undefined,
            defaultState: react_utilities_1.clamp(defaultValue, min, max),
            initialState: 0,
        }), currentValue = _e[0], setCurrentValue = _e[1];
        var valuePercent = getPercent(currentValue, min, max);
        var inputOnChange = state.input.onChange;
        var propsOnChange = props.onChange;
        var onChange = react_utilities_1.useEventCallback(function (ev) {
            var newValue = Number(ev.target.value);
            setCurrentValue(react_utilities_1.clamp(newValue, min, max));
            if (inputOnChange && inputOnChange !== propsOnChange) {
                inputOnChange(ev);
            }
            else if (propsOnChange) {
                propsOnChange(ev, { value: newValue });
            }
        });
        var rootVariables = (_a = {},
            _a[sliderDirectionVar] = state.vertical ? '0deg' : dir === 'ltr' ? '90deg' : '270deg',
            _a[sliderStepsPercentVar] = step && step > 0 ? (step * 100) / (max - min) + "%" : '',
            _a[sliderProgressVar] = valuePercent + "%",
            _a);
        // Root props
        state.root.style = tslib_1.__assign(tslib_1.__assign({}, rootVariables), state.root.style);
        // Input Props
        state.input.value = currentValue;
        state.input.onChange = onChange;
        return state;
    };
    exports.useSliderState_unstable = useSliderState_unstable;
});
//# sourceMappingURL=useSliderState.js.map