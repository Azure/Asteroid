define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-tabster", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_tabster_1, react_theme_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSliderStyles_unstable = exports.sliderCSSVars = exports.sliderClassNames = void 0;
    exports.sliderClassNames = {
        root: 'fui-Slider',
        rail: 'fui-Slider__rail',
        thumb: 'fui-Slider__thumb',
        input: 'fui-Slider__input',
    };
    // Internal CSS variables
    var thumbSizeVar = "--fui-Slider__thumb--size";
    var railSizeVar = "--fui-Slider__rail--size";
    var railColorVar = "--fui-Slider__rail--color";
    var progressColorVar = "--fui-Slider__progress--color";
    var thumbColorVar = "--fui-Slider__thumb--color";
    exports.sliderCSSVars = {
        sliderDirectionVar: "--fui-Slider--direction",
        sliderProgressVar: "--fui-Slider--progress",
        sliderStepsPercentVar: "--fui-Slider--steps-percent",
    };
    var sliderDirectionVar = exports.sliderCSSVars.sliderDirectionVar, sliderStepsPercentVar = exports.sliderCSSVars.sliderStepsPercentVar, sliderProgressVar = exports.sliderCSSVars.sliderProgressVar;
    /**
     * Styles for the root slot
     */
    var useRootStyles = react_1.makeStyles({
        root: {
            position: 'relative',
            display: 'inline-grid',
            touchAction: 'none',
            alignItems: 'center',
            justifyItems: 'center',
        },
        small: (_a = {},
            _a[thumbSizeVar] = '16px',
            _a[railSizeVar] = '2px',
            _a.minHeight = '24px',
            _a),
        medium: (_b = {},
            _b[thumbSizeVar] = '20px',
            _b[railSizeVar] = '4px',
            _b.minHeight = '32px',
            _b),
        horizontal: {
            minWidth: '120px',
            // 3x3 grid with the rail and thumb in the center cell [2,2] and the hidden input stretching across all cells
            gridTemplateRows: "1fr var(" + thumbSizeVar + ") 1fr",
            gridTemplateColumns: "1fr calc(100% - var(" + thumbSizeVar + ")) 1fr",
        },
        vertical: {
            minHeight: '120px',
            // 3x3 grid with the rail and thumb in the center cell [2,2] and the hidden input stretching across all cells
            gridTemplateRows: "1fr calc(100% - var(" + thumbSizeVar + ")) 1fr",
            gridTemplateColumns: "1fr var(" + thumbSizeVar + ") 1fr",
        },
        enabled: (_c = {},
            _c[railColorVar] = react_theme_1.tokens.colorNeutralStrokeAccessible,
            _c[progressColorVar] = react_theme_1.tokens.colorCompoundBrandBackground,
            _c[thumbColorVar] = react_theme_1.tokens.colorCompoundBrandBackground,
            _c[':hover'] = (_d = {},
                _d[thumbColorVar] = react_theme_1.tokens.colorCompoundBrandBackgroundHover,
                _d[progressColorVar] = react_theme_1.tokens.colorCompoundBrandBackgroundHover,
                _d),
            _c[':active'] = (_e = {},
                _e[thumbColorVar] = react_theme_1.tokens.colorCompoundBrandBackgroundPressed,
                _e[progressColorVar] = react_theme_1.tokens.colorCompoundBrandBackgroundPressed,
                _e),
            _c['@media (forced-colors: active)'] = (_f = {},
                _f[railColorVar] = 'CanvasText',
                _f[thumbColorVar] = 'Highlight',
                _f[progressColorVar] = 'Highlight',
                _f[':hover'] = (_g = {},
                    _g[thumbColorVar] = 'Highlight',
                    _g[progressColorVar] = 'Highlight',
                    _g),
                _f),
            _c),
        disabled: (_h = {},
            _h[thumbColorVar] = react_theme_1.tokens.colorNeutralForegroundDisabled,
            _h[railColorVar] = react_theme_1.tokens.colorNeutralBackgroundDisabled,
            _h[progressColorVar] = react_theme_1.tokens.colorNeutralForegroundDisabled,
            _h['@media (forced-colors: active)'] = (_j = {},
                _j[railColorVar] = 'GrayText',
                _j[thumbColorVar] = 'GrayText',
                _j[progressColorVar] = 'GrayText',
                _j),
            _h),
        focusIndicatorHorizontal: react_tabster_1.createFocusOutlineStyle({
            selector: 'focus-within',
            style: { outlineOffset: { top: '-2px', bottom: '-2px', left: '8px', right: '8px' } },
        }),
        focusIndicatorVertical: react_tabster_1.createFocusOutlineStyle({
            selector: 'focus-within',
            style: { outlineOffset: { top: '6px', bottom: '6px', left: '4px', right: '4px' } },
        }),
    });
    /**
     * Styles for the rail slot
     */
    var useRailStyles = react_1.makeStyles({
        rail: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusXLarge)), { pointerEvents: 'none', gridRowStart: '2', gridRowEnd: '2', gridColumnStart: '2', gridColumnEnd: '2', position: 'relative', forcedColorAdjust: 'none', 
            // Background gradient represents the progress of the slider
            backgroundImage: "linear-gradient(\n      var(" + sliderDirectionVar + "),\n      var(" + progressColorVar + ") 0%,\n      var(" + progressColorVar + ") var(" + sliderProgressVar + "),\n      var(" + railColorVar + ") var(" + sliderProgressVar + ")\n    )", outlineWidth: '1px', outlineStyle: 'solid', outlineColor: react_theme_1.tokens.colorTransparentStroke, '::before': {
                content: "''",
                position: 'absolute',
                // Repeating gradient represents the steps if provided
                backgroundImage: "repeating-linear-gradient(\n        var(" + sliderDirectionVar + "),\n        #0000 0%,\n        #0000 calc(var(" + sliderStepsPercentVar + ") - 1px),\n        " + react_theme_1.tokens.colorNeutralBackground1 + " calc(var(" + sliderStepsPercentVar + ") - 1px),\n        " + react_theme_1.tokens.colorNeutralBackground1 + " var(" + sliderStepsPercentVar + ")\n      )",
                // force steps to use HighlightText for high contrast mode
                '@media (forced-colors: active)': {
                    backgroundImage: "repeating-linear-gradient(\n          var(" + sliderDirectionVar + "),\n          #0000 0%,\n          #0000 calc(var(" + sliderStepsPercentVar + ") - 1px),\n          HighlightText calc(var(" + sliderStepsPercentVar + ") - 1px),\n          HighlightText var(" + sliderStepsPercentVar + ")\n        )",
                },
            } }),
        horizontal: {
            width: '100%',
            height: "var(" + railSizeVar + ")",
            '::before': {
                left: '-1px',
                right: '-1px',
                height: "var(" + railSizeVar + ")",
            },
        },
        vertical: {
            width: "var(" + railSizeVar + ")",
            height: '100%',
            '::before': {
                width: "var(" + railSizeVar + ")",
                top: '-1px',
                bottom: '1px',
            },
        },
    });
    /**
     * Styles for the thumb slot
     */
    var useThumbStyles = react_1.makeStyles({
        thumb: tslib_1.__assign(tslib_1.__assign({ gridRowStart: '2', gridRowEnd: '2', gridColumnStart: '2', gridColumnEnd: '2', position: 'absolute', width: "var(" + thumbSizeVar + ")", height: "var(" + thumbSizeVar + ")", pointerEvents: 'none', outlineStyle: 'none', forcedColorAdjust: 'none' }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), { boxShadow: "0 0 0 calc(var(" + thumbSizeVar + ") * .2) " + react_theme_1.tokens.colorNeutralBackground1 + " inset", backgroundColor: "var(" + thumbColorVar + ")", '::before': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'absolute', top: '0px', left: '0px', bottom: '0px', right: '0px' }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), { boxSizing: 'border-box', content: "''" }), react_1.shorthands.border("calc(var(" + thumbSizeVar + ") * .05)", 'solid', react_theme_1.tokens.colorNeutralStroke1)) }),
        disabled: {
            '::before': tslib_1.__assign({}, react_1.shorthands.border("calc(var(" + thumbSizeVar + ") * .05)", 'solid', react_theme_1.tokens.colorNeutralForegroundDisabled)),
        },
        horizontal: {
            transform: 'translateX(-50%)',
            left: "var(" + sliderProgressVar + ")",
        },
        vertical: {
            transform: 'translateY(50%)',
            bottom: "var(" + sliderProgressVar + ")",
        },
    });
    /**
     * Styles for the Input slot
     */
    var useInputStyles = react_1.makeStyles({
        input: tslib_1.__assign(tslib_1.__assign({ cursor: 'pointer', opacity: 0, gridRowStart: '1', gridRowEnd: '-1', gridColumnStart: '1', gridColumnEnd: '-1' }, react_1.shorthands.padding(0)), react_1.shorthands.margin(0)),
        disabled: {
            cursor: 'default',
        },
        horizontal: {
            height: "var(" + thumbSizeVar + ")",
            width: '100%',
        },
        vertical: {
            height: '100%',
            width: "var(" + thumbSizeVar + ")",
            '-webkit-appearance': 'slider-vertical',
        },
    });
    /**
     * Apply styling to the Slider slots based on the state
     */
    var useSliderStyles_unstable = function (state) {
        var rootStyles = useRootStyles();
        var railStyles = useRailStyles();
        var thumbStyles = useThumbStyles();
        var inputStyles = useInputStyles();
        var isVertical = state.vertical;
        state.root.className = react_1.mergeClasses(exports.sliderClassNames.root, rootStyles.root, isVertical ? rootStyles.focusIndicatorVertical : rootStyles.focusIndicatorHorizontal, rootStyles[state.size], isVertical ? rootStyles.vertical : rootStyles.horizontal, state.disabled ? rootStyles.disabled : rootStyles.enabled, state.root.className);
        state.rail.className = react_1.mergeClasses(exports.sliderClassNames.rail, railStyles.rail, isVertical ? railStyles.vertical : railStyles.horizontal, state.rail.className);
        state.thumb.className = react_1.mergeClasses(exports.sliderClassNames.thumb, thumbStyles.thumb, isVertical ? thumbStyles.vertical : thumbStyles.horizontal, state.disabled && thumbStyles.disabled, state.thumb.className);
        state.input.className = react_1.mergeClasses(exports.sliderClassNames.input, inputStyles.input, isVertical ? inputStyles.vertical : inputStyles.horizontal, state.disabled && inputStyles.disabled, state.input.className);
        return state;
    };
    exports.useSliderStyles_unstable = useSliderStyles_unstable;
});
//# sourceMappingURL=useSliderStyles.js.map