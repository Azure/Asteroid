define(["require", "exports", "tslib", "@fluentui/react-tabster", "@fluentui/react-theme", "@griffel/react"], function (require, exports, tslib_1, react_tabster_1, react_theme_1, react_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useRadioStyles_unstable = exports.radioClassNames = void 0;
    exports.radioClassNames = {
        root: 'fui-Radio',
        indicator: 'fui-Radio__indicator',
        input: 'fui-Radio__input',
        label: 'fui-Radio__label',
    };
    // The indicator size is used by the indicator and label styles
    var indicatorSize = '16px';
    var useRootBaseClassName = react_1.makeResetStyles(tslib_1.__assign({ display: 'inline-flex', position: 'relative' }, react_tabster_1.createFocusOutlineStyle({ style: {}, selector: 'focus-within' })));
    var useRootStyles = react_1.makeStyles({
        vertical: {
            flexDirection: 'column',
            alignItems: 'center',
        },
    });
    var useInputBaseClassName = react_1.makeResetStyles((_a = {
            position: 'absolute',
            left: 0,
            top: 0,
            width: "calc(" + indicatorSize + " + 2 * " + react_theme_1.tokens.spacingHorizontalS + ")",
            height: '100%',
            boxSizing: 'border-box',
            margin: 0,
            opacity: 0,
            ':enabled': (_b = {
                    cursor: 'pointer'
                },
                _b["& ~ ." + exports.radioClassNames.label] = {
                    cursor: 'pointer',
                },
                _b)
        },
        // When unchecked, hide the circle icon (child of the indicator)
        _a[":not(:checked) ~ ." + exports.radioClassNames.indicator + " > *"] = {
            opacity: '0',
        },
        // Colors for the unchecked state
        _a[':enabled:not(:checked)'] = (_c = {},
            _c["& ~ ." + exports.radioClassNames.label] = {
                color: react_theme_1.tokens.colorNeutralForeground3,
            },
            _c["& ~ ." + exports.radioClassNames.indicator] = {
                borderColor: react_theme_1.tokens.colorNeutralStrokeAccessible,
            },
            _c[':hover'] = (_d = {},
                _d["& ~ ." + exports.radioClassNames.label] = {
                    color: react_theme_1.tokens.colorNeutralForeground2,
                },
                _d["& ~ ." + exports.radioClassNames.indicator] = {
                    borderColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover,
                },
                _d),
            _c[':hover:active'] = (_e = {},
                _e["& ~ ." + exports.radioClassNames.label] = {
                    color: react_theme_1.tokens.colorNeutralForeground1,
                },
                _e["& ~ ." + exports.radioClassNames.indicator] = {
                    borderColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed,
                },
                _e),
            _c),
        // Colors for the checked state
        _a[':enabled:checked'] = (_f = {},
            _f["& ~ ." + exports.radioClassNames.label] = {
                color: react_theme_1.tokens.colorNeutralForeground1,
            },
            _f["& ~ ." + exports.radioClassNames.indicator] = {
                borderColor: react_theme_1.tokens.colorCompoundBrandStroke,
                color: react_theme_1.tokens.colorCompoundBrandForeground1,
            },
            _f[':hover'] = (_g = {},
                _g["& ~ ." + exports.radioClassNames.indicator] = {
                    borderColor: react_theme_1.tokens.colorCompoundBrandStrokeHover,
                    color: react_theme_1.tokens.colorCompoundBrandForeground1Hover,
                },
                _g),
            _f[':hover:active'] = (_h = {},
                _h["& ~ ." + exports.radioClassNames.indicator] = {
                    borderColor: react_theme_1.tokens.colorCompoundBrandStrokePressed,
                    color: react_theme_1.tokens.colorCompoundBrandForeground1Pressed,
                },
                _h),
            _f),
        // Colors for the disabled state
        _a[':disabled'] = (_j = {},
            _j["& ~ ." + exports.radioClassNames.label] = {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                cursor: 'default',
            },
            _j["& ~ ." + exports.radioClassNames.indicator] = {
                borderColor: react_theme_1.tokens.colorNeutralStrokeDisabled,
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
            _j),
        _a));
    var useInputStyles = react_1.makeStyles({
        below: {
            width: '100%',
            height: "calc(" + indicatorSize + " + 2 * " + react_theme_1.tokens.spacingVerticalS + ")",
        },
    });
    var useIndicatorBaseClassName = react_1.makeResetStyles({
        width: indicatorSize,
        height: indicatorSize,
        fontSize: '12px',
        boxSizing: 'border-box',
        flexShrink: 0,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        overflow: 'hidden',
        border: react_theme_1.tokens.strokeWidthThin + ' solid',
        borderRadius: react_theme_1.tokens.borderRadiusCircular,
        margin: react_theme_1.tokens.spacingVerticalS + ' ' + react_theme_1.tokens.spacingHorizontalS,
        fill: 'currentColor',
        pointerEvents: 'none',
    });
    // Can't use makeResetStyles here because Label is a component that may itself use makeResetStyles.
    var useLabelStyles = react_1.makeStyles({
        base: tslib_1.__assign({ alignSelf: 'center' }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalS, react_theme_1.tokens.spacingHorizontalS)),
        after: {
            paddingLeft: react_theme_1.tokens.spacingHorizontalXS,
            // Use a (negative) margin to account for the difference between the indicator's height and the label's line height.
            // This prevents the label from expanding the height of the Radio, but preserves line height if the label wraps.
            marginTop: "calc((" + indicatorSize + " - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)",
            marginBottom: "calc((" + indicatorSize + " - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)",
        },
        below: {
            paddingTop: react_theme_1.tokens.spacingVerticalXS,
            textAlign: 'center',
        },
    });
    /**
     * Apply styling to the Radio slots based on the state
     */
    var useRadioStyles_unstable = function (state) {
        var labelPosition = state.labelPosition;
        var rootBaseClassName = useRootBaseClassName();
        var rootStyles = useRootStyles();
        state.root.className = react_1.mergeClasses(exports.radioClassNames.root, rootBaseClassName, labelPosition === 'below' && rootStyles.vertical, state.root.className);
        var inputBaseClassName = useInputBaseClassName();
        var inputStyles = useInputStyles();
        state.input.className = react_1.mergeClasses(exports.radioClassNames.input, inputBaseClassName, labelPosition === 'below' && inputStyles.below, state.input.className);
        var indicatorBaseClassName = useIndicatorBaseClassName();
        state.indicator.className = react_1.mergeClasses(exports.radioClassNames.indicator, indicatorBaseClassName, state.indicator.className);
        var labelStyles = useLabelStyles();
        if (state.label) {
            state.label.className = react_1.mergeClasses(exports.radioClassNames.label, labelStyles.base, labelStyles[labelPosition], state.label.className);
        }
    };
    exports.useRadioStyles_unstable = useRadioStyles_unstable;
});
//# sourceMappingURL=useRadioStyles.js.map