define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAvatarStyles_unstable = exports.useSizeStyles = exports.avatarClassNames = void 0;
    exports.avatarClassNames = {
        root: 'fui-Avatar',
        image: 'fui-Avatar__image',
        initials: 'fui-Avatar__initials',
        icon: 'fui-Avatar__icon',
        badge: 'fui-Avatar__badge',
    };
    var animations = {
        fastOutSlowInMax: react_theme_1.tokens.curveDecelerateMax,
        fastOutSlowInMid: react_theme_1.tokens.curveDecelerateMid,
        fastOutSlowInMin: react_theme_1.tokens.curveDecelerateMin,
        slowOutFastInMax: react_theme_1.tokens.curveAccelerateMax,
        slowOutFastInMid: react_theme_1.tokens.curveAccelerateMid,
        slowOutFastInMin: react_theme_1.tokens.curveAccelerateMin,
        fastEase: react_theme_1.tokens.curveEasyEaseMax,
        normalEase: react_theme_1.tokens.curveEasyEase,
        nullEasing: react_theme_1.tokens.curveLinear,
    };
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ display: 'inline-block', flexShrink: 0, position: 'relative', verticalAlign: 'middle' }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)), { fontFamily: react_theme_1.tokens.fontFamilyBase, fontWeight: react_theme_1.tokens.fontWeightSemibold }),
        textCaption2Strong: {
            fontSize: react_theme_1.tokens.fontSizeBase100,
            fontWeight: react_theme_1.tokens.fontWeightSemibold,
        },
        textCaption1Strong: { fontSize: react_theme_1.tokens.fontSizeBase200 },
        textBody1Strong: { fontSize: react_theme_1.tokens.fontSizeBase300 },
        textSubtitle2: { fontSize: react_theme_1.tokens.fontSizeBase400 },
        textSubtitle1: { fontSize: react_theme_1.tokens.fontSizeBase500 },
        textTitle: { fontSize: react_theme_1.tokens.fontSizeBase600 },
        squareSmall: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusSmall)),
        squareMedium: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)),
        squareLarge: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusLarge)),
        squareXLarge: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusXLarge)),
        activeOrInactive: {
            transform: 'perspective(1px)',
            transitionProperty: 'transform, opacity',
            transitionDuration: react_theme_1.tokens.durationUltraSlow + ", " + react_theme_1.tokens.durationFaster,
            transitionDelay: animations.fastEase + ", " + animations.nullEasing,
            '@media screen and (prefers-reduced-motion: reduce)': {
                transitionDuration: '0.01ms',
            },
            '::before': tslib_1.__assign(tslib_1.__assign({ content: '""', position: 'absolute', top: 0, left: 0, bottom: 0, right: 0 }, react_1.shorthands.borderRadius('inherit')), { transitionProperty: 'margin, opacity', transitionDuration: react_theme_1.tokens.durationUltraSlow + ", " + react_theme_1.tokens.durationSlower, transitionDelay: animations.fastEase + ", " + animations.nullEasing, '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                } }),
        },
        ring: {
            '::before': tslib_1.__assign({}, react_1.shorthands.borderStyle('solid')),
        },
        ringThick: {
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.margin("calc(-2 * " + react_theme_1.tokens.strokeWidthThick + ")")), react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThick)),
        },
        ringThicker: {
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.margin("calc(-2 * " + react_theme_1.tokens.strokeWidthThicker + ")")), react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThicker)),
        },
        ringThickest: {
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.margin("calc(-2 * " + react_theme_1.tokens.strokeWidthThickest + ")")), react_1.shorthands.borderWidth(react_theme_1.tokens.strokeWidthThickest)),
        },
        shadow4: { '::before': { boxShadow: react_theme_1.tokens.shadow4 } },
        shadow8: { '::before': { boxShadow: react_theme_1.tokens.shadow8 } },
        shadow16: { '::before': { boxShadow: react_theme_1.tokens.shadow16 } },
        shadow28: { '::before': { boxShadow: react_theme_1.tokens.shadow28 } },
        inactive: {
            opacity: '0.8',
            transform: 'scale(0.875)',
            transitionProperty: 'transform, opacity',
            transitionDuration: react_theme_1.tokens.durationUltraSlow + ", " + react_theme_1.tokens.durationFaster,
            transitionDelay: animations.fastOutSlowInMin + ", " + animations.nullEasing,
            '@media screen and (prefers-reduced-motion: reduce)': {
                transitionDuration: '0.01ms',
                transitionDelay: '0.01ms',
            },
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.margin(0)), { opacity: 0, transitionProperty: 'margin, opacity', transitionDuration: react_theme_1.tokens.durationUltraSlow + ", " + react_theme_1.tokens.durationSlower, transitionDelay: animations.fastOutSlowInMin + ", " + animations.nullEasing, '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                } }),
        },
        badge: {
            position: 'absolute',
            bottom: 0,
            right: 0,
            boxShadow: "0 0 0 " + react_theme_1.tokens.strokeWidthThin + " " + react_theme_1.tokens.colorNeutralBackground1,
        },
        badgeLarge: {
            boxShadow: "0 0 0 " + react_theme_1.tokens.strokeWidthThick + " " + react_theme_1.tokens.colorNeutralBackground1,
        },
        image: tslib_1.__assign(tslib_1.__assign({ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }, react_1.shorthands.borderRadius('inherit')), { objectFit: 'cover', verticalAlign: 'top' }),
        iconInitials: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'absolute', boxSizing: 'border-box', top: 0, left: 0, width: '100%', height: '100%', lineHeight: '1' }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorTransparentStroke)), { display: 'flex', alignItems: 'center', justifyContent: 'center', verticalAlign: 'center', textAlign: 'center', userSelect: 'none' }), react_1.shorthands.borderRadius('inherit')),
        icon12: { fontSize: '12px' },
        icon16: { fontSize: '16px' },
        icon20: { fontSize: '20px' },
        icon24: { fontSize: '24px' },
        icon28: { fontSize: '28px' },
        icon32: { fontSize: '32px' },
        icon48: { fontSize: '48px' },
    });
    exports.useSizeStyles = react_1.makeStyles({
        16: { width: '16px', height: '16px' },
        20: { width: '20px', height: '20px' },
        24: { width: '24px', height: '24px' },
        28: { width: '28px', height: '28px' },
        32: { width: '32px', height: '32px' },
        36: { width: '36px', height: '36px' },
        40: { width: '40px', height: '40px' },
        48: { width: '48px', height: '48px' },
        56: { width: '56px', height: '56px' },
        64: { width: '64px', height: '64px' },
        72: { width: '72px', height: '72px' },
        96: { width: '96px', height: '96px' },
        120: { width: '120px', height: '120px' },
        128: { width: '128px', height: '128px' },
    });
    var useColorStyles = react_1.makeStyles({
        neutral: {
            color: react_theme_1.tokens.colorNeutralForeground3,
            backgroundColor: react_theme_1.tokens.colorNeutralBackground6,
            // The ::before element is the ring when active
            '::before': { color: react_theme_1.tokens.colorBrandStroke1 },
        },
        brand: {
            color: react_theme_1.tokens.colorNeutralForegroundStaticInverted,
            backgroundColor: react_theme_1.tokens.colorBrandBackgroundStatic,
            '::before': { color: react_theme_1.tokens.colorBrandStroke1 },
        },
        'dark-red': {
            color: react_theme_1.tokens.colorPaletteDarkRedForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteDarkRedBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteDarkRedBorderActive },
        },
        cranberry: {
            color: react_theme_1.tokens.colorPaletteCranberryForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteCranberryBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteCranberryBorderActive },
        },
        red: {
            color: react_theme_1.tokens.colorPaletteRedForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteRedBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteRedBorderActive },
        },
        pumpkin: {
            color: react_theme_1.tokens.colorPalettePumpkinForeground2,
            backgroundColor: react_theme_1.tokens.colorPalettePumpkinBackground2,
            '::before': { color: react_theme_1.tokens.colorPalettePumpkinBorderActive },
        },
        peach: {
            color: react_theme_1.tokens.colorPalettePeachForeground2,
            backgroundColor: react_theme_1.tokens.colorPalettePeachBackground2,
            '::before': { color: react_theme_1.tokens.colorPalettePeachBorderActive },
        },
        marigold: {
            color: react_theme_1.tokens.colorPaletteMarigoldForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteMarigoldBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteMarigoldBorderActive },
        },
        gold: {
            color: react_theme_1.tokens.colorPaletteGoldForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteGoldBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteGoldBorderActive },
        },
        brass: {
            color: react_theme_1.tokens.colorPaletteBrassForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteBrassBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteBrassBorderActive },
        },
        brown: {
            color: react_theme_1.tokens.colorPaletteBrownForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteBrownBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteBrownBorderActive },
        },
        forest: {
            color: react_theme_1.tokens.colorPaletteForestForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteForestBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteForestBorderActive },
        },
        seafoam: {
            color: react_theme_1.tokens.colorPaletteSeafoamForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteSeafoamBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteSeafoamBorderActive },
        },
        'dark-green': {
            color: react_theme_1.tokens.colorPaletteDarkGreenForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteDarkGreenBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteDarkGreenBorderActive },
        },
        'light-teal': {
            color: react_theme_1.tokens.colorPaletteLightTealForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteLightTealBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteLightTealBorderActive },
        },
        teal: {
            color: react_theme_1.tokens.colorPaletteTealForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteTealBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteTealBorderActive },
        },
        steel: {
            color: react_theme_1.tokens.colorPaletteSteelForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteSteelBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteSteelBorderActive },
        },
        blue: {
            color: react_theme_1.tokens.colorPaletteBlueForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteBlueBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteBlueBorderActive },
        },
        'royal-blue': {
            color: react_theme_1.tokens.colorPaletteRoyalBlueForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteRoyalBlueBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteRoyalBlueBorderActive },
        },
        cornflower: {
            color: react_theme_1.tokens.colorPaletteCornflowerForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteCornflowerBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteCornflowerBorderActive },
        },
        navy: {
            color: react_theme_1.tokens.colorPaletteNavyForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteNavyBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteNavyBorderActive },
        },
        lavender: {
            color: react_theme_1.tokens.colorPaletteLavenderForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteLavenderBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteLavenderBorderActive },
        },
        purple: {
            color: react_theme_1.tokens.colorPalettePurpleForeground2,
            backgroundColor: react_theme_1.tokens.colorPalettePurpleBackground2,
            '::before': { color: react_theme_1.tokens.colorPalettePurpleBorderActive },
        },
        grape: {
            color: react_theme_1.tokens.colorPaletteGrapeForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteGrapeBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteGrapeBorderActive },
        },
        lilac: {
            color: react_theme_1.tokens.colorPaletteLilacForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteLilacBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteLilacBorderActive },
        },
        pink: {
            color: react_theme_1.tokens.colorPalettePinkForeground2,
            backgroundColor: react_theme_1.tokens.colorPalettePinkBackground2,
            '::before': { color: react_theme_1.tokens.colorPalettePinkBorderActive },
        },
        magenta: {
            color: react_theme_1.tokens.colorPaletteMagentaForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteMagentaBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteMagentaBorderActive },
        },
        plum: {
            color: react_theme_1.tokens.colorPalettePlumForeground2,
            backgroundColor: react_theme_1.tokens.colorPalettePlumBackground2,
            '::before': { color: react_theme_1.tokens.colorPalettePlumBorderActive },
        },
        beige: {
            color: react_theme_1.tokens.colorPaletteBeigeForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteBeigeBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteBeigeBorderActive },
        },
        mink: {
            color: react_theme_1.tokens.colorPaletteMinkForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteMinkBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteMinkBorderActive },
        },
        platinum: {
            color: react_theme_1.tokens.colorPalettePlatinumForeground2,
            backgroundColor: react_theme_1.tokens.colorPalettePlatinumBackground2,
            '::before': { color: react_theme_1.tokens.colorPalettePlatinumBorderActive },
        },
        anchor: {
            color: react_theme_1.tokens.colorPaletteAnchorForeground2,
            backgroundColor: react_theme_1.tokens.colorPaletteAnchorBackground2,
            '::before': { color: react_theme_1.tokens.colorPaletteAnchorBorderActive },
        },
    });
    var useAvatarStyles_unstable = function (state) {
        var size = state.size, shape = state.shape, active = state.active, activeAppearance = state.activeAppearance, color = state.color;
        var styles = useStyles();
        var sizeStyles = exports.useSizeStyles();
        var colorStyles = useColorStyles();
        var rootClasses = [styles.root, sizeStyles[size], colorStyles[color]];
        if (size <= 24) {
            rootClasses.push(styles.textCaption2Strong);
        }
        else if (size <= 28) {
            rootClasses.push(styles.textCaption1Strong);
        }
        else if (size <= 40) {
            rootClasses.push(styles.textBody1Strong);
        }
        else if (size <= 56) {
            rootClasses.push(styles.textSubtitle2);
        }
        else if (size <= 96) {
            rootClasses.push(styles.textSubtitle1);
        }
        else {
            rootClasses.push(styles.textTitle);
        }
        if (shape === 'square') {
            if (size <= 24) {
                rootClasses.push(styles.squareSmall);
            }
            else if (size <= 48) {
                rootClasses.push(styles.squareMedium);
            }
            else if (size <= 72) {
                rootClasses.push(styles.squareLarge);
            }
            else {
                rootClasses.push(styles.squareXLarge);
            }
        }
        if (active === 'active' || active === 'inactive') {
            rootClasses.push(styles.activeOrInactive);
            if (activeAppearance === 'ring' || activeAppearance === 'ring-shadow') {
                rootClasses.push(styles.ring);
                if (size <= 48) {
                    rootClasses.push(styles.ringThick);
                }
                else if (size <= 64) {
                    rootClasses.push(styles.ringThicker);
                }
                else {
                    rootClasses.push(styles.ringThickest);
                }
            }
            if (activeAppearance === 'shadow' || activeAppearance === 'ring-shadow') {
                if (size <= 28) {
                    rootClasses.push(styles.shadow4);
                }
                else if (size <= 48) {
                    rootClasses.push(styles.shadow8);
                }
                else if (size <= 64) {
                    rootClasses.push(styles.shadow16);
                }
                else {
                    rootClasses.push(styles.shadow28);
                }
            }
            // Note: The inactive style overrides some of the activeAppearance styles and must be applied after them
            if (active === 'inactive') {
                rootClasses.push(styles.inactive);
            }
        }
        state.root.className = react_1.mergeClasses.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray([exports.avatarClassNames.root], rootClasses), [state.root.className]));
        if (state.badge) {
            state.badge.className = react_1.mergeClasses(exports.avatarClassNames.badge, styles.badge, size >= 64 && styles.badgeLarge, state.badge.className);
        }
        if (state.image) {
            state.image.className = react_1.mergeClasses(exports.avatarClassNames.image, styles.image, state.image.className);
        }
        if (state.initials) {
            state.initials.className = react_1.mergeClasses(exports.avatarClassNames.initials, styles.iconInitials, state.initials.className);
        }
        if (state.icon) {
            var iconSizeClass = void 0;
            if (size <= 16) {
                iconSizeClass = styles.icon12;
            }
            else if (size <= 24) {
                iconSizeClass = styles.icon16;
            }
            else if (size <= 40) {
                iconSizeClass = styles.icon20;
            }
            else if (size <= 48) {
                iconSizeClass = styles.icon24;
            }
            else if (size <= 56) {
                iconSizeClass = styles.icon28;
            }
            else if (size <= 72) {
                iconSizeClass = styles.icon32;
            }
            else {
                iconSizeClass = styles.icon48;
            }
            state.icon.className = react_1.mergeClasses(exports.avatarClassNames.icon, styles.iconInitials, iconSizeClass, state.icon.className);
        }
        return state;
    };
    exports.useAvatarStyles_unstable = useAvatarStyles_unstable;
});
//# sourceMappingURL=useAvatarStyles.js.map