define(["require", "exports", "tslib", "../Avatar/Avatar", "../../contexts/AvatarGroupContext", "../AvatarGroup/useAvatarGroup", "@fluentui/react-utilities", "@fluentui/react-context-selector"], function (require, exports, tslib_1, Avatar_1, AvatarGroupContext_1, useAvatarGroup_1, react_utilities_1, react_context_selector_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAvatarGroupItem_unstable = void 0;
    /**
     * Create the state required to render AvatarGroupItem.
     *
     * The returned state can be modified with hooks such as useAvatarGroupItemStyles_unstable,
     * before being passed to renderAvatarGroupItem_unstable.
     *
     * @param props - props from this instance of AvatarGroupItem
     * @param ref - reference to root HTMLElement of AvatarGroupItem
     */
    var useAvatarGroupItem_unstable = function (props, ref) {
        var groupIsOverflow = AvatarGroupContext_1.useAvatarGroupContext_unstable(function (ctx) { return ctx.isOverflow; });
        var groupSize = AvatarGroupContext_1.useAvatarGroupContext_unstable(function (ctx) { return ctx.size; });
        var layout = AvatarGroupContext_1.useAvatarGroupContext_unstable(function (ctx) { return ctx.layout; });
        // Since the primary slot is not an intrinsic element, getPartitionedNativeProps cannot be used here.
        var style = props.style, className = props.className, avatarSlotProps = tslib_1.__rest(props, ["style", "className"]);
        var size = groupSize !== null && groupSize !== void 0 ? groupSize : useAvatarGroup_1.defaultAvatarGroupSize;
        var hasAvatarGroupContext = react_context_selector_1.useHasParentContext(AvatarGroupContext_1.AvatarGroupContext);
        if (process.env.NODE_ENV !== 'production' && !hasAvatarGroupContext) {
            // eslint-disable-next-line no-console
            console.warn('AvatarGroupItem must only be used inside an AvatarGroup component.');
        }
        return {
            isOverflowItem: groupIsOverflow,
            layout: layout,
            size: size,
            components: {
                root: groupIsOverflow ? 'li' : 'div',
                avatar: Avatar_1.Avatar,
                overflowLabel: 'span',
            },
            root: react_utilities_1.resolveShorthand(props.root, {
                required: true,
                defaultProps: {
                    style: style,
                    className: className,
                },
            }),
            avatar: react_utilities_1.resolveShorthand(props.avatar, {
                required: true,
                defaultProps: tslib_1.__assign({ ref: ref, size: size, color: 'colorful' }, avatarSlotProps),
            }),
            overflowLabel: react_utilities_1.resolveShorthand(props.overflowLabel, {
                required: true,
                defaultProps: {
                    // Avatar already has its aria-label set to the name, this will prevent the name to be read twice.
                    'aria-hidden': true,
                    children: props.name,
                },
            }),
        };
    };
    exports.useAvatarGroupItem_unstable = useAvatarGroupItem_unstable;
});
//# sourceMappingURL=useAvatarGroupItem.js.map