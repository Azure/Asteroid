define(["require", "exports", "tslib", "@fluentui/react-utilities", "@fluentui/react-tabster", "../../popoverContext", "@fluentui/react-aria", "@fluentui/keyboard-keys"], function (require, exports, tslib_1, react_utilities_1, react_tabster_1, popoverContext_1, react_aria_1, keyboard_keys_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usePopoverTrigger_unstable = void 0;
    /**
     * Create the state required to render PopoverTrigger.
     *
     * The returned state can be modified with hooks such as usePopoverTriggerStyles,
     * before being passed to renderPopoverTrigger_unstable.
     *
     * @param props - props from this instance of PopoverTrigger
     */
    var usePopoverTrigger_unstable = function (props) {
        var children = props.children, _a = props.disableButtonEnhancement, disableButtonEnhancement = _a === void 0 ? false : _a;
        var child = react_utilities_1.getTriggerChild(children);
        var open = popoverContext_1.usePopoverContext_unstable(function (context) { return context.open; });
        var setOpen = popoverContext_1.usePopoverContext_unstable(function (context) { return context.setOpen; });
        var toggleOpen = popoverContext_1.usePopoverContext_unstable(function (context) { return context.toggleOpen; });
        var triggerRef = popoverContext_1.usePopoverContext_unstable(function (context) { return context.triggerRef; });
        var openOnHover = popoverContext_1.usePopoverContext_unstable(function (context) { return context.openOnHover; });
        var openOnContext = popoverContext_1.usePopoverContext_unstable(function (context) { return context.openOnContext; });
        var triggerAttributes = react_tabster_1.useModalAttributes().triggerAttributes;
        var onContextMenu = function (e) {
            if (openOnContext) {
                e.preventDefault();
                setOpen(e, true);
            }
        };
        var onClick = function (e) {
            if (!openOnContext) {
                toggleOpen(e);
            }
        };
        var onKeyDown = function (e) {
            if (e.key === keyboard_keys_1.Escape && open) {
                setOpen(e, false);
                // stop propagation to avoid conflicting with other elements that listen for `Escape`
                // e,g: Dialog, Menu
                e.stopPropagation();
            }
        };
        var onMouseEnter = function (e) {
            if (openOnHover) {
                setOpen(e, true);
            }
        };
        var onMouseLeave = function (e) {
            if (openOnHover) {
                setOpen(e, false);
            }
        };
        var contextMenuProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, triggerAttributes), { 'aria-expanded': "" + open }), child === null || child === void 0 ? void 0 : child.props), { onMouseEnter: react_utilities_1.useEventCallback(react_utilities_1.mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onMouseEnter, onMouseEnter)), onMouseLeave: react_utilities_1.useEventCallback(react_utilities_1.mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onMouseLeave, onMouseLeave)), onContextMenu: react_utilities_1.useEventCallback(react_utilities_1.mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onContextMenu, onContextMenu)), ref: react_utilities_1.useMergedRefs(triggerRef, child === null || child === void 0 ? void 0 : child.ref) });
        var triggerChildProps = tslib_1.__assign(tslib_1.__assign({}, contextMenuProps), { onClick: react_utilities_1.useEventCallback(react_utilities_1.mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onClick, onClick)), onKeyDown: react_utilities_1.useEventCallback(react_utilities_1.mergeCallbacks(child === null || child === void 0 ? void 0 : child.props.onKeyDown, onKeyDown)) });
        var ariaButtonTriggerChildProps = react_aria_1.useARIAButtonProps((child === null || child === void 0 ? void 0 : child.type) === 'button' || (child === null || child === void 0 ? void 0 : child.type) === 'a' ? child.type : 'div', triggerChildProps);
        return {
            children: react_utilities_1.applyTriggerPropsToChildren(props.children, react_aria_1.useARIAButtonProps((child === null || child === void 0 ? void 0 : child.type) === 'button' || (child === null || child === void 0 ? void 0 : child.type) === 'a' ? child.type : 'div', openOnContext ? contextMenuProps : disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps)),
        };
    };
    exports.usePopoverTrigger_unstable = usePopoverTrigger_unstable;
});
//# sourceMappingURL=usePopoverTrigger.js.map