import { useEventCallback } from '@fluentui/react-utilities';
import { useTableHeaderCell_unstable } from '../TableHeaderCell/useTableHeaderCell';
import { useDataGridContext_unstable } from '../../contexts/dataGridContext';
import { useColumnIdContext } from '../../contexts/columnIdContext';
import { useTableContext } from '../../contexts/tableContext';
/**
 * Create the state required to render DataGridHeaderCell.
 *
 * The returned state can be modified with hooks such as useDataGridHeaderCellStyles_unstable,
 * before being passed to renderDataGridHeaderCell_unstable.
 *
 * @param props - props from this instance of DataGridHeaderCell
 * @param ref - reference to root HTMLElement of DataGridHeaderCell
 */

export const useDataGridHeaderCell_unstable = (props, ref) => {
  const columnId = useColumnIdContext();
  const {
    sortable
  } = useTableContext();
  const toggleColumnSort = useDataGridContext_unstable(ctx => ctx.sort.toggleColumnSort);
  const sortDirection = useDataGridContext_unstable(ctx => sortable ? ctx.sort.getSortDirection(columnId) : undefined);
  const onClick = useEventCallback(e => {
    var _a;

    if (sortable) {
      toggleColumnSort(e, columnId);
    }

    (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
  });
  return useTableHeaderCell_unstable({
    sortDirection,
    as: 'div',
    tabIndex: sortable ? undefined : 0,
    ...props,
    onClick
  }, ref);
};
//# sourceMappingURL=useDataGridHeaderCell.js.map