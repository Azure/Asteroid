"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDataGridSelectionCell_unstable = void 0;

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const dataGridContext_1 = /*#__PURE__*/require("../../contexts/dataGridContext");

const rowIdContext_1 = /*#__PURE__*/require("../../contexts/rowIdContext");

const tableHeaderContext_1 = /*#__PURE__*/require("../../contexts/tableHeaderContext");

const useTableSelectionCell_1 = /*#__PURE__*/require("../TableSelectionCell/useTableSelectionCell");
/**
 * Create the state required to render DataGridSelectionCell.
 *
 * The returned state can be modified with hooks such as useDataGridSelectionCellStyles_unstable,
 * before being passed to renderDataGridSelectionCell_unstable.
 *
 * @param props - props from this instance of DataGridSelectionCell
 * @param ref - reference to root HTMLElement of DataGridSelectionCell
 */


const useDataGridSelectionCell_unstable = (props, ref) => {
  const isHeader = tableHeaderContext_1.useIsInTableHeader();
  const rowId = rowIdContext_1.useRowIdContext();
  const subtle = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.subtleSelection);
  const checked = dataGridContext_1.useDataGridContext_unstable(ctx => {
    if (isHeader && ctx.selection.selectionMode === 'multiselect') {
      return ctx.selection.allRowsSelected ? true : ctx.selection.someRowsSelected ? 'mixed' : false;
    }

    return ctx.selection.isRowSelected(rowId);
  });
  const toggleAllRows = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.selection.toggleAllRows);
  const type = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.selection.selectionMode === 'multiselect' ? 'checkbox' : 'radio');
  const onClick = react_utilities_1.useEventCallback(e => {
    var _a;

    if (isHeader) {
      toggleAllRows(e);
    }

    (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
  });
  return useTableSelectionCell_1.useTableSelectionCell_unstable({
    as: 'div',
    role: 'gridcell',
    checked,
    type,
    tabIndex: 0,
    hidden: isHeader && type === 'radio',
    'aria-checked': isHeader ? checked : undefined,
    'aria-selected': isHeader || checked === 'mixed' ? undefined : checked,
    subtle,
    checkboxIndicator: {
      tabIndex: -1
    },
    ...props,
    onClick
  }, ref);
};

exports.useDataGridSelectionCell_unstable = useDataGridSelectionCell_unstable;
//# sourceMappingURL=useDataGridSelectionCell.js.map