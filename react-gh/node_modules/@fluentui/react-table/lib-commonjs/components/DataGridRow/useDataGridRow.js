"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDataGridRow_unstable = void 0;

const React = /*#__PURE__*/require("react");

const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

const keyboard_keys_1 = /*#__PURE__*/require("@fluentui/keyboard-keys");

const useTableRow_1 = /*#__PURE__*/require("../TableRow/useTableRow");

const dataGridContext_1 = /*#__PURE__*/require("../../contexts/dataGridContext");

const columnIdContext_1 = /*#__PURE__*/require("../../contexts/columnIdContext");

const DataGridSelectionCell_1 = /*#__PURE__*/require("../DataGridSelectionCell/DataGridSelectionCell");

const rowIdContext_1 = /*#__PURE__*/require("../../contexts/rowIdContext");

const tableHeaderContext_1 = /*#__PURE__*/require("../../contexts/tableHeaderContext");
/**
 * Create the state required to render DataGridRow.
 *
 * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,
 * before being passed to renderDataGridRow_unstable.
 *
 * @param props - props from this instance of DataGridRow
 * @param ref - reference to root HTMLElement of DataGridRow
 */


const useDataGridRow_unstable = (props, ref) => {
  const rowId = rowIdContext_1.useRowIdContext();
  const isHeader = tableHeaderContext_1.useIsInTableHeader();
  const columnDefs = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.columns);
  const selectable = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.selectableRows);
  const selected = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.selection.isRowSelected(rowId));
  const tabbable = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.focusMode === 'row_unstable');
  const appearance = dataGridContext_1.useDataGridContext_unstable(ctx => {
    if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {
      return ctx.selectionAppearance;
    }

    return 'none';
  });
  const toggleRow = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.selection.toggleRow);
  const cellRenderFunction = props.children;
  const cells = columnDefs.map(columnDef => {
    return React.createElement(columnIdContext_1.ColumnIdContextProvider, {
      value: columnDef.columnId,
      key: columnDef.columnId
    }, cellRenderFunction(columnDef));
  });
  const onClick = react_utilities_1.useEventCallback(e => {
    var _a;

    if (selectable && !isHeader) {
      toggleRow(e, rowId);
    }

    (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
  });
  const onKeyDown = react_utilities_1.useEventCallback(e => {
    var _a;

    if (selectable && !isHeader && e.key === keyboard_keys_1.Space && !react_utilities_1.isInteractiveHTMLElement(e.target)) {
      // stop scrolling
      e.preventDefault();
      toggleRow(e, rowId);
    }

    (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, e);
  });
  const baseState = useTableRow_1.useTableRow_unstable({
    appearance,
    'aria-selected': selectable ? selected : undefined,
    ...props,
    onClick,
    onKeyDown,
    children: cells,
    as: 'div',
    tabIndex: tabbable && !isHeader ? 0 : undefined
  }, ref);
  return { ...baseState,
    components: { ...baseState.components,
      selectionCell: DataGridSelectionCell_1.DataGridSelectionCell
    },
    selectionCell: react_utilities_1.resolveShorthand(props.selectionCell, {
      required: selectable
    })
  };
};

exports.useDataGridRow_unstable = useDataGridRow_unstable;
//# sourceMappingURL=useDataGridRow.js.map