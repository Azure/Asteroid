"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDataGridBody_unstable = void 0;

const React = /*#__PURE__*/require("react");

const useTableBody_1 = /*#__PURE__*/require("../TableBody/useTableBody");

const dataGridContext_1 = /*#__PURE__*/require("../../contexts/dataGridContext");

const tableContext_1 = /*#__PURE__*/require("../../contexts/tableContext");

const rowIdContext_1 = /*#__PURE__*/require("../../contexts/rowIdContext");
/**
 * Create the state required to render DataGridBody.
 *
 * The returned state can be modified with hooks such as useDataGridBodyStyles_unstable,
 * before being passed to renderDataGridBody_unstable.
 *
 * @param props - props from this instance of DataGridBody
 * @param ref - reference to root HTMLElement of DataGridBody
 */


const useDataGridBody_unstable = (props, ref) => {
  const {
    sortable
  } = tableContext_1.useTableContext();
  const getRows = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.getRows);
  const sort = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.sort.sort);
  const rows = sortable ? sort(getRows()) : getRows();
  const {
    children: renderRow
  } = props;
  const children = rows.map(row => React.createElement(rowIdContext_1.RowIdContextProvider, {
    key: row.rowId,
    value: row.rowId
  }, renderRow(row)));
  return useTableBody_1.useTableBody_unstable({ ...props,
    children,
    as: 'div'
  }, ref);
};

exports.useDataGridBody_unstable = useDataGridBody_unstable;
//# sourceMappingURL=useDataGridBody.js.map