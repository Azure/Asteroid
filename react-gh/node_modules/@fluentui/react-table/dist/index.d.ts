/// <reference types="react" />

import { ARIAButtonSlotProps } from '@fluentui/react-aria';
import type { AvatarSizes } from '@fluentui/react-avatar';
import type { Checkbox } from '@fluentui/react-checkbox';
import type { CheckboxProps } from '@fluentui/react-checkbox';
import type { ComponentProps } from '@fluentui/react-utilities';
import type { ComponentState } from '@fluentui/react-utilities';
import type { ForwardRefComponent } from '@fluentui/react-utilities';
import type { Radio } from '@fluentui/react-radio';
import * as React_2 from 'react';
import { ReactNode } from 'react';
import type { Slot } from '@fluentui/react-utilities';
import type { SlotClassNames } from '@fluentui/react-utilities';

export declare type CellRenderFunction = (column: ColumnDefinition<any>) => React_2.ReactNode;

export declare interface ColumnDefinition<TItem> {
    columnId: ColumnId;
    compare: (a: TItem, b: TItem) => number;
    renderHeaderCell: () => React_2.ReactNode;
    renderCell: (item: TItem) => React_2.ReactNode;
}

export declare type ColumnId = string | number;

/**
 * Helper function to create column definition with defaults
 * @param options - column definition options
 * @returns - column definition with defaults
 */
export declare function createColumn<TItem>(options: CreateColumnOptions<TItem>): {
    columnId: ColumnId;
    renderCell: (item: TItem) => ReactNode;
    renderHeaderCell: () => ReactNode;
    compare: (a: TItem, b: TItem) => number;
};

export declare interface CreateColumnOptions<TItem> extends Partial<ColumnDefinition<TItem>> {
    columnId: ColumnId;
}

/**
 * DataGrid component - TODO: add more docs
 */
export declare const DataGrid: ForwardRefComponent<DataGridProps>;

/**
 * DataGridBody component - TODO: add more docs
 */
export declare const DataGridBody: ForwardRefComponent<DataGridBodyProps>;

export declare const dataGridBodyClassNames: SlotClassNames<DataGridBodySlots>;

/**
 * DataGridBody Props
 */
export declare type DataGridBodyProps = Omit<TableBodyProps, 'children'> & {
    /**
     * Render function for rows
     */
    children: RowRenderFunction;
};

export declare type DataGridBodySlots = TableBodySlots;

/**
 * State used in rendering DataGridBody
 */
export declare type DataGridBodyState = TableBodyState;

/**
 * DataGridCell component - TODO: add more docs
 */
export declare const DataGridCell: ForwardRefComponent<DataGridCellProps>;

export declare const dataGridCellClassNames: SlotClassNames<DataGridCellSlots>;

/**
 * DataGridCell Props
 */
export declare type DataGridCellProps = TableCellProps;

export declare type DataGridCellSlots = TableCellSlots;

/**
 * State used in rendering DataGridCell
 */
export declare type DataGridCellState = TableCellState;

export declare const dataGridClassNames: SlotClassNames<DataGridSlots>;

export declare type DataGridContextValue = HeadlessTableState<any> & {
    /**
     * How focus navigation will work in the datagrid
     * @default cell
     */
    focusMode: FocusMode;
    /**
     * Lets child components know if rows selection is enabled
     * @see selectionMode prop enables row selection on the component
     */
    selectableRows: boolean;
    /**
     * Enables subtle selection style
     * @default false
     */
    subtleSelection: boolean;
    /**
     * Row appearance when selected
     * @default brand
     */
    selectionAppearance: TableRowProps['appearance'];
};

export declare type DataGridContextValues = TableContextValues & {
    dataGrid: DataGridContextValue;
};

/**
 * DataGridHeader component - TODO: add more docs
 */
export declare const DataGridHeader: ForwardRefComponent<DataGridHeaderProps>;

/**
 * DataGridHeaderCell component - TODO: add more docs
 */
export declare const DataGridHeaderCell: ForwardRefComponent<DataGridHeaderCellProps>;

export declare const dataGridHeaderCellClassNames: SlotClassNames<DataGridHeaderCellSlots>;

/**
 * DataGridHeaderCell Props
 */
export declare type DataGridHeaderCellProps = TableHeaderCellProps;

export declare type DataGridHeaderCellSlots = TableHeaderCellSlots;

/**
 * State used in rendering DataGridHeaderCell
 */
export declare type DataGridHeaderCellState = TableHeaderCellState;

export declare const dataGridHeaderClassNames: SlotClassNames<DataGridHeaderSlots>;

/**
 * DataGridHeader Props
 */
export declare type DataGridHeaderProps = TableHeaderProps;

export declare type DataGridHeaderSlots = TableHeaderSlots;

/**
 * State used in rendering DataGridHeader
 */
export declare type DataGridHeaderState = TableHeaderState;

/**
 * DataGrid Props
 */
export declare type DataGridProps = TableProps & Pick<DataGridContextValue, 'items' | 'columns' | 'getRowId'> & Pick<Partial<DataGridContextValue>, 'focusMode' | 'subtleSelection' | 'selectionAppearance'> & Pick<UseTableSortOptions, 'sortState' | 'defaultSortState'> & Pick<UseTableSelectionOptions, 'defaultSelectedItems' | 'selectedItems'> & {
    onSortChange?: (e: React_2.MouseEvent, sortState: SortState) => void;
    onSelectionChange?: (e: React_2.MouseEvent | React_2.KeyboardEvent, data: OnSelectionChangeData) => void;
    /**
     * Enables row selection and sets the selection mode
     * @default false
     */
    selectionMode?: SelectionMode_2;
};

/**
 * DataGridRow component - TODO: add more docs
 */
export declare const DataGridRow: ForwardRefComponent<DataGridRowProps>;

export declare const dataGridRowClassNames: SlotClassNames<DataGridRowSlots>;

/**
 * DataGridRow Props
 */
export declare type DataGridRowProps = Omit<TableRowProps, 'children'> & Omit<ComponentProps<DataGridRowSlots>, 'children'> & {
    children: CellRenderFunction;
};

export declare type DataGridRowSlots = TableRowSlots & {
    /**
     * When selection is enabled on the @see DataGrid, all rows
     * will render the selection cell.
     */
    selectionCell?: Slot<typeof TableSelectionCell>;
};

/**
 * State used in rendering DataGridRow
 */
export declare type DataGridRowState = TableRowState & ComponentState<DataGridRowSlots>;

/**
 * DataGridSelectionCell component - TODO: add more docs
 */
export declare const DataGridSelectionCell: ForwardRefComponent<DataGridSelectionCellProps>;

export declare const dataGridSelectionCellClassNames: SlotClassNames<DataGridSelectionCellSlots>;

/**
 * DataGridSelectionCell Props
 */
export declare type DataGridSelectionCellProps = TableSelectionCellProps;

export declare type DataGridSelectionCellSlots = TableSelectionCellSlots;

/**
 * State used in rendering DataGridSelectionCell
 */
export declare type DataGridSelectionCellState = TableSelectionCellState;

export declare type DataGridSlots = TableSlots;

/**
 * State used in rendering DataGrid
 */
export declare type DataGridState = TableState & {
    tableState: HeadlessTableState<unknown>;
} & Pick<DataGridContextValue, 'focusMode' | 'selectableRows' | 'subtleSelection' | 'selectionAppearance' | 'getRowId'>;

export declare type FocusMode = 'none' | 'cell' | 'row_unstable';

export declare interface HeadlessTableState<TItem> extends Pick<UseTableOptions<TItem>, 'items' | 'getRowId'> {
    /**
     * The row data for rendering
     * @param rowEnhancer - Enhances the row with extra user data
     */
    getRows: <TRowState extends RowState<TItem> = RowState<TItem>>(rowEnhancer?: RowEnhancer<TItem, TRowState>) => TRowState[];
    /**
     * State and actions to manage row selection
     */
    selection: TableSelectionState;
    /**
     * State and actions to manage row sorting
     */
    sort: TableSortState<TItem>;
    /**
     * Table columns
     */
    columns: ColumnDefinition<TItem>[];
}

declare interface OnSelectionChangeData {
    selectedItems: Set<RowId>;
}

/**
 * Render the final JSX of DataGrid
 */
export declare const renderDataGrid_unstable: (state: DataGridState, contextValues: DataGridContextValues) => JSX.Element;

/**
 * Render the final JSX of DataGridBody
 */
export declare const renderDataGridBody_unstable: (state: DataGridBodyState) => JSX.Element;

/**
 * Render the final JSX of DataGridCell
 */
export declare const renderDataGridCell_unstable: (state: DataGridCellState) => JSX.Element;

/**
 * Render the final JSX of DataGridHeader
 */
export declare const renderDataGridHeader_unstable: (state: DataGridHeaderState) => JSX.Element;

/**
 * Render the final JSX of DataGridHeaderCell
 */
export declare const renderDataGridHeaderCell_unstable: (state: DataGridHeaderCellState) => JSX.Element;

/**
 * Render the final JSX of DataGridRow
 */
export declare const renderDataGridRow_unstable: (state: DataGridRowState) => JSX.Element;

/**
 * Render the final JSX of DataGridSelectionCell
 */
export declare const renderDataGridSelectionCell_unstable: (state: DataGridSelectionCellState) => JSX.Element;

/**
 * Render the final JSX of Table
 */
export declare const renderTable_unstable: (state: TableState, contextValues: TableContextValues) => JSX.Element;

/**
 * Render the final JSX of TableBody
 */
export declare const renderTableBody_unstable: (state: TableBodyState) => JSX.Element;

/**
 * Render the final JSX of TableCell
 */
export declare const renderTableCell_unstable: (state: TableCellState) => JSX.Element;

/**
 * Render the final JSX of TableCellActions
 */
export declare const renderTableCellActions_unstable: (state: TableCellActionsState) => JSX.Element;

/**
 * Render the final JSX of TableCellLayout
 */
export declare const renderTableCellLayout_unstable: (state: TableCellLayoutState, contextValues: TableCellLayoutContextValues) => JSX.Element;

/**
 * Render the final JSX of TableHeader
 */
export declare const renderTableHeader_unstable: (state: TableHeaderState) => JSX.Element;

/**
 * Render the final JSX of TableHeaderCell
 */
export declare const renderTableHeaderCell_unstable: (state: TableHeaderCellState) => JSX.Element;

/**
 * Render the final JSX of TableRow
 */
export declare const renderTableRow_unstable: (state: TableRowState) => JSX.Element;

/**
 * Render the final JSX of TableSelectionCell
 */
export declare const renderTableSelectionCell_unstable: (state: TableSelectionCellState) => JSX.Element;

declare type RowEnhancer<TItem, TRowState extends RowState<TItem> = RowState<TItem>> = (row: RowState<TItem>) => TRowState;

export declare type RowId = string | number;

export declare type RowRenderFunction<TItem = any> = (row: RowState<TItem>) => React_2.ReactNode;

export declare interface RowState<TItem> {
    /**
     * User provided data
     */
    item: TItem;
    /**
     * The row id, defaults to index position in the collection
     */
    rowId: RowId;
}

declare type SelectionMode_2 = 'single' | 'multiselect';

export declare type SortDirection = 'ascending' | 'descending';

declare interface SortState {
    sortColumn: ColumnId | undefined;
    sortDirection: SortDirection;
}

/**
 * Table component - TODO: add more docs
 */
export declare const Table: ForwardRefComponent<TableProps>;

/**
 * TableBody component - TODO: add more docs
 */
export declare const TableBody: ForwardRefComponent<TableBodyProps>;

export declare const tableBodyClassName = "fui-TableBody";

export declare const tableBodyClassNames: SlotClassNames<TableBodySlots>;

/**
 * TableBody Props
 */
export declare type TableBodyProps = ComponentProps<TableBodySlots>;

export declare type TableBodySlots = {
    root: Slot<'tbody', 'div'>;
};

/**
 * State used in rendering TableBody
 */
export declare type TableBodyState = ComponentState<TableBodySlots> & Pick<TableContextValue, 'noNativeElements'>;

/**
 * TableCell component - TODO: add more docs
 */
export declare const TableCell: ForwardRefComponent<TableCellProps>;

/**
 * TableCellActions component - TODO: add more docs
 */
export declare const TableCellActions: ForwardRefComponent<TableCellActionsProps>;

export declare const tableCellActionsClassNames: SlotClassNames<TableCellActionsSlots>;

/**
 * TableCellActions Props
 */
export declare type TableCellActionsProps = ComponentProps<TableCellActionsSlots> & {
    /**
     * When true, the actions are always visible regardless of row hover.
     * Can be useful keeping the actions visible when a popout surface is opened.
     */
    visible?: boolean;
};

export declare type TableCellActionsSlots = {
    root: Slot<'div'>;
};

/**
 * State used in rendering TableCellActions
 */
export declare type TableCellActionsState = ComponentState<TableCellActionsSlots> & Pick<Required<TableCellActionsProps>, 'visible'>;

export declare const tableCellClassName = "fui-TableCell";

export declare const tableCellClassNames: SlotClassNames<TableCellSlots>;

/**
 * TableCellLayout component - TODO: add more docs
 */
export declare const TableCellLayout: ForwardRefComponent<TableCellLayoutProps>;

export declare const tableCellLayoutClassNames: SlotClassNames<TableCellLayoutSlots>;

declare type TableCellLayoutContextValues = {
    avatar: {
        size?: AvatarSizes;
    };
};

/**
 * TableCellLayout Props
 */
export declare type TableCellLayoutProps = ComponentProps<Partial<TableCellLayoutSlots>> & {
    /**
     * Renders design variants of the table cell
     * @default undefined
     */
    appearance?: 'primary';
};

export declare type TableCellLayoutSlots = {
    root: Slot<'div'>;
    /**
     * Slot for an icon or other visual element
     */
    media: Slot<'span'>;
    /**
     * Main text for the table cell. Children of the root slot are automatically rendered here
     */
    main: Slot<'span'>;
    /**
     * Secondary text that describes or complements the main text
     */
    description: Slot<'span'>;
    /**
     * A layout wrapper for the main and description slots
     */
    wrapper: Slot<'div'>;
};

/**
 * State used in rendering TableCellLayout
 */
export declare type TableCellLayoutState = ComponentState<TableCellLayoutSlots> & Pick<TableCellLayoutProps, 'appearance'> & {
    avatarSize: AvatarSizes | undefined;
} & Pick<TableContextValue, 'size'>;

/**
 * TableCell Props
 */
export declare type TableCellProps = ComponentProps<TableCellSlots> & {};

export declare type TableCellSlots = {
    root: Slot<'td', 'div'>;
};

/**
 * State used in rendering TableCell
 */
export declare type TableCellState = ComponentState<TableCellSlots> & Pick<TableContextValue, 'noNativeElements' | 'size'>;

export declare const tableClassName = "fui-Table";

export declare const tableClassNames: SlotClassNames<TableSlots>;

export declare const TableContextProvider: React_2.Provider<TableContextValue | undefined>;

export declare type TableContextValue = {
    /**
     * Affects the sizes of all table subcomponents
     * @default medium
     */
    size: 'extra-small' | 'small' | 'medium';
    /**
     * Render all table elements as divs intead of semantic table elements
     * Using divs no longer uses `display: table` layout but `display: flex`
     * @default false
     */
    noNativeElements: boolean;
    /**
     * Whether the table is sortable
     * @default false
     */
    sortable: boolean;
};

export declare type TableContextValues = {
    table: TableContextValue;
};

/**
 * TableHeader component - TODO: add more docs
 */
export declare const TableHeader: ForwardRefComponent<TableHeaderProps>;

/**
 * TableHeaderCell component - TODO: add more docs
 */
export declare const TableHeaderCell: ForwardRefComponent<TableHeaderCellProps>;

export declare const tableHeaderCellClassName = "fui-TableHeaderCell";

export declare const tableHeaderCellClassNames: SlotClassNames<TableHeaderCellSlots>;

/**
 * TableHeaderCell Props
 */
export declare type TableHeaderCellProps = ComponentProps<Partial<TableHeaderCellSlots>> & {
    /**
     * @default undefined
     */
    sortDirection?: SortDirection;
};

export declare type TableHeaderCellSlots = {
    root: Slot<'th', 'div'>;
    sortIcon: Slot<'span'>;
    /**
     * Button handles correct narration and interactions for sorting;
     */
    button: NonNullable<Slot<ARIAButtonSlotProps>>;
};

/**
 * State used in rendering TableHeaderCell
 */
export declare type TableHeaderCellState = ComponentState<TableHeaderCellSlots> & Pick<TableContextValue, 'noNativeElements' | 'sortable'>;

export declare const tableHeaderClassName = "fui-TableHeader";

export declare const tableHeaderClassNames: SlotClassNames<TableHeaderSlots>;

/**
 * TableHeader Props
 */
export declare type TableHeaderProps = ComponentProps<TableHeaderSlots> & {};

export declare type TableHeaderSlots = {
    root: Slot<'thead', 'div'>;
};

/**
 * State used in rendering TableHeader
 */
export declare type TableHeaderState = ComponentState<TableHeaderSlots> & Pick<TableContextValue, 'noNativeElements'>;

/**
 * Table Props
 */
export declare type TableProps = ComponentProps<TableSlots> & Partial<TableContextValue>;

/**
 * TableRow component - TODO: add more docs
 */
export declare const TableRow: ForwardRefComponent<TableRowProps>;

export declare const tableRowClassName = "fui-TableRow";

export declare const tableRowClassNames: SlotClassNames<TableRowSlots>;

/**
 * TableRow Props
 */
export declare type TableRowProps = ComponentProps<TableRowSlots> & {
    /**
     * A table row can have different variants. These appearances are
     * intended to be used with selection.
     * @default none
     */
    appearance?: 'brand' | 'neutral' | 'none';
};

export declare type TableRowSlots = {
    root: Slot<'tr', 'div'>;
};

/**
 * State used in rendering TableRow
 */
export declare type TableRowState = ComponentState<TableRowSlots> & Pick<TableContextValue, 'noNativeElements' | 'size'> & Pick<Required<TableRowProps>, 'appearance'>;

/**
 * TableSelectionCell component - TODO: add more docs
 */
export declare const TableSelectionCell: ForwardRefComponent<TableSelectionCellProps>;

export declare const tableSelectionCellClassNames: SlotClassNames<TableSelectionCellSlots>;

/**
 * TableSelectionCell Props
 */
export declare type TableSelectionCellProps = ComponentProps<Partial<Omit<TableSelectionCellSlots, 'media'>>> & {
    /**
     * A table can have two kinds of selection modes.
     * @default checkbox
     */
    type?: 'checkbox' | 'radio';
    /**
     * @default false
     */
    checked?: CheckboxProps['checked'];
    /**
     * Only visible when checked or the parent row is hovered/focused
     * @default false
     */
    subtle?: boolean;
    /**
     * Completely hides the selection cell visually but takes up the same space
     * @default false
     */
    hidden?: boolean;
};

export declare type TableSelectionCellSlots = {
    /**
     * Selection indicator if selection type is checkbox
     */
    checkboxIndicator: Slot<typeof Checkbox>;
    /**
     * Selection indicator if selection type is radio
     */
    radioIndicator: Slot<typeof Radio>;
} & Pick<TableCellSlots, 'root'>;

/**
 * State used in rendering TableSelectionCell
 */
export declare type TableSelectionCellState = ComponentState<TableSelectionCellSlots> & Pick<Required<TableSelectionCellProps>, 'type' | 'checked' | 'subtle' | 'hidden'> & Pick<TableContextValue, 'noNativeElements'>;

export declare interface TableSelectionState {
    /**
     * Clears all selected rows
     */
    clearRows: (e: React_2.SyntheticEvent) => void;
    /**
     * Selects single row
     */
    selectRow: (e: React_2.SyntheticEvent, rowId: RowId) => void;
    /**
     * De-selects single row
     */
    deselectRow: (e: React_2.SyntheticEvent, rowId: RowId) => void;
    /**
     * Toggle selection of all rows
     */
    toggleAllRows: (e: React_2.SyntheticEvent) => void;
    /**
     * Toggle selection of single row
     */
    toggleRow: (e: React_2.SyntheticEvent, rowId: RowId) => void;
    /**
     * Collection of row ids corresponding to selected rows
     */
    selectedRows: Set<RowId>;
    /**
     * Whether all rows are selected
     */
    allRowsSelected: boolean;
    /**
     * Whether some rows are selected
     */
    someRowsSelected: boolean;
    /**
     * Checks if a given rowId is selected
     */
    isRowSelected: (rowId: RowId) => boolean;
    selectionMode: SelectionMode_2;
}

export declare type TableSlots = {
    root: Slot<'table', 'div'>;
};

export declare interface TableSortState<TItem> {
    /**
     * Current sort direction
     */
    sortDirection: SortDirection;
    /**
     * Column id of the currently sorted column
     */
    sortColumn: ColumnId | undefined;
    /**
     * Set the sort direction for the specified column
     */
    setColumnSort: (event: React_2.SyntheticEvent, columnId: ColumnId, sortDirection: SortDirection) => void;
    /**
     * Toggles the sort direction for specified column
     */
    toggleColumnSort: (event: React_2.SyntheticEvent, columnId: ColumnId) => void;
    /**
     * Returns the sort direction if a column is sorted,
     * returns undefined if the column is not sorted
     */
    getSortDirection: (columnId: ColumnId) => SortDirection | undefined;
    /**
     * Sorts rows and returns a **shallow** copy of original items
     */
    sort: <TRowState extends RowState<TItem>>(rows: TRowState[]) => TRowState[];
}

/**
 * State used in rendering Table
 */
export declare type TableState = ComponentState<TableSlots> & Pick<Required<TableProps>, 'size' | 'noNativeElements'> & TableContextValue;

export declare type TableStatePlugin = <TItem>(tableState: HeadlessTableState<TItem>) => HeadlessTableState<TItem>;

/**
 * Create the state required to render DataGrid.
 *
 * The returned state can be modified with hooks such as useDataGridStyles_unstable,
 * before being passed to renderDataGrid_unstable.
 *
 * @param props - props from this instance of DataGrid
 * @param ref - reference to root HTMLElement of DataGrid
 */
export declare const useDataGrid_unstable: (props: DataGridProps, ref: React_2.Ref<HTMLElement>) => DataGridState;

/**
 * Create the state required to render DataGridBody.
 *
 * The returned state can be modified with hooks such as useDataGridBodyStyles_unstable,
 * before being passed to renderDataGridBody_unstable.
 *
 * @param props - props from this instance of DataGridBody
 * @param ref - reference to root HTMLElement of DataGridBody
 */
export declare const useDataGridBody_unstable: (props: DataGridBodyProps, ref: React_2.Ref<HTMLElement>) => DataGridBodyState;

/**
 * Apply styling to the DataGridBody slots based on the state
 */
export declare const useDataGridBodyStyles_unstable: (state: DataGridBodyState) => DataGridBodyState;

/**
 * Create the state required to render DataGridCell.
 *
 * The returned state can be modified with hooks such as useDataGridCellStyles_unstable,
 * before being passed to renderDataGridCell_unstable.
 *
 * @param props - props from this instance of DataGridCell
 * @param ref - reference to root HTMLElement of DataGridCell
 */
export declare const useDataGridCell_unstable: (props: DataGridCellProps, ref: React_2.Ref<HTMLElement>) => DataGridCellState;

/**
 * Apply styling to the DataGridCell slots based on the state
 */
export declare const useDataGridCellStyles_unstable: (state: DataGridCellState) => DataGridCellState;

/**
 * Create the state required to render DataGridHeader.
 *
 * The returned state can be modified with hooks such as useDataGridHeaderStyles_unstable,
 * before being passed to renderDataGridHeader_unstable.
 *
 * @param props - props from this instance of DataGridHeader
 * @param ref - reference to root HTMLElement of DataGridHeader
 */
export declare const useDataGridHeader_unstable: (props: DataGridHeaderProps, ref: React_2.Ref<HTMLElement>) => DataGridHeaderState;

/**
 * Create the state required to render DataGridHeaderCell.
 *
 * The returned state can be modified with hooks such as useDataGridHeaderCellStyles_unstable,
 * before being passed to renderDataGridHeaderCell_unstable.
 *
 * @param props - props from this instance of DataGridHeaderCell
 * @param ref - reference to root HTMLElement of DataGridHeaderCell
 */
export declare const useDataGridHeaderCell_unstable: (props: DataGridHeaderCellProps, ref: React_2.Ref<HTMLElement>) => DataGridHeaderCellState;

/**
 * Apply styling to the DataGridHeaderCell slots based on the state
 */
export declare const useDataGridHeaderCellStyles_unstable: (state: DataGridHeaderCellState) => DataGridHeaderCellState;

/**
 * Apply styling to the DataGridHeader slots based on the state
 */
export declare const useDataGridHeaderStyles_unstable: (state: DataGridHeaderState) => DataGridHeaderState;

/**
 * Create the state required to render DataGridRow.
 *
 * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,
 * before being passed to renderDataGridRow_unstable.
 *
 * @param props - props from this instance of DataGridRow
 * @param ref - reference to root HTMLElement of DataGridRow
 */
export declare const useDataGridRow_unstable: (props: DataGridRowProps, ref: React_2.Ref<HTMLElement>) => DataGridRowState;

/**
 * Apply styling to the DataGridRow slots based on the state
 */
export declare const useDataGridRowStyles_unstable: (state: DataGridRowState) => DataGridRowState;

/**
 * Create the state required to render DataGridSelectionCell.
 *
 * The returned state can be modified with hooks such as useDataGridSelectionCellStyles_unstable,
 * before being passed to renderDataGridSelectionCell_unstable.
 *
 * @param props - props from this instance of DataGridSelectionCell
 * @param ref - reference to root HTMLElement of DataGridSelectionCell
 */
export declare const useDataGridSelectionCell_unstable: (props: DataGridSelectionCellProps, ref: React_2.Ref<HTMLElement>) => DataGridSelectionCellState;

/**
 * Apply styling to the DataGridSelectionCell slots based on the state
 */
export declare const useDataGridSelectionCellStyles_unstable: (state: DataGridSelectionCellState) => DataGridSelectionCellState;

/**
 * Apply styling to the DataGrid slots based on the state
 */
export declare const useDataGridStyles_unstable: (state: DataGridState) => DataGridState;

/**
 * Create the state required to render Table.
 *
 * The returned state can be modified with hooks such as useTableStyles_unstable,
 * before being passed to renderTable_unstable.
 *
 * @param props - props from this instance of Table
 * @param ref - reference to root HTMLElement of Table
 */
export declare const useTable_unstable: (props: TableProps, ref: React_2.Ref<HTMLElement>) => TableState;

/**
 * Create the state required to render TableBody.
 *
 * The returned state can be modified with hooks such as useTableBodyStyles_unstable,
 * before being passed to renderTableBody_unstable.
 *
 * @param props - props from this instance of TableBody
 * @param ref - reference to root HTMLElement of TableBody
 */
export declare const useTableBody_unstable: (props: TableBodyProps, ref: React_2.Ref<HTMLElement>) => TableBodyState;

/**
 * Apply styling to the TableBody slots based on the state
 */
export declare const useTableBodyStyles_unstable: (state: TableBodyState) => TableBodyState;

/**
 * Create the state required to render TableCell.
 *
 * The returned state can be modified with hooks such as useTableCellStyles_unstable,
 * before being passed to renderTableCell_unstable.
 *
 * @param props - props from this instance of TableCell
 * @param ref - reference to root HTMLElement of TableCell
 */
export declare const useTableCell_unstable: (props: TableCellProps, ref: React_2.Ref<HTMLElement>) => TableCellState;

/**
 * Create the state required to render TableCellActions.
 *
 * The returned state can be modified with hooks such as useTableCellActionsStyles_unstable,
 * before being passed to renderTableCellActions_unstable.
 *
 * @param props - props from this instance of TableCellActions
 * @param ref - reference to root HTMLElement of TableCellActions
 */
export declare const useTableCellActions_unstable: (props: TableCellActionsProps, ref: React_2.Ref<HTMLElement>) => TableCellActionsState;

/**
 * Apply styling to the TableCellActions slots based on the state
 */
export declare const useTableCellActionsStyles_unstable: (state: TableCellActionsState) => TableCellActionsState;

/**
 * Create the state required to render TableCellLayout.
 *
 * The returned state can be modified with hooks such as useTableCellLayoutStyles_unstable,
 * before being passed to renderTableCellLayout_unstable.
 *
 * @param props - props from this instance of TableCellLayout
 * @param ref - reference to root HTMLElement of TableCellLayout
 */
export declare const useTableCellLayout_unstable: (props: TableCellLayoutProps, ref: React_2.Ref<HTMLElement>) => TableCellLayoutState;

/**
 * Apply styling to the TableCellLayout slots based on the state
 */
export declare const useTableCellLayoutStyles_unstable: (state: TableCellLayoutState) => TableCellLayoutState;

/**
 * Apply styling to the TableCell slots based on the state
 */
export declare const useTableCellStyles_unstable: (state: TableCellState) => TableCellState;

export declare const useTableContext: () => TableContextValue;

export declare function useTableFeatures<TItem>(options: UseTableOptions<TItem>, plugins?: TableStatePlugin[]): HeadlessTableState<TItem>;

/**
 * Create the state required to render TableHeader.
 *
 * The returned state can be modified with hooks such as useTableHeaderStyles_unstable,
 * before being passed to renderTableHeader_unstable.
 *
 * @param props - props from this instance of TableHeader
 * @param ref - reference to root HTMLElement of TableHeader
 */
export declare const useTableHeader_unstable: (props: TableHeaderProps, ref: React_2.Ref<HTMLElement>) => TableHeaderState;

/**
 * Create the state required to render TableHeaderCell.
 *
 * The returned state can be modified with hooks such as useTableHeaderCellStyles_unstable,
 * before being passed to renderTableHeaderCell_unstable.
 *
 * @param props - props from this instance of TableHeaderCell
 * @param ref - reference to root HTMLElement of TableHeaderCell
 */
export declare const useTableHeaderCell_unstable: (props: TableHeaderCellProps, ref: React_2.Ref<HTMLElement>) => TableHeaderCellState;

/**
 * Apply styling to the TableHeaderCell slots based on the state
 */
export declare const useTableHeaderCellStyles_unstable: (state: TableHeaderCellState) => TableHeaderCellState;

/**
 * Apply styling to the TableHeader slots based on the state
 */
export declare const useTableHeaderStyles_unstable: (state: TableHeaderState) => TableHeaderState;

export declare interface UseTableOptions<TItem> {
    columns: ColumnDefinition<TItem>[];
    items: TItem[];
    getRowId?: (item: TItem) => RowId;
}

/**
 * Create the state required to render TableRow.
 *
 * The returned state can be modified with hooks such as useTableRowStyles_unstable,
 * before being passed to renderTableRow_unstable.
 *
 * @param props - props from this instance of TableRow
 * @param ref - reference to root HTMLElement of TableRow
 */
export declare const useTableRow_unstable: (props: TableRowProps, ref: React_2.Ref<HTMLElement>) => TableRowState;

/**
 * Apply styling to the TableRow slots based on the state
 */
export declare const useTableRowStyles_unstable: (state: TableRowState) => TableRowState;

export declare function useTableSelection<TItem>(options: UseTableSelectionOptions): (tableState: HeadlessTableState<TItem>) => HeadlessTableState<TItem>;

/**
 * Create the state required to render TableSelectionCell.
 *
 * The returned state can be modified with hooks such as useTableSelectionCellStyles_unstable,
 * before being passed to renderTableSelectionCell_unstable.
 *
 * @param props - props from this instance of TableSelectionCell
 * @param ref - reference to root HTMLElement of TableSelectionCell
 */
export declare const useTableSelectionCell_unstable: (props: TableSelectionCellProps, ref: React_2.Ref<HTMLElement>) => TableSelectionCellState;

/**
 * Apply styling to the TableSelectionCell slots based on the state
 */
export declare const useTableSelectionCellStyles_unstable: (state: TableSelectionCellState) => TableSelectionCellState;

declare interface UseTableSelectionOptions {
    /**
     * Can be multi or single select
     */
    selectionMode: SelectionMode_2;
    /**
     * Used in uncontrolled mode to set initial selected rows on mount
     */
    defaultSelectedItems?: Set<RowId>;
    /**
     * Used to control row selection
     */
    selectedItems?: Set<RowId>;
    /**
     * Called when selection changes
     */
    onSelectionChange?(e: React_2.SyntheticEvent, data: OnSelectionChangeData): void;
}

export declare function useTableSort<TItem>(options: UseTableSortOptions): (tableState: HeadlessTableState<TItem>) => HeadlessTableState<TItem>;

declare interface UseTableSortOptions {
    /**
     * Used to control sorting
     */
    sortState?: SortState;
    /**
     * Used in uncontrolled mode to set initial sort column and direction on mount
     */
    defaultSortState?: SortState;
    /**
     * Called when sort changes
     */
    onSortChange?(e: React_2.SyntheticEvent, state: SortState): void;
}

/**
 * Apply styling to the Table slots based on the state
 */
export declare const useTableStyles_unstable: (state: TableState) => TableState;

export { }
