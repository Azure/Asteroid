"use strict";
/* color palette used in both darkTheme and teamsDarkTheme */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorPaletteTokens = void 0;

const colorPalette_1 = /*#__PURE__*/require("../global/colorPalette");

const sharedColorNames_1 = /*#__PURE__*/require("../sharedColorNames");

const statusColorPaletteTokens = /*#__PURE__*/sharedColorNames_1.statusSharedColorNames.reduce((acc, sharedColor) => {
  const color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
  const sharedColorTokens = {
    [`colorPalette${color}Background1`]: colorPalette_1.statusSharedColors[sharedColor].shade40,
    [`colorPalette${color}Background2`]: colorPalette_1.statusSharedColors[sharedColor].shade30,
    [`colorPalette${color}Background3`]: colorPalette_1.statusSharedColors[sharedColor].primary,
    [`colorPalette${color}Foreground1`]: colorPalette_1.statusSharedColors[sharedColor].tint30,
    [`colorPalette${color}Foreground2`]: colorPalette_1.statusSharedColors[sharedColor].tint40,
    [`colorPalette${color}Foreground3`]: colorPalette_1.statusSharedColors[sharedColor].tint20,
    [`colorPalette${color}BorderActive`]: colorPalette_1.statusSharedColors[sharedColor].tint30,
    [`colorPalette${color}Border1`]: colorPalette_1.statusSharedColors[sharedColor].primary,
    [`colorPalette${color}Border2`]: colorPalette_1.statusSharedColors[sharedColor].tint20
  };
  return Object.assign(acc, sharedColorTokens);
}, {}); // one-off patches

statusColorPaletteTokens.colorPaletteRedForeground3 = colorPalette_1.statusSharedColors.red.tint30;
statusColorPaletteTokens.colorPaletteRedBorder2 = colorPalette_1.statusSharedColors.red.tint30;
statusColorPaletteTokens.colorPaletteGreenForeground3 = colorPalette_1.statusSharedColors.green.tint40;
statusColorPaletteTokens.colorPaletteGreenBorder2 = colorPalette_1.statusSharedColors.green.tint40;
statusColorPaletteTokens.colorPaletteDarkOrangeForeground3 = colorPalette_1.statusSharedColors.darkOrange.tint30;
statusColorPaletteTokens.colorPaletteDarkOrangeBorder2 = colorPalette_1.statusSharedColors.darkOrange.tint30;
statusColorPaletteTokens.colorPaletteRedForegroundInverted = colorPalette_1.statusSharedColors.red.primary;
statusColorPaletteTokens.colorPaletteGreenForegroundInverted = colorPalette_1.statusSharedColors.green.primary;
statusColorPaletteTokens.colorPaletteYellowForegroundInverted = colorPalette_1.statusSharedColors.yellow.shade30;
const personaColorPaletteTokens = /*#__PURE__*/sharedColorNames_1.personaSharedColorNames.reduce((acc, sharedColor) => {
  const color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
  const sharedColorTokens = {
    [`colorPalette${color}Background2`]: colorPalette_1.personaSharedColors[sharedColor].shade30,
    [`colorPalette${color}Foreground2`]: colorPalette_1.personaSharedColors[sharedColor].tint40,
    [`colorPalette${color}BorderActive`]: colorPalette_1.personaSharedColors[sharedColor].tint30
  };
  return Object.assign(acc, sharedColorTokens);
}, {}); // one-off patches

personaColorPaletteTokens.colorPaletteDarkRedBackground2 = colorPalette_1.personaSharedColors.darkRed.shade20;
personaColorPaletteTokens.colorPalettePlumBackground2 = colorPalette_1.personaSharedColors.plum.shade20;
exports.colorPaletteTokens = { ...statusColorPaletteTokens,
  ...personaColorPaletteTokens
};
//# sourceMappingURL=darkColorPalette.js.map