{"version":3,"file":"themeToTokensObject.js","sourceRoot":"","sources":["../../../../../../packages/tokens/src/themeToTokensObject.ts"],"names":[],"mappings":";;;;IAEA;;;;;;;OAOG;IACH,SAAgB,mBAAmB,CAAuB,KAAa;QACrE,IAAM,MAAM,GAAG,EAAkC,CAAC;QAClD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAqB,CAAC;QACpD,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;YAAnB,IAAM,GAAG,aAAA;YACZ,MAAM,CAAC,GAAG,CAAC,GAAG,WAAS,GAAG,MAAG,CAAC;SAC/B;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAPD,kDAOC","sourcesContent":["import { Theme } from './types';\n\n/**\n * Programmatically generates a tokens to css variables mapping object from the keys in a theme.\n * This helps with ease of use as a user of a custom theme does not have to manually construct this object, but it could\n * affect tree-shaking since bundlers do not know the shape of the output.\n *\n * @param theme - Theme from which to get the keys to generate the tokens to css variables mapping object\n * @returns Tokens to css variables mapping object corresponding to the passed theme\n */\nexport function themeToTokensObject<TTheme extends Theme>(theme: TTheme): Record<keyof TTheme, string> {\n  const tokens = {} as Record<keyof TTheme, string>;\n  const keys = Object.keys(theme) as (keyof TTheme)[];\n  for (const key of keys) {\n    tokens[key] = `var(--${key})`;\n  }\n  return tokens;\n}\n"]}