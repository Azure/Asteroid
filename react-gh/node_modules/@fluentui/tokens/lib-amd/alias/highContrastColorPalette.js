define(["require", "exports", "tslib", "../global/colors", "../sharedColorNames"], function (require, exports, tslib_1, colors_1, sharedColorNames_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.colorPaletteTokens = void 0;
    var statusColorPaletteTokens = sharedColorNames_1.statusSharedColorNames.reduce(function (acc, sharedColor) {
        var _a;
        var color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
        var sharedColorTokens = (_a = {},
            _a["colorPalette" + color + "Background1"] = colors_1.hcCanvas,
            _a["colorPalette" + color + "Background2"] = colors_1.hcCanvas,
            _a["colorPalette" + color + "Background3"] = colors_1.hcCanvasText,
            _a["colorPalette" + color + "Foreground1"] = colors_1.hcCanvasText,
            _a["colorPalette" + color + "Foreground2"] = colors_1.hcCanvasText,
            _a["colorPalette" + color + "Foreground3"] = colors_1.hcCanvasText,
            _a["colorPalette" + color + "BorderActive"] = colors_1.hcHighlight,
            _a["colorPalette" + color + "Border1"] = colors_1.hcCanvasText,
            _a["colorPalette" + color + "Border2"] = colors_1.hcCanvasText,
            _a);
        return Object.assign(acc, sharedColorTokens);
    }, {});
    // one-off patches
    statusColorPaletteTokens.colorPaletteRedForegroundInverted = colors_1.hcCanvasText;
    statusColorPaletteTokens.colorPaletteGreenForegroundInverted = colors_1.hcCanvasText;
    statusColorPaletteTokens.colorPaletteYellowForegroundInverted = colors_1.hcCanvasText;
    var personaColorPaletteTokens = sharedColorNames_1.personaSharedColorNames.reduce(function (acc, sharedColor) {
        var _a;
        var color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
        var sharedColorTokens = (_a = {},
            _a["colorPalette" + color + "Background2"] = colors_1.hcCanvas,
            _a["colorPalette" + color + "Foreground2"] = colors_1.hcCanvasText,
            _a["colorPalette" + color + "BorderActive"] = colors_1.hcHighlight,
            _a);
        return Object.assign(acc, sharedColorTokens);
    }, {});
    exports.colorPaletteTokens = tslib_1.__assign(tslib_1.__assign({}, statusColorPaletteTokens), personaColorPaletteTokens);
});
//# sourceMappingURL=highContrastColorPalette.js.map