{"version":3,"file":"Field.types.js","sourceRoot":"../src/","sources":["packages/react-components/react-field/src/components/Field/Field.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { Label } from '@fluentui/react-label';\nimport type { ComponentProps, ComponentState, Slot, SlotClassNames } from '@fluentui/react-utilities';\nimport type { SlotComponent } from './SlotComponent.types';\n\n/**\n * The minimum requirement for a component used by Field.\n *\n * Note: the use of VoidFunctionComponent means that component is not *required* to have a children prop,\n * but it is still allowed to have a children prop.\n */\nexport type FieldControl = React.VoidFunctionComponent<\n  Pick<\n    React.HTMLAttributes<HTMLElement>,\n    'id' | 'className' | 'style' | 'aria-labelledby' | 'aria-describedby' | 'aria-invalid'\n  >\n>;\n\n/**\n * Slots added by Field\n */\nexport type FieldSlots<T extends FieldControl> = {\n  root: NonNullable<Slot<'div'>>;\n\n  /**\n   * The underlying component wrapped by this field.\n   */\n  control: SlotComponent<T>;\n\n  /**\n   * The label associated with the field.\n   */\n  label?: Slot<typeof Label>;\n\n  /**\n   * A message about the validation state. The appearance of the `validationMessage` depends on `validationState`.\n   */\n  validationMessage?: Slot<'div'>;\n\n  /**\n   * The icon associated with the `validationMessage`. If the `validationState` prop is set, this will default to an\n   * icon corresponding to that state.\n   *\n   * This will only be displayed if `validationMessage` is set.\n   */\n  validationMessageIcon?: Slot<'span'>;\n\n  /**\n   * Additional hint text below the field.\n   */\n  hint?: Slot<'div'>;\n};\n\n/**\n * Field Props\n */\nexport type FieldProps<T extends FieldControl> = ComponentProps<Partial<FieldSlots<T>>, 'control'> & {\n  /**\n   * The orientation of the label relative to the field component.\n   * This only affects the label, and not the validationMessage or hint (which always appear below the field component).\n   *\n   * @default vertical\n   */\n  orientation?: 'vertical' | 'horizontal';\n\n  /**\n   * The `validationState` affects the color of the `validationMessage`, the `validationMessageIcon`, and for some\n   * field components, an `validationState=\"error\"` causes the border to become red.\n   *\n   * @default undefined\n   */\n  validationState?: 'error' | 'warning' | 'success';\n};\n\n/**\n * FieldProps plus extra optional props that are supported by useField_unstable, but not required to be part of the\n * API of every Field component.\n *\n * This allows Field to forward the required and size props to the label if the underlying component supports them,\n * but doesn't add them to the public API of fields that don't support them.\n */\nexport type FieldPropsWithOptionalComponentProps<T extends FieldControl> = FieldProps<T> & {\n  /**\n   * A ref to the underlying control.\n   */\n  ref?: React.Ref<HTMLElement>;\n\n  /**\n   * Whether the field label should be marked as required.\n   */\n  required?: boolean;\n\n  /**\n   * Size of the field label.\n   *\n   * Number sizes will be ignored, but are allowed because the HTML `<input>` element has a prop `size?: number`.\n   */\n  size?: 'small' | 'medium' | 'large' | number;\n};\n\n/**\n * Configuration parameters for a Field class, passed to useField_unstable\n */\nexport type FieldConfig<T extends FieldControl> = {\n  /**\n   * The underlying input component that this field is wrapping.\n   */\n  component: T;\n\n  /**\n   * Class names for this component, created by `getFieldClassNames`.\n   */\n  classNames: SlotClassNames<FieldSlots<T>>;\n\n  /**\n   * How the label be connected to the control.\n   * * htmlFor - Set the Label's htmlFor prop to the component's ID (and generate an ID if not provided).\n   *   This is the preferred method for components that use the underlying <input> tag.\n   * * aria-labelledby - Set the component's aria-labelledby prop to the Label's ID. Use this for components\n   *   that are not directly <input> elements (such as RadioGroup).\n   *\n   * @default htmlFor\n   */\n  labelConnection?: 'htmlFor' | 'aria-labelledby';\n\n  /**\n   * Should the aria-invalid attribute be set when validationState=\"error\".\n   *\n   * @default true\n   */\n  ariaInvalidOnError?: boolean;\n};\n\n/**\n * State used in rendering Field\n */\nexport type FieldState<T extends FieldControl> = ComponentState<Required<FieldSlots<T>>> &\n  Pick<FieldProps<T>, 'orientation' | 'validationState'> & {\n    classNames: SlotClassNames<FieldSlots<T>>;\n  };\n"]}