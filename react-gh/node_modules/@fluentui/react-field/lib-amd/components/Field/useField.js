define(["require", "exports", "tslib", "react", "@fluentui/react-icons", "@fluentui/react-label", "@fluentui/react-utilities"], function (require, exports, tslib_1, React, react_icons_1, react_label_1, react_utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useField_unstable = exports.getPartitionedFieldProps = void 0;
    var validationMessageIcons = {
        error: React.createElement(react_icons_1.ErrorCircle12Filled, null),
        warning: React.createElement(react_icons_1.Warning12Filled, null),
        success: React.createElement(react_icons_1.CheckmarkCircle12Filled, null),
    };
    /**
     * Partition the props used by the Field itself, from the props that are passed to the underlying field component.
     */
    var getPartitionedFieldProps = function (props) {
        var className = props.className, control = props.control, hint = props.hint, label = props.label, orientation = props.orientation, root = props.root, style = props.style, validationMessage = props.validationMessage, validationMessageIcon = props.validationMessageIcon, validationState = props.validationState, restOfProps = tslib_1.__rest(props, ["className", "control", "hint", "label", "orientation", "root", "style", "validationMessage", "validationMessageIcon", "validationState"]);
        var fieldProps = {
            className: className,
            control: control,
            hint: hint,
            label: label,
            orientation: orientation,
            root: root,
            style: style,
            validationMessage: validationMessage,
            validationMessageIcon: validationMessageIcon,
            validationState: validationState,
        };
        return [fieldProps, restOfProps];
    };
    exports.getPartitionedFieldProps = getPartitionedFieldProps;
    /**
     * Create the state required to render Field.
     *
     * The returned state can be modified with hooks such as useFieldStyles_unstable,
     * before being passed to renderField_unstable.
     *
     * @param props - Props passed to this field
     * @param ref - Ref to the control slot (primary slot)
     * @param params - Configuration parameters for this Field
     */
    var useField_unstable = function (props, ref, params) {
        var _a, _b, _c;
        var _d = exports.getPartitionedFieldProps(props), fieldProps = _d[0], controlProps = _d[1];
        var _e = fieldProps.orientation, orientation = _e === void 0 ? 'vertical' : _e, validationState = fieldProps.validationState;
        var _f = params.labelConnection, labelConnection = _f === void 0 ? 'htmlFor' : _f, _g = params.ariaInvalidOnError, ariaInvalidOnError = _g === void 0 ? true : _g;
        var baseId = react_utilities_1.useId('field-');
        var root = react_utilities_1.resolveShorthand(fieldProps.root, {
            required: true,
            defaultProps: react_utilities_1.getNativeElementProps('div', fieldProps),
        });
        var label = react_utilities_1.resolveShorthand(fieldProps.label, {
            defaultProps: {
                id: baseId + '__label',
                required: controlProps.required,
                size: typeof controlProps.size === 'string' ? controlProps.size : undefined,
                // htmlFor is handled below
            },
        });
        var validationMessage = react_utilities_1.resolveShorthand(fieldProps.validationMessage, {
            defaultProps: {
                id: baseId + '__validationMessage',
            },
        });
        var hint = react_utilities_1.resolveShorthand(fieldProps.hint, {
            defaultProps: {
                id: baseId + '__hint',
            },
        });
        var validationMessageIcon = react_utilities_1.resolveShorthand(fieldProps.validationMessageIcon, {
            required: !!validationState,
            defaultProps: {
                children: validationState ? validationMessageIcons[validationState] : undefined,
            },
        });
        // Hook up aria props on the control
        if (label && labelConnection === 'aria-labelledby') {
            (_a = controlProps['aria-labelledby']) !== null && _a !== void 0 ? _a : (controlProps['aria-labelledby'] = label.id);
        }
        if (validationMessage || hint) {
            // The control is described by the validation message, or hint, or both
            // We also preserve and append any aria-describedby supplied by the user
            // For reference: https://github.com/microsoft/fluentui/pull/25580#discussion_r1017259933
            controlProps['aria-describedby'] = [validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.id, hint === null || hint === void 0 ? void 0 : hint.id, controlProps['aria-describedby']]
                .filter(Boolean)
                .join(' ');
        }
        if (validationState === 'error' && ariaInvalidOnError) {
            (_b = controlProps['aria-invalid']) !== null && _b !== void 0 ? _b : (controlProps['aria-invalid'] = true);
        }
        var control = react_utilities_1.resolveShorthand(fieldProps.control, {
            required: true,
            defaultProps: tslib_1.__assign({ ref: ref, id: baseId + '__control' }, controlProps),
        });
        if (label && labelConnection === 'htmlFor') {
            (_c = label.htmlFor) !== null && _c !== void 0 ? _c : (label.htmlFor = control.id);
        }
        var state = {
            orientation: orientation,
            validationState: validationState,
            classNames: params.classNames,
            components: {
                root: 'div',
                control: params.component,
                label: react_label_1.Label,
                validationMessage: 'div',
                validationMessageIcon: 'span',
                hint: 'div',
            },
            root: root,
            control: control,
            label: label,
            validationMessageIcon: validationMessageIcon,
            validationMessage: validationMessage,
            hint: hint,
        };
        return state;
    };
    exports.useField_unstable = useField_unstable;
});
//# sourceMappingURL=useField.js.map