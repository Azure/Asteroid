{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_cpp.9b012963.chunk.js","mappings":"0GAKA,SAASA,EAAEC,GACTA,EAAMC,UAAUF,EAAIC,EAAMC,UAAUC,OAAO,QAAS,CAClD,aAAc,CACZC,QAAS,4BACTC,YAAY,GAEdC,QAAS,sUACTC,SAAU,kDACVC,OAAQ,0GAEVP,EAAMC,UAAUO,aAAa,IAAK,SAAU,CAC1CC,MAAO,CAGLN,QAAS,qDACTC,YAAY,EACZM,MAAO,WACPC,OAAQ,CAENC,OAAQ,CACNT,QAAS,8CACTC,YAAY,GAGdS,UAAW,CACTV,QAAS,4GACTC,YAAY,EACZM,MAAO,aAKbI,SAAU,sIAELd,EAAMC,UAAUF,EAAW,OACpC,CAtCAgB,EAAOC,QAAUjB,EACjBA,EAAEkB,YAAc,IAChBlB,EAAEmB,QAAU,E,uBCHZ,IAAIC,EAAaC,EAAQ,KAIzB,SAASC,EAAIrB,GACXA,EAAMsB,SAASH,GACfnB,EAAMC,UAAUoB,IAAMrB,EAAMC,UAAUC,OAAO,IAAK,CAChD,aAAc,CACZC,QAAS,kCACTC,YAAY,GAEdC,QAAS,8lBACTE,OAAQ,CACNJ,QAAS,qIACToB,QAAQ,GAEVjB,SAAU,iHACVkB,QAAS,uBAEXxB,EAAMC,UAAUO,aAAa,MAAO,SAAU,CAC5C,aAAc,CACZL,QAAS,oCACTO,MAAO,SACPa,QAAQ,IAGd,CAzBAR,EAAOC,QAAUK,EACjBA,EAAIJ,YAAc,MAClBI,EAAIH,QAAU,E","sources":["../node_modules/refractor/lang/c.js","../node_modules/refractor/lang/cpp.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = c\r\nc.displayName = 'c'\r\nc.aliases = []\r\nfunction c(Prism) {\r\n  Prism.languages.c = Prism.languages.extend('clike', {\r\n    'class-name': {\r\n      pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\r\n      lookbehind: true\r\n    },\r\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\r\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\r\n    number: /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\r\n  })\r\n  Prism.languages.insertBefore('c', 'string', {\r\n    macro: {\r\n      // allow for multiline macro definitions\r\n      // spaces after the # character compile fine with gcc\r\n      pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\r\n      lookbehind: true,\r\n      alias: 'property',\r\n      inside: {\r\n        // highlight the path of the include statement as a string\r\n        string: {\r\n          pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\r\n          lookbehind: true\r\n        },\r\n        // highlight macro directives as keywords\r\n        directive: {\r\n          pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\r\n          lookbehind: true,\r\n          alias: 'keyword'\r\n        }\r\n      }\r\n    },\r\n    // highlight predefined macros as constants\r\n    constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\r\n  })\r\n  delete Prism.languages.c['boolean']\r\n}\r\n","'use strict'\r\nvar refractorC = require('./c.js')\r\nmodule.exports = cpp\r\ncpp.displayName = 'cpp'\r\ncpp.aliases = []\r\nfunction cpp(Prism) {\r\n  Prism.register(refractorC)\r\n  Prism.languages.cpp = Prism.languages.extend('c', {\r\n    'class-name': {\r\n      pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\r\n      lookbehind: true\r\n    },\r\n    keyword: /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\r\n    number: {\r\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+\\.?[\\da-f']*|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+\\.?[\\d']*|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]*/i,\r\n      greedy: true\r\n    },\r\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\r\n    boolean: /\\b(?:true|false)\\b/\r\n  })\r\n  Prism.languages.insertBefore('cpp', 'string', {\r\n    'raw-string': {\r\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\r\n      alias: 'string',\r\n      greedy: true\r\n    }\r\n  })\r\n}\r\n"],"names":["c","Prism","languages","extend","pattern","lookbehind","keyword","operator","number","insertBefore","macro","alias","inside","string","directive","constant","module","exports","displayName","aliases","refractorC","require","cpp","register","greedy","boolean"],"sourceRoot":""}