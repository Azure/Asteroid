{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_markup.c04f811a.chunk.js","mappings":"sGAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,kBACTC,OAAQ,iBACRC,QAAS,sBACTC,MAAO,0BACPC,IAAK,CACHC,QAAS,wHACTC,QAAQ,EACRC,OAAQ,CACNH,IAAK,CACHC,QAAS,kBACTE,OAAQ,CACNC,YAAa,QACbC,UAAW,iBAGf,aAAc,CACZJ,QAAS,sCACTE,OAAQ,CACNC,YAAa,CACX,KACA,CACEH,QAAS,mBACTK,YAAY,MAKpBF,YAAa,OACb,YAAa,CACXH,QAAS,YACTE,OAAQ,CACNE,UAAW,mBAKnBE,OAAQ,qBAEVb,EAAMC,UAAUF,OAAY,IAAEU,OAAO,cAAcA,OAAe,OAChET,EAAMC,UAAUF,OAAe,OACjCC,EAAMc,MAAMC,IAAI,QAAQ,SAASC,GACd,WAAbA,EAAIC,OACND,EAAIE,WAAkB,MAAIF,EAAIG,QAAQC,MAAMC,QAAQ,QAAS,KAEjE,IACAC,OAAOC,eAAevB,EAAMC,UAAUF,OAAOO,IAAK,aAAc,CAY9Dc,MAAO,SAAoBI,EAASC,GAClC,IAAIC,EAAsB,CAAC,EAC3BA,EAAoB,YAAcD,GAAQ,CACxClB,QAAS,oCACTK,YAAY,EACZH,OAAQT,EAAMC,UAAUwB,IAE1BC,EAA2B,MAAI,uBAC/B,IAAIjB,EAAS,CACX,iBAAkB,CAChBF,QAAS,4BACTE,OAAQiB,IAGZjB,EAAO,YAAcgB,GAAQ,CAC3BlB,QAAS,UACTE,OAAQT,EAAMC,UAAUwB,IAE1B,IAAIE,EAAM,CAAC,EACXA,EAAIH,GAAW,CACbjB,QAASqB,OACP,mEAAmEC,OAAOR,QACxE,MACAG,GAEF,KAEFZ,YAAY,EACZJ,QAAQ,EACRC,OAAQA,GAEVT,EAAMC,UAAU6B,aAAa,SAAU,QAASH,EAClD,IAEF3B,EAAMC,UAAU8B,IAAM/B,EAAMC,UAAU+B,OAAO,SAAU,CAAC,GACxDhC,EAAMC,UAAUgC,KAAOjC,EAAMC,UAAUF,OACvCC,EAAMC,UAAUiC,OAASlC,EAAMC,UAAUF,OACzCC,EAAMC,UAAUkC,IAAMnC,EAAMC,UAAUF,MACxC,CApGAqC,EAAOC,QAAUtC,EACjBA,EAAOuC,YAAc,SACrBvC,EAAOwC,QAAU,CAAC,MAAO,OAAQ,SAAU,M","sources":["../node_modules/refractor/lang/markup.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = markup\r\nmarkup.displayName = 'markup'\r\nmarkup.aliases = ['xml', 'html', 'mathml', 'svg']\r\nfunction markup(Prism) {\r\n  Prism.languages.markup = {\r\n    comment: /<!--[\\s\\S]*?-->/,\r\n    prolog: /<\\?[\\s\\S]+?\\?>/,\r\n    doctype: /<!DOCTYPE[\\s\\S]+?>/i,\r\n    cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\r\n    tag: {\r\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\r\n      greedy: true,\r\n      inside: {\r\n        tag: {\r\n          pattern: /^<\\/?[^\\s>\\/]+/i,\r\n          inside: {\r\n            punctuation: /^<\\/?/,\r\n            namespace: /^[^\\s>\\/:]+:/\r\n          }\r\n        },\r\n        'attr-value': {\r\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\r\n          inside: {\r\n            punctuation: [\r\n              /^=/,\r\n              {\r\n                pattern: /^(\\s*)[\"']|[\"']$/,\r\n                lookbehind: true\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        punctuation: /\\/?>/,\r\n        'attr-name': {\r\n          pattern: /[^\\s>\\/]+/,\r\n          inside: {\r\n            namespace: /^[^\\s>\\/:]+:/\r\n          }\r\n        }\r\n      }\r\n    },\r\n    entity: /&#?[\\da-z]{1,8};/i\r\n  }\r\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\r\n    Prism.languages.markup['entity'] // Plugin to make entity title show the real entity, idea by Roman Komarov\r\n  Prism.hooks.add('wrap', function(env) {\r\n    if (env.type === 'entity') {\r\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\r\n    }\r\n  })\r\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\r\n    /**\r\n     * Adds an inlined language to markup.\r\n     *\r\n     * An example of an inlined language is CSS with `<style>` tags.\r\n     *\r\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n     * case insensitive.\r\n     * @param {string} lang The language key.\r\n     * @example\r\n     * addInlined('style', 'css');\r\n     */\r\n    value: function addInlined(tagName, lang) {\r\n      var includedCdataInside = {}\r\n      includedCdataInside['language-' + lang] = {\r\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\r\n        lookbehind: true,\r\n        inside: Prism.languages[lang]\r\n      }\r\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\r\n      var inside = {\r\n        'included-cdata': {\r\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n          inside: includedCdataInside\r\n        }\r\n      }\r\n      inside['language-' + lang] = {\r\n        pattern: /[\\s\\S]+/,\r\n        inside: Prism.languages[lang]\r\n      }\r\n      var def = {}\r\n      def[tagName] = {\r\n        pattern: RegExp(\r\n          /(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(\r\n            /__/g,\r\n            tagName\r\n          ),\r\n          'i'\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: inside\r\n      }\r\n      Prism.languages.insertBefore('markup', 'cdata', def)\r\n    }\r\n  })\r\n  Prism.languages.xml = Prism.languages.extend('markup', {})\r\n  Prism.languages.html = Prism.languages.markup\r\n  Prism.languages.mathml = Prism.languages.markup\r\n  Prism.languages.svg = Prism.languages.markup\r\n}\r\n"],"names":["markup","Prism","languages","comment","prolog","doctype","cdata","tag","pattern","greedy","inside","punctuation","namespace","lookbehind","entity","hooks","add","env","type","attributes","content","value","replace","Object","defineProperty","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg","module","exports","displayName","aliases"],"sourceRoot":""}