{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_http.c6f66c98.chunk.js","mappings":"sGAKA,SAASA,EAAKC,IACX,SAAUA,GACTA,EAAMC,UAAUF,KAAO,CACrB,eAAgB,CACdG,QAAS,8FACTC,OAAQ,CAENC,SAAU,yDAEV,YAAa,SAGjB,kBAAmB,CACjBF,QAAS,uBACTC,OAAQ,CAENC,SAAU,CACRF,QAAS,yBACTG,YAAY,KAKlB,cAAe,CACbH,QAAS,iBACTI,MAAO,YAGX,IAyBIC,EAzBAC,EAAQR,EAAMC,UACdQ,EAAgB,CAClB,yBAA0BD,EAAME,WAChC,mBAAoBF,EAAMG,MAAQH,EAAME,WACxC,kBAAmBF,EAAMI,IACzB,WAAYJ,EAAMI,IAClB,YAAaJ,EAAMK,KACnB,WAAYL,EAAMM,KAEhBC,EAAc,CAChB,oBAAoB,EACpB,mBAAmB,GAQrB,SAASC,EAAiBC,GACxB,IAAIC,EAASD,EAAYE,QAAQ,YAAa,IAE9C,MAAO,MAAQF,EAAc,KADT,wBAA0BC,EAAS,gBACJ,GACrD,CAGA,IAAK,IAAID,KAAeR,EACtB,GAAIA,EAAcQ,GAAc,CAC9BV,EAAUA,GAAW,CAAC,EACtB,IAAIL,EAAUa,EAAYE,GACtBD,EAAiBC,GACjBA,EACJV,EAAQU,GAAe,CACrBf,QAASkB,OACP,qBACElB,EACA,yCACF,KAEFG,YAAY,EACZF,OAAQ,CACNkB,KAAMZ,EAAcQ,IAG1B,CAEEV,GACFP,EAAMC,UAAUqB,aAAa,OAAQ,cAAef,EAEvD,CA5EA,CA4EEP,EACL,CAjFAuB,EAAOC,QAAUzB,EACjBA,EAAK0B,YAAc,OACnB1B,EAAK2B,QAAU,E","sources":["../node_modules/refractor/lang/http.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = http\r\nhttp.displayName = 'http'\r\nhttp.aliases = []\r\nfunction http(Prism) {\r\n  ;(function(Prism) {\r\n    Prism.languages.http = {\r\n      'request-line': {\r\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\r\n        inside: {\r\n          // HTTP Verb\r\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\r\n          // Path or query argument\r\n          'attr-name': /:\\w+/\r\n        }\r\n      },\r\n      'response-status': {\r\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\r\n        inside: {\r\n          // Status, e.g. 200 OK\r\n          property: {\r\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      // HTTP header name\r\n      'header-name': {\r\n        pattern: /^[\\w-]+:(?=.)/m,\r\n        alias: 'keyword'\r\n      }\r\n    } // Create a mapping of Content-Type headers to language definitions\r\n    var langs = Prism.languages\r\n    var httpLanguages = {\r\n      'application/javascript': langs.javascript,\r\n      'application/json': langs.json || langs.javascript,\r\n      'application/xml': langs.xml,\r\n      'text/xml': langs.xml,\r\n      'text/html': langs.html,\r\n      'text/css': langs.css\r\n    } // Declare which types can also be suffixes\r\n    var suffixTypes = {\r\n      'application/json': true,\r\n      'application/xml': true\r\n    }\r\n    /**\r\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\r\n     *\r\n     * @param {string} contentType\r\n     * @returns {string}\r\n     */\r\n    function getSuffixPattern(contentType) {\r\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\r\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\r\n      return '(?:' + contentType + '|' + suffixPattern + ')'\r\n    } // Insert each content type parser that has its associated language\r\n    // currently loaded.\r\n    var options\r\n    for (var contentType in httpLanguages) {\r\n      if (httpLanguages[contentType]) {\r\n        options = options || {}\r\n        var pattern = suffixTypes[contentType]\r\n          ? getSuffixPattern(contentType)\r\n          : contentType\r\n        options[contentType] = {\r\n          pattern: RegExp(\r\n            '(content-type:\\\\s*' +\r\n              pattern +\r\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\r\n            'i'\r\n          ),\r\n          lookbehind: true,\r\n          inside: {\r\n            rest: httpLanguages[contentType]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (options) {\r\n      Prism.languages.insertBefore('http', 'header-name', options)\r\n    }\r\n  })(Prism)\r\n}\r\n"],"names":["http","Prism","languages","pattern","inside","property","lookbehind","alias","options","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","RegExp","rest","insertBefore","module","exports","displayName","aliases"],"sourceRoot":""}