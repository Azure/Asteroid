{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_perl.1e73141e.chunk.js","mappings":"sGAKA,SAASA,EAAKC,GACZA,EAAMC,UAAUF,KAAO,CACrBG,QAAS,CACP,CAEEC,QAAS,4BACTC,YAAY,GAEd,CACED,QAAS,gBACTC,YAAY,IAIhBC,OAAQ,CAEN,CACEF,QAAS,sEACTG,QAAQ,GAEV,CACEH,QAAS,8DACTG,QAAQ,GAEV,CACEH,QAAS,+CACTG,QAAQ,GAEV,CACEH,QAAS,+CACTG,QAAQ,GAEV,CACEH,QAAS,gDACTG,QAAQ,GAEV,CACEH,QAAS,6CACTG,QAAQ,GAEV,CACEH,QAAS,mCACTG,QAAQ,GAGV,CACEH,QAAS,wBACTG,QAAQ,IAGZC,MAAO,CAEL,CACEJ,QAAS,gFACTG,QAAQ,GAEV,CACEH,QAAS,wEACTG,QAAQ,GAEV,CACEH,QAAS,yDACTG,QAAQ,GAEV,CACEH,QAAS,yDACTG,QAAQ,GAEV,CACEH,QAAS,0DACTG,QAAQ,GAEV,CACEH,QAAS,uDACTG,QAAQ,GAIV,CACEH,QAAS,uHACTC,YAAY,EACZE,QAAQ,GAEV,CACEH,QAAS,+GACTC,YAAY,EACZE,QAAQ,GAEV,CACEH,QAAS,iGACTC,YAAY,EACZE,QAAQ,GAEV,CACEH,QAAS,iGACTC,YAAY,EACZE,QAAQ,GAEV,CACEH,QAAS,mGACTC,YAAY,EACZE,QAAQ,GAEV,CACEH,QAAS,6FACTC,YAAY,EACZE,QAAQ,GAKV,CACEH,QAAS,0HACTG,QAAQ,IAIZE,SAAU,CAER,sBACA,kBACA,kBACA,8CACA,aAEA,qDAEFC,WAAY,CAEVN,QAAS,sBACTO,MAAO,UAETC,QAAS,CAEPR,QAAS,kCACTO,MAAO,UAETE,SAAU,CACRT,QAAS,kBACTU,OAAQ,CACNC,QAAS,QAGbA,QAAS,6MACTC,OAAQ,0GACRC,SAAU,gNACVC,YAAa,eAEjB,CAvJAC,EAAOC,QAAUpB,EACjBA,EAAKqB,YAAc,OACnBrB,EAAKsB,QAAU,E","sources":["../node_modules/refractor/lang/perl.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = perl\r\nperl.displayName = 'perl'\r\nperl.aliases = []\r\nfunction perl(Prism) {\r\n  Prism.languages.perl = {\r\n    comment: [\r\n      {\r\n        // POD\r\n        pattern: /(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(^|[^\\\\$])#.*/,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    // TODO Could be nice to handle Heredoc too.\r\n    string: [\r\n      // q/.../\r\n      {\r\n        pattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\r\n        greedy: true\r\n      }, // q a...a\r\n      {\r\n        pattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\r\n        greedy: true\r\n      }, // q(...)\r\n      {\r\n        pattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\r\n        greedy: true\r\n      }, // q{...}\r\n      {\r\n        pattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,\r\n        greedy: true\r\n      }, // q[...]\r\n      {\r\n        pattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,\r\n        greedy: true\r\n      }, // q<...>\r\n      {\r\n        pattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\r\n        greedy: true\r\n      }, // \"...\", `...`\r\n      {\r\n        pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\r\n        greedy: true\r\n      }, // '...'\r\n      // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\r\n      {\r\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\r\n        greedy: true\r\n      }\r\n    ],\r\n    regex: [\r\n      // m/.../\r\n      {\r\n        pattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\r\n        greedy: true\r\n      }, // m a...a\r\n      {\r\n        pattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\r\n        greedy: true\r\n      }, // m(...)\r\n      {\r\n        pattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,\r\n        greedy: true\r\n      }, // m{...}\r\n      {\r\n        pattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,\r\n        greedy: true\r\n      }, // m[...]\r\n      {\r\n        pattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,\r\n        greedy: true\r\n      }, // m<...>\r\n      {\r\n        pattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,\r\n        greedy: true\r\n      }, // The lookbehinds prevent -s from breaking\r\n      // FIXME We don't handle change of separator like s(...)[...]\r\n      // s/.../.../\r\n      {\r\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // s a...a...a\r\n      {\r\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // s(...)(...)\r\n      {\r\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // s{...}{...}\r\n      {\r\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // s[...][...]\r\n      {\r\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // s<...><...>\r\n      {\r\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // /.../\r\n      // The look-ahead tries to prevent two divisions on\r\n      // the same line from being highlighted as regex.\r\n      // This does not support multi-line regex.\r\n      {\r\n        pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,\r\n        greedy: true\r\n      }\r\n    ],\r\n    // FIXME Not sure about the handling of ::, ', and #\r\n    variable: [\r\n      // ${^POSTMATCH}\r\n      /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\r\n      /[&*$@%]\\^[A-Z_]/, // ${...}\r\n      /[&*$@%]#?(?=\\{)/, // $foo\r\n      /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i, // $1\r\n      /[&*$@%]\\d+/, // $_, @_, %!\r\n      // The negative lookahead prevents from breaking the %= operator\r\n      /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\r\n    ],\r\n    filehandle: {\r\n      // <>, <FOO>, _\r\n      pattern: /<(?![<=])\\S*>|\\b_\\b/,\r\n      alias: 'symbol'\r\n    },\r\n    vstring: {\r\n      // v1.2, 1.2.3\r\n      pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\r\n      alias: 'string'\r\n    },\r\n    function: {\r\n      pattern: /sub [a-z0-9_]+/i,\r\n      inside: {\r\n        keyword: /sub/\r\n      }\r\n    },\r\n    keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\r\n    number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\r\n    operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,\r\n    punctuation: /[{}[\\];(),:]/\r\n  }\r\n}\r\n"],"names":["perl","Prism","languages","comment","pattern","lookbehind","string","greedy","regex","variable","filehandle","alias","vstring","function","inside","keyword","number","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}