{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_parigp.72b7d56d.chunk.js","mappings":"sGAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,0BACTC,OAAQ,CACNC,QAAS,wBACTC,QAAQ,GAKVC,QAAU,WACR,IAAIC,EAAW,CACb,aACA,QACA,WACA,UACA,SACA,QACA,eACA,SACA,SACA,UACA,WACA,UACA,cACA,SACA,MACA,QACA,KACA,QACA,KACA,OACA,SACA,QACA,SAOF,OALAA,EAAWA,EACRC,KAAI,SAASF,GACZ,OAAOA,EAAQG,MAAM,IAAIC,KAAK,KAChC,IACCA,KAAK,KACDC,OAAO,SAAWJ,EAAW,OACtC,CAhCU,GAiCVK,SAAU,oBACVC,OAAQ,CAENT,QAAS,0GACTU,YAAY,GAEdC,SAAU,sLACVC,YAAa,kBAEjB,CAvDAC,EAAOC,QAAUnB,EACjBA,EAAOoB,YAAc,SACrBpB,EAAOqB,QAAU,E","sources":["../node_modules/refractor/lang/parigp.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = parigp\r\nparigp.displayName = 'parigp'\r\nparigp.aliases = []\r\nfunction parigp(Prism) {\r\n  Prism.languages.parigp = {\r\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\r\n    string: {\r\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\r\n      greedy: true\r\n    },\r\n    // PARI/GP does not care about white spaces at all\r\n    // so let's process the keywords to build an appropriate regexp\r\n    // (e.g. \"b *r *e *a *k\", etc.)\r\n    keyword: (function() {\r\n      var keywords = [\r\n        'breakpoint',\r\n        'break',\r\n        'dbg_down',\r\n        'dbg_err',\r\n        'dbg_up',\r\n        'dbg_x',\r\n        'forcomposite',\r\n        'fordiv',\r\n        'forell',\r\n        'forpart',\r\n        'forprime',\r\n        'forstep',\r\n        'forsubgroup',\r\n        'forvec',\r\n        'for',\r\n        'iferr',\r\n        'if',\r\n        'local',\r\n        'my',\r\n        'next',\r\n        'return',\r\n        'until',\r\n        'while'\r\n      ]\r\n      keywords = keywords\r\n        .map(function(keyword) {\r\n          return keyword.split('').join(' *')\r\n        })\r\n        .join('|')\r\n      return RegExp('\\\\b(?:' + keywords + ')\\\\b')\r\n    })(),\r\n    function: /\\w[\\w ]*?(?= *\\()/,\r\n    number: {\r\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\r\n      pattern: /((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,\r\n      lookbehind: true\r\n    },\r\n    operator: /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\r\n    punctuation: /[\\[\\]{}().,:;|]/\r\n  }\r\n}\r\n"],"names":["parigp","Prism","languages","comment","string","pattern","greedy","keyword","keywords","map","split","join","RegExp","function","number","lookbehind","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}