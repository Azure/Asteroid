{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_parser.3197dc94.chunk.js","mappings":"qGAKA,SAASA,EAAOC,IACb,SAAUA,GACT,IAAID,EAAUC,EAAMC,UAAUF,OAASC,EAAMC,UAAUC,OAAO,SAAU,CACtEC,QAAS,CACPC,QAAS,+GACTC,YAAY,GAEdC,SAAU,CACRF,QAAS,4DACTC,YAAY,EACZE,OAAQ,CACNC,YAAa,UAGjBC,SAAU,CACRL,QAAS,iDACTC,YAAY,EACZE,OAAQ,CACNJ,QAAS,CACPC,QAAS,oBACTC,YAAY,GAEdG,YAAa,UAGjBE,OAAQ,CACNN,QAAS,qCACTO,MAAO,WAETH,YAAa,gBAEfT,EAASC,EAAMC,UAAUW,aAAa,SAAU,UAAW,CACzD,iBAAkB,CAChBR,QAAS,UACTC,YAAY,EACZM,MAAO,WAETE,WAAY,CAEVT,QAAS,uDACTU,QAAQ,EACRT,YAAY,EACZE,OAAQ,CACNQ,OAAQ,CACNX,QAAS,2CACTC,YAAY,GAEdF,QAASJ,EAAOI,QAChBG,SAAUP,EAAOO,SACjBG,SAAUV,EAAOU,SACjBO,QAAS,qBACTC,OAAQ,8CACRP,OAAQX,EAAOW,OACfQ,SAAU,iGACVV,YAAaT,EAAOS,gBAI1BT,EAASC,EAAMC,UAAUW,aACvB,SACA,cACA,CACEC,WAAYd,EAAOc,WACnBV,QAASJ,EAAOI,QAChBG,SAAUP,EAAOO,SACjBG,SAAUV,EAAOU,SACjBC,OAAQX,EAAOW,OACf,qBAAsB,CACpBN,QAASL,EAAOS,YAChBG,MAAO,gBAGXZ,EAAY,IAAEQ,OAAO,cAExB,CAzEA,CAyEEP,EACL,CA9EAmB,EAAOC,QAAUrB,EACjBA,EAAOsB,YAAc,SACrBtB,EAAOuB,QAAU,E","sources":["../node_modules/refractor/lang/parser.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = parser\r\nparser.displayName = 'parser'\r\nparser.aliases = []\r\nfunction parser(Prism) {\r\n  ;(function(Prism) {\r\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\r\n      keyword: {\r\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\r\n        lookbehind: true\r\n      },\r\n      variable: {\r\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\r\n        lookbehind: true,\r\n        inside: {\r\n          punctuation: /\\.|:+/\r\n        }\r\n      },\r\n      function: {\r\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\r\n        lookbehind: true,\r\n        inside: {\r\n          keyword: {\r\n            pattern: /(^@)(?:GET_|SET_)/,\r\n            lookbehind: true\r\n          },\r\n          punctuation: /\\.|:+/\r\n        }\r\n      },\r\n      escape: {\r\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\r\n        alias: 'builtin'\r\n      },\r\n      punctuation: /[\\[\\](){};]/\r\n    }))\r\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\r\n      'parser-comment': {\r\n        pattern: /(\\s)#.*/,\r\n        lookbehind: true,\r\n        alias: 'comment'\r\n      },\r\n      expression: {\r\n        // Allow for 3 levels of depth\r\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\r\n        greedy: true,\r\n        lookbehind: true,\r\n        inside: {\r\n          string: {\r\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\r\n            lookbehind: true\r\n          },\r\n          keyword: parser.keyword,\r\n          variable: parser.variable,\r\n          function: parser.function,\r\n          boolean: /\\b(?:true|false)\\b/,\r\n          number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\r\n          escape: parser.escape,\r\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\r\n          punctuation: parser.punctuation\r\n        }\r\n      }\r\n    })\r\n    parser = Prism.languages.insertBefore(\r\n      'inside',\r\n      'punctuation',\r\n      {\r\n        expression: parser.expression,\r\n        keyword: parser.keyword,\r\n        variable: parser.variable,\r\n        function: parser.function,\r\n        escape: parser.escape,\r\n        'parser-punctuation': {\r\n          pattern: parser.punctuation,\r\n          alias: 'punctuation'\r\n        }\r\n      },\r\n      parser['tag'].inside['attr-value']\r\n    )\r\n  })(Prism)\r\n}\r\n"],"names":["parser","Prism","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator","module","exports","displayName","aliases"],"sourceRoot":""}