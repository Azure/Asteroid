{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_q.05c63d11.chunk.js","mappings":"sGAKA,SAASA,EAAEC,GACTA,EAAMC,UAAUF,EAAI,CAClBG,OAAQ,wBACRC,QAAS,CAGP,CACEC,QAAS,kBACTC,YAAY,EACZC,QAAQ,GAMV,CACEF,QAAS,8FACTC,YAAY,EACZC,QAAQ,GAGV,CACEF,QAAS,gCACTE,QAAQ,GAEV,CACEF,QAAS,SACTE,QAAQ,IAGZC,OAAQ,mBACRC,SAAU,CACRJ,QAAS,6IACTK,MAAO,UAITC,OAAQ,sFACRC,QAAS,u4BACTC,OAAQ,CACNR,QAAS,qBACTK,MAAO,YAETI,KAAM,CACJT,QAAS,uDACTK,MAAO,YAETK,YAAa,eAEjB,CApDAC,EAAOC,QAAUjB,EACjBA,EAAEkB,YAAc,IAChBlB,EAAEmB,QAAU,E","sources":["../node_modules/refractor/lang/q.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = q\r\nq.displayName = 'q'\r\nq.aliases = []\r\nfunction q(Prism) {\r\n  Prism.languages.q = {\r\n    string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\r\n    comment: [\r\n      // From http://code.kx.com/wiki/Reference/Slash:\r\n      // When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.\r\n      {\r\n        pattern: /([\\t )\\]}])\\/.*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // From http://code.kx.com/wiki/Reference/Slash:\r\n      // A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.\r\n      // A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.\r\n      // If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.\r\n      // The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.\r\n      {\r\n        pattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, // From http://code.kx.com/wiki/Reference/Slash:\r\n      // A \\ on a line by itself with no preceding matching / will comment to end of file.\r\n      {\r\n        pattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /^#!.+/m,\r\n        greedy: true\r\n      }\r\n    ],\r\n    symbol: /`(?::\\S+|[\\w.]*)/,\r\n    datetime: {\r\n      pattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\r\n      alias: 'number'\r\n    },\r\n    // The negative look-ahead prevents bad highlighting\r\n    // of verbs 0: and 1:\r\n    number: /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?[hjfeb]?)/,\r\n    keyword: /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\r\n    adverb: {\r\n      pattern: /['\\/\\\\]:?|\\beach\\b/,\r\n      alias: 'function'\r\n    },\r\n    verb: {\r\n      pattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?_~=|$&#@^]):?/,\r\n      alias: 'operator'\r\n    },\r\n    punctuation: /[(){}\\[\\];.]/\r\n  }\r\n}\r\n"],"names":["q","Prism","languages","string","comment","pattern","lookbehind","greedy","symbol","datetime","alias","number","keyword","adverb","verb","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}