{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_kotlin.78bd88fa.chunk.js","mappings":"sGAKA,SAASA,EAAOC,IACb,SAAUA,GACTA,EAAMC,UAAUF,OAASC,EAAMC,UAAUC,OAAO,QAAS,CACvDC,QAAS,CAEPC,QAAS,2bACTC,YAAY,GAEdC,SAAU,CACR,eACA,CACEF,QAAS,mBACTC,YAAY,IAGhBE,OAAQ,kIACRC,SAAU,gHAELR,EAAMC,UAAUF,OAAO,cAC9BC,EAAMC,UAAUQ,aAAa,SAAU,SAAU,CAC/C,aAAc,CACZL,QAAS,sBACTM,MAAO,YAGXV,EAAMC,UAAUQ,aAAa,SAAU,UAAW,CAChDE,WAAY,CACVP,QAAS,sCACTM,MAAO,aAGXV,EAAMC,UAAUQ,aAAa,SAAU,WAAY,CACjDG,MAAO,CACLR,QAAS,YACTM,MAAO,YAGX,IAAIG,EAAgB,CAClB,CACET,QAAS,cACTU,OAAQ,CACNC,UAAW,CACTX,QAAS,YACTM,MAAO,YAETM,KAAMhB,EAAMC,UAAUF,SAG1B,CACEK,QAAS,QACTM,MAAO,aAGXV,EAAMC,UAAUF,OAAe,OAAEe,OAASd,EAAMC,UAAUF,OACxD,cACAe,OAAS,CACTD,cAAeA,EAElB,CAzDA,CAyDEb,EACL,CA9DAiB,EAAOC,QAAUnB,EACjBA,EAAOoB,YAAc,SACrBpB,EAAOqB,QAAU,E","sources":["../node_modules/refractor/lang/kotlin.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = kotlin\r\nkotlin.displayName = 'kotlin'\r\nkotlin.aliases = []\r\nfunction kotlin(Prism) {\r\n  ;(function(Prism) {\r\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\r\n      keyword: {\r\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\r\n        pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\r\n        lookbehind: true\r\n      },\r\n      function: [\r\n        /\\w+(?=\\s*\\()/,\r\n        {\r\n          pattern: /(\\.)\\w+(?=\\s*\\{)/,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\r\n      operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\r\n    })\r\n    delete Prism.languages.kotlin['class-name']\r\n    Prism.languages.insertBefore('kotlin', 'string', {\r\n      'raw-string': {\r\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\r\n        alias: 'string' // See interpolation below\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('kotlin', 'keyword', {\r\n      annotation: {\r\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\r\n        alias: 'builtin'\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('kotlin', 'function', {\r\n      label: {\r\n        pattern: /\\w+@|@\\w+/,\r\n        alias: 'symbol'\r\n      }\r\n    })\r\n    var interpolation = [\r\n      {\r\n        pattern: /\\$\\{[^}]+\\}/,\r\n        inside: {\r\n          delimiter: {\r\n            pattern: /^\\$\\{|\\}$/,\r\n            alias: 'variable'\r\n          },\r\n          rest: Prism.languages.kotlin\r\n        }\r\n      },\r\n      {\r\n        pattern: /\\$\\w+/,\r\n        alias: 'variable'\r\n      }\r\n    ]\r\n    Prism.languages.kotlin['string'].inside = Prism.languages.kotlin[\r\n      'raw-string'\r\n    ].inside = {\r\n      interpolation: interpolation\r\n    }\r\n  })(Prism)\r\n}\r\n"],"names":["kotlin","Prism","languages","extend","keyword","pattern","lookbehind","function","number","operator","insertBefore","alias","annotation","label","interpolation","inside","delimiter","rest","module","exports","displayName","aliases"],"sourceRoot":""}