{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_scss.24aed8d0.chunk.js","mappings":"sGAKA,SAASA,EAAKC,GACZA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,MAAO,CACnDC,QAAS,CACPC,QAAS,uCACTC,YAAY,GAEdC,OAAQ,CACNF,QAAS,0CACTG,OAAQ,CACNC,KAAM,YAIVC,IAAK,0BAQLC,SAAU,CAERN,QAAS,iFACTG,OAAQ,CACNI,OAAQ,CACNP,QAAS,IACTQ,MAAO,aAETC,YAAa,UACbC,SAAU,2BAGdC,SAAU,CACRX,QAAS,4CACTG,OAAQ,CACNO,SAAU,6BAIhBd,EAAMC,UAAUe,aAAa,OAAQ,SAAU,CAC7CC,QAAS,CACP,sGACA,CACEb,QAAS,4BACTC,YAAY,MAIlBL,EAAMC,UAAUe,aAAa,OAAQ,YAAa,CAEhDF,SAAU,2BAEZd,EAAMC,UAAUe,aAAa,OAAQ,WAAY,CAC/CH,YAAa,CACXT,QAAS,UACTQ,MAAO,YAETM,UAAW,CACTd,QAAS,6BACTQ,MAAO,WAETO,QAAS,qBACTC,KAAM,CACJhB,QAAS,WACTQ,MAAO,WAETS,SAAU,CACRjB,QAAS,kDACTC,YAAY,KAGhBL,EAAMC,UAAUF,KAAa,OAAEQ,OAAOe,KAAOtB,EAAMC,UAAUF,IAC/D,CA5EAwB,EAAOC,QAAUzB,EACjBA,EAAK0B,YAAc,OACnB1B,EAAK2B,QAAU,E","sources":["../node_modules/refractor/lang/scss.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = scss\r\nscss.displayName = 'scss'\r\nscss.aliases = []\r\nfunction scss(Prism) {\r\n  Prism.languages.scss = Prism.languages.extend('css', {\r\n    comment: {\r\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\r\n      lookbehind: true\r\n    },\r\n    atrule: {\r\n      pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\r\n      inside: {\r\n        rule: /@[\\w-]+/ // See rest below\r\n      }\r\n    },\r\n    // url, compassified\r\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\r\n    // CSS selector regex is not appropriate for Sass\r\n    // since there can be lot more things (var, @ directive, nesting..)\r\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\r\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\r\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\r\n    // can \"pass\" as a selector- e.g: proper#{$erty})\r\n    // this one was hard to do, so please be careful if you edit this one :)\r\n    selector: {\r\n      // Initial look-ahead is used to prevent matching of blank selectors\r\n      pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\r\n      inside: {\r\n        parent: {\r\n          pattern: /&/,\r\n          alias: 'important'\r\n        },\r\n        placeholder: /%[-\\w]+/,\r\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\r\n      }\r\n    },\r\n    property: {\r\n      pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\r\n      inside: {\r\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\r\n      }\r\n    }\r\n  })\r\n  Prism.languages.insertBefore('scss', 'atrule', {\r\n    keyword: [\r\n      /@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,\r\n      {\r\n        pattern: /( +)(?:from|through)(?= )/,\r\n        lookbehind: true\r\n      }\r\n    ]\r\n  })\r\n  Prism.languages.insertBefore('scss', 'important', {\r\n    // var and interpolated vars\r\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\r\n  })\r\n  Prism.languages.insertBefore('scss', 'function', {\r\n    placeholder: {\r\n      pattern: /%[-\\w]+/,\r\n      alias: 'selector'\r\n    },\r\n    statement: {\r\n      pattern: /\\B!(?:default|optional)\\b/i,\r\n      alias: 'keyword'\r\n    },\r\n    boolean: /\\b(?:true|false)\\b/,\r\n    null: {\r\n      pattern: /\\bnull\\b/,\r\n      alias: 'keyword'\r\n    },\r\n    operator: {\r\n      pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\r\n      lookbehind: true\r\n    }\r\n  })\r\n  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss\r\n}\r\n"],"names":["scss","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","rule","url","selector","parent","alias","placeholder","variable","property","insertBefore","keyword","statement","boolean","null","operator","rest","module","exports","displayName","aliases"],"sourceRoot":""}