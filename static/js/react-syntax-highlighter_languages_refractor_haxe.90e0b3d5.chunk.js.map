{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_haxe.90e0b3d5.chunk.js","mappings":"sGAKA,SAASA,EAAKC,GACZA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,QAAS,CAErDC,OAAQ,CACNC,QAAS,oCACTC,QAAQ,EACRC,OAAQ,CACNC,cAAe,CACbH,QAAS,+BACTI,YAAY,EACZF,OAAQ,CACNC,cAAe,CACbH,QAAS,SACTK,MAAO,gBAOjBC,QAAS,wRACTC,SAAU,+DAEZX,EAAMC,UAAUW,aAAa,OAAQ,aAAc,CACjDC,MAAO,CACLT,QAAS,oCACTC,QAAQ,KAGZL,EAAMC,UAAUW,aAAa,OAAQ,UAAW,CAC9CE,aAAc,CACZV,QAAS,OACTK,MAAO,WAETM,SAAU,CACRX,QAAS,SACTK,MAAO,UAETO,YAAa,CACXZ,QAAS,mBACTK,MAAO,cAGXT,EAAMC,UAAUF,KAAa,OAAEO,OAAsB,cAAEA,OAAOW,KAC5DjB,EAAMC,UAAUF,YACXC,EAAMC,UAAUF,KAAK,aAC9B,CAjDAmB,EAAOC,QAAUpB,EACjBA,EAAKqB,YAAc,OACnBrB,EAAKsB,QAAU,E","sources":["../node_modules/refractor/lang/haxe.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = haxe\r\nhaxe.displayName = 'haxe'\r\nhaxe.aliases = []\r\nfunction haxe(Prism) {\r\n  Prism.languages.haxe = Prism.languages.extend('clike', {\r\n    // Strings can be multi-line\r\n    string: {\r\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\r\n      greedy: true,\r\n      inside: {\r\n        interpolation: {\r\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\r\n          lookbehind: true,\r\n          inside: {\r\n            interpolation: {\r\n              pattern: /^\\$\\w*/,\r\n              alias: 'variable'\r\n            } // See rest below\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\r\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\r\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\r\n  })\r\n  Prism.languages.insertBefore('haxe', 'class-name', {\r\n    regex: {\r\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\r\n      greedy: true\r\n    }\r\n  })\r\n  Prism.languages.insertBefore('haxe', 'keyword', {\r\n    preprocessor: {\r\n      pattern: /#\\w+/,\r\n      alias: 'builtin'\r\n    },\r\n    metadata: {\r\n      pattern: /@:?\\w+/,\r\n      alias: 'symbol'\r\n    },\r\n    reification: {\r\n      pattern: /\\$(?:\\w+|(?=\\{))/,\r\n      alias: 'variable'\r\n    }\r\n  })\r\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest =\r\n    Prism.languages.haxe\r\n  delete Prism.languages.haxe['class-name']\r\n}\r\n"],"names":["haxe","Prism","languages","extend","string","pattern","greedy","inside","interpolation","lookbehind","alias","keyword","operator","insertBefore","regex","preprocessor","metadata","reification","rest","module","exports","displayName","aliases"],"sourceRoot":""}