{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_fortran.91d5835b.chunk.js","mappings":"sGAKA,SAASA,EAAQC,GACfA,EAAMC,UAAUF,QAAU,CACxB,gBAAiB,CACfG,QAAS,0BACTC,MAAO,UAETC,OAAQ,CACNF,QAAS,gFACTG,OAAQ,CACNC,QAAS,CACPJ,QAAS,wBACTK,YAAY,KAIlBD,QAAS,CACPJ,QAAS,MACTM,QAAQ,GAEVC,QAAS,+BACTC,OAAQ,yDACRC,QAAS,CAEP,oEACA,gIACA,4VACA,+JAEFC,SAAU,CACR,mGACA,CAEEV,QAAS,sBACTK,YAAY,IAGhBM,YAAa,qBAEjB,CAzCAC,EAAOC,QAAUhB,EACjBA,EAAQiB,YAAc,UACtBjB,EAAQkB,QAAU,E","sources":["../node_modules/refractor/lang/fortran.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = fortran\r\nfortran.displayName = 'fortran'\r\nfortran.aliases = []\r\nfunction fortran(Prism) {\r\n  Prism.languages.fortran = {\r\n    'quoted-number': {\r\n      pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\r\n      alias: 'number'\r\n    },\r\n    string: {\r\n      pattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,\r\n      inside: {\r\n        comment: {\r\n          pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\r\n          lookbehind: true\r\n        }\r\n      }\r\n    },\r\n    comment: {\r\n      pattern: /!.*/,\r\n      greedy: true\r\n    },\r\n    boolean: /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,\r\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\r\n    keyword: [\r\n      // Types\r\n      /\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i, // END statements\r\n      /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i, // Statements\r\n      /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i, // Others\r\n      /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i\r\n    ],\r\n    operator: [\r\n      /\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i,\r\n      {\r\n        // Use lookbehind to prevent confusion with (/ /)\r\n        pattern: /(^|(?!\\().)\\/(?!\\))/,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    punctuation: /\\(\\/|\\/\\)|[(),;:&]/\r\n  }\r\n}\r\n"],"names":["fortran","Prism","languages","pattern","alias","string","inside","comment","lookbehind","greedy","boolean","number","keyword","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}