{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_markupTemplating.5ce1751e.chunk.js","mappings":"qGAKA,SAASA,EAAiBC,IACvB,SAAUA,GAQT,SAASC,EAAeC,EAAUC,GAChC,MAAO,MAAQD,EAASE,cAAgBD,EAAQ,KAClD,CACAE,OAAOC,iBAAkBN,EAAMO,UAAU,qBAAuB,CAAC,EAAI,CACnEC,kBAAmB,CAYjBC,MAAO,SAASC,EAAKR,EAAUS,EAAoBC,GACjD,GAAIF,EAAIR,WAAaA,EAArB,CAGA,IAAIW,EAAcH,EAAIG,WAAa,GACnCH,EAAII,KAAOJ,EAAII,KAAKC,QAAQJ,GAAoB,SAASK,GACvD,GAA6B,oBAAlBJ,IAAiCA,EAAcI,GACxD,OAAOA,EAIT,IAFA,IACIC,EADAC,EAAIL,EAAWM,QAIhB,IADDT,EAAII,KAAKM,QAASH,EAAchB,EAAeC,EAAUgB,OAGvDA,EAEJ,OADAL,EAAWK,GAAKF,EACTC,CACT,IACAP,EAAIW,QAAUrB,EAAMO,UAAUe,MAhB9B,CAiBF,GAEFC,qBAAsB,CAOpBd,MAAO,SAASC,EAAKR,GACnB,GAAIQ,EAAIR,WAAaA,GAAaQ,EAAIG,WAAtC,CAGAH,EAAIW,QAAUrB,EAAMO,UAAUL,GAC9B,IAAIsB,EAAI,EACJC,EAAOpB,OAAOoB,KAAKf,EAAIG,aAC3B,SAASa,EAAWC,GAClB,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAOR,UAErBK,GAAKC,EAAKN,QAFmBD,IAAK,CAKtC,IAAIU,EAAQD,EAAOT,GACnB,GACmB,kBAAVU,GACNA,EAAMC,SAAoC,kBAAlBD,EAAMC,QAC/B,CACA,IAAIC,EAAIL,EAAKD,GACTO,EAAIrB,EAAIG,WAAWiB,GACnBE,EAAqB,kBAAVJ,EAAqBA,EAAQA,EAAMC,QAC9CZ,EAAchB,EAAeC,EAAU4B,GACvC3B,EAAQ6B,EAAEZ,QAAQH,GACtB,GAAId,GAAS,EAAG,GACZqB,EACF,IAAIS,EAASD,EAAEE,UAAU,EAAG/B,GACxBgC,EAAS,IAAInC,EAAMoC,MACrBlC,EACAF,EAAMqC,SAASN,EAAGrB,EAAIW,SACtB,YAAcnB,EACd6B,GAEEO,EAAQN,EAAEE,UAAU/B,EAAQc,EAAYE,QACxCoB,EAAc,GACdN,GACFM,EAAYC,KAAKC,MAAMF,EAAab,EAAW,CAACO,KAElDM,EAAYC,KAAKL,GACbG,GACFC,EAAYC,KAAKC,MAAMF,EAAab,EAAW,CAACY,KAE7B,kBAAVV,EACTD,EAAOe,OAAOD,MAAMd,EAAQ,CAACT,EAAG,GAAGyB,OAAOJ,IAE1CX,EAAMC,QAAUU,CAEpB,CACF,MACEX,EAAMC,SAGNH,EAAWE,EAAMC,QAErB,CACA,OAAOF,CACT,CACAD,CAAWhB,EAAIiB,OArDf,CAsDF,IAGL,CAjHA,CAiHE3B,EACL,CAtHA4C,EAAOC,QAAU9C,EACjBA,EAAiB+C,YAAc,mBAC/B/C,EAAiBgD,QAAU,E","sources":["../node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = markupTemplating\r\nmarkupTemplating.displayName = 'markupTemplating'\r\nmarkupTemplating.aliases = []\r\nfunction markupTemplating(Prism) {\r\n  ;(function(Prism) {\r\n    /**\r\n     * Returns the placeholder for the given language id and index.\r\n     *\r\n     * @param {string} language\r\n     * @param {string|number} index\r\n     * @returns {string}\r\n     */\r\n    function getPlaceholder(language, index) {\r\n      return '___' + language.toUpperCase() + index + '___'\r\n    }\r\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\r\n      buildPlaceholders: {\r\n        /**\r\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\r\n         *\r\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\r\n         * `true` will be replaced.\r\n         *\r\n         * @param {object} env The environment of the `before-tokenize` hook.\r\n         * @param {string} language The language id.\r\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\r\n         * @param {(match: string) => boolean} [replaceFilter]\r\n         */\r\n        value: function(env, language, placeholderPattern, replaceFilter) {\r\n          if (env.language !== language) {\r\n            return\r\n          }\r\n          var tokenStack = (env.tokenStack = [])\r\n          env.code = env.code.replace(placeholderPattern, function(match) {\r\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\r\n              return match\r\n            }\r\n            var i = tokenStack.length\r\n            var placeholder // Check for existing strings\r\n            while (\r\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\r\n              -1\r\n            )\r\n              ++i // Create a sparse array\r\n            tokenStack[i] = match\r\n            return placeholder\r\n          }) // Switch the grammar to markup\r\n          env.grammar = Prism.languages.markup\r\n        }\r\n      },\r\n      tokenizePlaceholders: {\r\n        /**\r\n         * Replace placeholders with proper tokens after tokenizing.\r\n         *\r\n         * @param {object} env The environment of the `after-tokenize` hook.\r\n         * @param {string} language The language id.\r\n         */\r\n        value: function(env, language) {\r\n          if (env.language !== language || !env.tokenStack) {\r\n            return\r\n          } // Switch the grammar back\r\n          env.grammar = Prism.languages[language]\r\n          var j = 0\r\n          var keys = Object.keys(env.tokenStack)\r\n          function walkTokens(tokens) {\r\n            for (var i = 0; i < tokens.length; i++) {\r\n              // all placeholders are replaced already\r\n              if (j >= keys.length) {\r\n                break\r\n              }\r\n              var token = tokens[i]\r\n              if (\r\n                typeof token === 'string' ||\r\n                (token.content && typeof token.content === 'string')\r\n              ) {\r\n                var k = keys[j]\r\n                var t = env.tokenStack[k]\r\n                var s = typeof token === 'string' ? token : token.content\r\n                var placeholder = getPlaceholder(language, k)\r\n                var index = s.indexOf(placeholder)\r\n                if (index > -1) {\r\n                  ++j\r\n                  var before = s.substring(0, index)\r\n                  var middle = new Prism.Token(\r\n                    language,\r\n                    Prism.tokenize(t, env.grammar),\r\n                    'language-' + language,\r\n                    t\r\n                  )\r\n                  var after = s.substring(index + placeholder.length)\r\n                  var replacement = []\r\n                  if (before) {\r\n                    replacement.push.apply(replacement, walkTokens([before]))\r\n                  }\r\n                  replacement.push(middle)\r\n                  if (after) {\r\n                    replacement.push.apply(replacement, walkTokens([after]))\r\n                  }\r\n                  if (typeof token === 'string') {\r\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\r\n                  } else {\r\n                    token.content = replacement\r\n                  }\r\n                }\r\n              } else if (\r\n                token.content\r\n                /* && typeof token.content !== 'string' */\r\n              ) {\r\n                walkTokens(token.content)\r\n              }\r\n            }\r\n            return tokens\r\n          }\r\n          walkTokens(env.tokens)\r\n        }\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n"],"names":["markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","module","exports","displayName","aliases"],"sourceRoot":""}