{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_puppet.620574e3.chunk.js","mappings":"sGAKA,SAASA,EAAOC,IACb,SAAUA,GACTA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,CAEP,CACEC,QAAS,uGACTC,YAAY,EACZC,MAAO,SACPC,OAAQ,CAENC,YAAa,sBAGjB,CACEJ,QAAS,qGACTC,YAAY,EACZI,QAAQ,EACRH,MAAO,SACPC,OAAQ,CAENC,YAAa,sBAGjB,CACEJ,QAAS,8CACTE,MAAO,SACPC,OAAQ,CACNC,YAAa,CACXJ,QAAS,gBACTC,YAAY,MAKpB,oBAAqB,CACnBD,QAAS,4BACTC,YAAY,EACZI,QAAQ,EACRH,MAAO,WAETI,MAAO,CAELN,QAAS,uFACTC,YAAY,EACZI,QAAQ,EACRF,OAAQ,CAEN,iBAAkB,CAChBH,QAAS,yCACTG,OAAQ,CACNI,QAAS,UAKjBA,QAAS,CACPP,QAAS,eACTC,YAAY,EACZI,QAAQ,GAEVG,OAAQ,CAENR,QAAS,wFACTK,QAAQ,EACRF,OAAQ,CACN,gBAAiB,CACfH,QAAS,cACTG,OAAQ,CAER,KAINM,SAAU,CACRT,QAAS,yBACTG,OAAQ,CACNC,YAAa,OAGjB,YAAa,sBACbM,SAAU,CACR,CACEV,QAAS,gBACTC,YAAY,GAEd,oGAEFU,OAAQ,+CACRC,QAAS,qBAETC,QAAS,6IACTC,SAAU,CACRd,QAAS,gNACTE,MAAO,UAETa,SAAU,mFACVX,YAAa,oBAEf,IAAIY,EAAgB,CAClB,CAEEhB,QAAS,0EACTC,YAAY,EACZE,OAAQ,CACN,iBAAkB,CAEhBH,QAAS,uCACTC,YAAY,EACZC,MAAO,WACPC,OAAQ,CACNC,YAAa,OAGjBa,UAAW,CACTjB,QAAS,MACTE,MAAO,YAETgB,KAAMrB,EAAMC,UAAUF,SAG1B,CACEI,QAAS,kCACTC,YAAY,EACZC,MAAO,WACPC,OAAQ,CACNC,YAAa,QAInBP,EAAMC,UAAUF,OAAgB,QAAE,GAAGO,OAAOa,cAAgBA,EAC5DnB,EAAMC,UAAUF,OAAe,OAAEO,OAC/B,iBACAA,OAAOa,cAAgBA,CAC1B,CArIA,CAqIEnB,EACL,CA1IAsB,EAAOC,QAAUxB,EACjBA,EAAOyB,YAAc,SACrBzB,EAAO0B,QAAU,E","sources":["../node_modules/refractor/lang/puppet.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = puppet\r\npuppet.displayName = 'puppet'\r\npuppet.aliases = []\r\nfunction puppet(Prism) {\r\n  ;(function(Prism) {\r\n    Prism.languages.puppet = {\r\n      heredoc: [\r\n        // Matches the content of a quoted heredoc string (subject to interpolation)\r\n        {\r\n          pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\r\n          lookbehind: true,\r\n          alias: 'string',\r\n          inside: {\r\n            // Matches the end tag\r\n            punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\r\n          }\r\n        }, // Matches the content of an unquoted heredoc string (no interpolation)\r\n        {\r\n          pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: {\r\n            // Matches the end tag\r\n            punctuation: /(?=\\S).*\\S(?= *$)/\r\n          }\r\n        }, // Matches the start tag of heredoc strings\r\n        {\r\n          pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\r\n          alias: 'string',\r\n          inside: {\r\n            punctuation: {\r\n              pattern: /(\\().+?(?=\\))/,\r\n              lookbehind: true\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      'multiline-comment': {\r\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'comment'\r\n      },\r\n      regex: {\r\n        // Must be prefixed with the keyword \"node\" or a non-word char\r\n        pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          // Extended regexes must have the x flag. They can contain single-line comments.\r\n          'extended-regex': {\r\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\r\n            inside: {\r\n              comment: /#.*/\r\n            }\r\n          }\r\n        }\r\n      },\r\n      comment: {\r\n        pattern: /(^|[^\\\\])#.*/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      string: {\r\n        // Allow for one nested level of double quotes inside interpolation\r\n        pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\r\n        greedy: true,\r\n        inside: {\r\n          'double-quoted': {\r\n            pattern: /^\"[\\s\\S]*\"$/,\r\n            inside: {\r\n              // See interpolation below\r\n            }\r\n          }\r\n        }\r\n      },\r\n      variable: {\r\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\r\n        inside: {\r\n          punctuation: /::/\r\n        }\r\n      },\r\n      'attr-name': /(?:\\w+|\\*)(?=\\s*=>)/,\r\n      function: [\r\n        {\r\n          pattern: /(\\.)(?!\\d)\\w+/,\r\n          lookbehind: true\r\n        },\r\n        /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\r\n      ],\r\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\r\n      boolean: /\\b(?:true|false)\\b/,\r\n      // Includes words reserved for future use\r\n      keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\r\n      datatype: {\r\n        pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\r\n        alias: 'symbol'\r\n      },\r\n      operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\r\n      punctuation: /[\\[\\]{}().,;]|:+/\r\n    }\r\n    var interpolation = [\r\n      {\r\n        // Allow for one nested level of braces inside interpolation\r\n        pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\r\n        lookbehind: true,\r\n        inside: {\r\n          'short-variable': {\r\n            // Negative look-ahead prevent wrong highlighting of functions\r\n            pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\r\n            lookbehind: true,\r\n            alias: 'variable',\r\n            inside: {\r\n              punctuation: /::/\r\n            }\r\n          },\r\n          delimiter: {\r\n            pattern: /^\\$/,\r\n            alias: 'variable'\r\n          },\r\n          rest: Prism.languages.puppet\r\n        }\r\n      },\r\n      {\r\n        pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\r\n        lookbehind: true,\r\n        alias: 'variable',\r\n        inside: {\r\n          punctuation: /::/\r\n        }\r\n      }\r\n    ]\r\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation\r\n    Prism.languages.puppet['string'].inside[\r\n      'double-quoted'\r\n    ].inside.interpolation = interpolation\r\n  })(Prism)\r\n}\r\n"],"names":["puppet","Prism","languages","heredoc","pattern","lookbehind","alias","inside","punctuation","greedy","regex","comment","string","variable","function","number","boolean","keyword","datatype","operator","interpolation","delimiter","rest","module","exports","displayName","aliases"],"sourceRoot":""}