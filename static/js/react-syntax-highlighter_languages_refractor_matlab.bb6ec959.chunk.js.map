{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_matlab.bb6ec959.chunk.js","mappings":"oGAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,CAAC,iBAAkB,OAC5BC,OAAQ,CACNC,QAAS,uBACTC,QAAQ,GAGVC,OAAQ,6DACRC,QAAS,8HACTC,SAAU,qBACVC,SAAU,0CACVC,YAAa,uBAEjB,CAjBAC,EAAOC,QAAUb,EACjBA,EAAOc,YAAc,SACrBd,EAAOe,QAAU,E","sources":["../node_modules/refractor/lang/matlab.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = matlab\r\nmatlab.displayName = 'matlab'\r\nmatlab.aliases = []\r\nfunction matlab(Prism) {\r\n  Prism.languages.matlab = {\r\n    comment: [/%\\{[\\s\\S]*?\\}%/, /%.+/],\r\n    string: {\r\n      pattern: /\\B'(?:''|[^'\\r\\n])*'/,\r\n      greedy: true\r\n    },\r\n    // FIXME We could handle imaginary numbers as a whole\r\n    number: /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\r\n    keyword: /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\r\n    function: /(?!\\d)\\w+(?=\\s*\\()/,\r\n    operator: /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\r\n    punctuation: /\\.{3}|[.,;\\[\\](){}!]/\r\n  }\r\n}\r\n"],"names":["matlab","Prism","languages","comment","string","pattern","greedy","number","keyword","function","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}