{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_rust.fcf98872.chunk.js","mappings":"qGAKA,SAASA,EAAKC,GAOZA,EAAMC,UAAUF,KAAO,CACrBG,QAAS,CACP,CACEC,QAAS,4BACTC,YAAY,GAEd,CACED,QAAS,mBACTC,YAAY,IAGhBC,OAAQ,CACN,CACEF,QAAS,uCACTG,QAAQ,GAEV,CACEH,QAAS,0BACTG,QAAQ,IAGZC,KAAM,CACJJ,QAAS,wEACTK,MAAO,UAET,sBAAuB,CACrBL,QAAS,YACTK,MAAO,UAETC,QAAS,6TACTC,UAAW,CACTP,QAAS,aACTG,QAAQ,EACRE,MAAO,aAETG,SAAU,CACR,eACA,oBAEF,cAAe,CACbR,QAAS,OACTK,MAAO,YAGTI,OAAQ,kKAER,iBAAkB,CAChBT,QAAS,uBACTU,OAAQ,CACNC,YAAa,QACbC,SAAU,SAGdD,YAAa,mCACbC,SAAU,sDAEd,CAlEAC,EAAOC,QAAUlB,EACjBA,EAAKmB,YAAc,OACnBnB,EAAKoB,QAAU,E","sources":["../node_modules/refractor/lang/rust.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = rust\r\nrust.displayName = 'rust'\r\nrust.aliases = []\r\nfunction rust(Prism) {\r\n  /* TODO\r\nAdd support for Markdown notation inside doc comments\r\nAdd support for nested block comments...\r\nMatch closure params even when not followed by dash or brace\r\nAdd better support for macro definition\r\n*/\r\n  Prism.languages.rust = {\r\n    comment: [\r\n      {\r\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    string: [\r\n      {\r\n        pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\r\n        greedy: true\r\n      }\r\n    ],\r\n    char: {\r\n      pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\r\n      alias: 'string'\r\n    },\r\n    'lifetime-annotation': {\r\n      pattern: /'[^\\s>']+/,\r\n      alias: 'symbol'\r\n    },\r\n    keyword: /\\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\r\n    attribute: {\r\n      pattern: /#!?\\[.+?\\]/,\r\n      greedy: true,\r\n      alias: 'attr-name'\r\n    },\r\n    function: [\r\n      /\\w+(?=\\s*\\()/, // Macros can use parens or brackets\r\n      /\\w+!(?=\\s*\\(|\\[)/\r\n    ],\r\n    'macro-rules': {\r\n      pattern: /\\w+!/,\r\n      alias: 'function'\r\n    },\r\n    // Hex, oct, bin, dec numbers with visual separators and type suffix\r\n    number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\r\n    // Closure params should not be confused with bitwise OR |\r\n    'closure-params': {\r\n      pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\r\n      inside: {\r\n        punctuation: /[|:,]/,\r\n        operator: /[&*]/\r\n      }\r\n    },\r\n    punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\r\n    operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\r\n  }\r\n}\r\n"],"names":["rust","Prism","languages","comment","pattern","lookbehind","string","greedy","char","alias","keyword","attribute","function","number","inside","punctuation","operator","module","exports","displayName","aliases"],"sourceRoot":""}