{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_pug.2e01ba2a.chunk.js","mappings":"sGAKA,SAASA,EAAIC,IACV,SAAUA,GAQTA,EAAMC,UAAUF,IAAM,CAGpBG,QAAS,CACPC,QAAS,gDACTC,YAAY,GAId,mBAAoB,CAClBD,QAAS,uFACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAI1BC,OAAQ,CACNL,QAAS,wEACTC,YAAY,EACZC,OAAQ,CACN,cAAe,CACbF,QAAS,WACTM,MAAO,cAIb,uBAAwB,CACtBN,QAAS,sFACTC,YAAY,GAEdM,OAAQ,CACNP,QAAS,gBACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUS,SAG1BC,QAAS,CACPR,QAAS,kCACTC,YAAY,GAGd,eAAgB,CACdD,QAAS,sEACTC,YAAY,EACZC,OAAQ,CACNO,KAAM,CACJT,QAAS,iBACTE,OAAQ,CACNQ,QAAS,kBACTC,YAAa,MAGjBC,OAAQ,CACNZ,QAAS,gDACTM,MAAO,WAETH,KAAMN,EAAMC,UAAUM,aAG1BM,QAAS,CACPV,QAAS,yDACTC,YAAY,GAEdY,MAAO,CAEL,CACEb,QAAS,qBACTC,YAAY,EACZC,OAAQ,CACNQ,QAAS,SACTI,SAAU,oBACVH,YAAa,WAGjB,CACEX,QAAS,iBACTC,YAAY,EACZC,OAAQ,CACNa,KAAM,CACJf,QAAS,SACTM,MAAO,YAETH,KAAMN,EAAMC,UAAUM,cAI5BY,OAAQ,CACNhB,QAAS,oDACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAG1B,aAAc,CACZJ,QAAS,qEACTC,YAAY,GAEdgB,IAAK,CACHjB,QAAS,+DACTC,YAAY,EACZC,OAAQ,CACNgB,WAAY,CACV,CACElB,QAAS,kBACTE,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAG1B,CACEJ,QAAS,YACTE,OAAQ,CACN,aAAc,CACZF,QAAS,iCACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,aAG1B,YAAa,2BACbO,YAAa,cAInBA,YAAa,MAGjBQ,KAAM,CACJ,CACEnB,QAAS,wBACTC,YAAY,EACZC,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,cAI5BO,YAAa,aAyBf,IAvBA,IAAIS,EAAiB,oFAClBC,OACCC,EAAU,CACZ,CACEjB,OAAQ,OACRkB,SAAU,QAEZ,CACElB,OAAQ,SACRkB,SAAU,gBAEZ,MACA,aACA,OACA,aACA,WACA,CACElB,OAAQ,OACRkB,SAAU,QAEZ,UAEEC,EAAc,CAAC,EACVC,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,IAAIpB,EAASiB,EAAQG,GACrBpB,EACoB,kBAAXA,EACH,CACEA,OAAQA,EACRkB,SAAUlB,GAEZA,EACFR,EAAMC,UAAUO,EAAOkB,YACzBC,EAAY,UAAYnB,EAAOA,QAAU,CACvCL,QAAS4B,OACPR,EAAeS,QAAQ,kBAAmBxB,EAAOA,QACjD,KAEFJ,YAAY,EACZC,OAAQ,CACN,cAAe,CACbF,QAAS,WACTM,MAAO,YAETH,KAAMN,EAAMC,UAAUO,EAAOkB,YAIrC,CACA1B,EAAMC,UAAUgC,aAAa,MAAO,SAAUN,EAC/C,CArMA,CAqME3B,EACL,CA1MAkC,EAAOC,QAAUpC,EACjBA,EAAIqC,YAAc,MAClBrC,EAAIsC,QAAU,E","sources":["../node_modules/refractor/lang/pug.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = pug\r\npug.displayName = 'pug'\r\npug.aliases = []\r\nfunction pug(Prism) {\r\n  ;(function(Prism) {\r\n    // TODO:\r\n    // - Add CSS highlighting inside <style> tags\r\n    // - Add support for multi-line code blocks\r\n    // - Add support for interpolation #{} and !{}\r\n    // - Add support for tag interpolation #[]\r\n    // - Add explicit support for plain text using |\r\n    // - Add support for markup embedded in plain text\r\n    Prism.languages.pug = {\r\n      // Multiline stuff should appear before the rest\r\n      // This handles both single-line and multi-line comments\r\n      comment: {\r\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\r\n        lookbehind: true\r\n      },\r\n      // All the tag-related part is in lookbehind\r\n      // so that it can be highlighted by the \"tag\" pattern\r\n      'multiline-script': {\r\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          rest: Prism.languages.javascript\r\n        }\r\n      },\r\n      // See at the end of the file for known filters\r\n      filter: {\r\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          'filter-name': {\r\n            pattern: /^:[\\w-]+/,\r\n            alias: 'variable'\r\n          }\r\n        }\r\n      },\r\n      'multiline-plain-text': {\r\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\r\n        lookbehind: true\r\n      },\r\n      markup: {\r\n        pattern: /(^[\\t ]*)<.+/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          rest: Prism.languages.markup\r\n        }\r\n      },\r\n      doctype: {\r\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\r\n        lookbehind: true\r\n      },\r\n      // This handle all conditional and loop keywords\r\n      'flow-control': {\r\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          each: {\r\n            pattern: /^each .+? in\\b/,\r\n            inside: {\r\n              keyword: /\\b(?:each|in)\\b/,\r\n              punctuation: /,/\r\n            }\r\n          },\r\n          branch: {\r\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\r\n            alias: 'keyword'\r\n          },\r\n          rest: Prism.languages.javascript\r\n        }\r\n      },\r\n      keyword: {\r\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\r\n        lookbehind: true\r\n      },\r\n      mixin: [\r\n        // Declaration\r\n        {\r\n          pattern: /(^[\\t ]*)mixin .+/m,\r\n          lookbehind: true,\r\n          inside: {\r\n            keyword: /^mixin/,\r\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\r\n            punctuation: /[(),.]/\r\n          }\r\n        }, // Usage\r\n        {\r\n          pattern: /(^[\\t ]*)\\+.+/m,\r\n          lookbehind: true,\r\n          inside: {\r\n            name: {\r\n              pattern: /^\\+\\w+/,\r\n              alias: 'function'\r\n            },\r\n            rest: Prism.languages.javascript\r\n          }\r\n        }\r\n      ],\r\n      script: {\r\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          rest: Prism.languages.javascript\r\n        }\r\n      },\r\n      'plain-text': {\r\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\r\n        lookbehind: true\r\n      },\r\n      tag: {\r\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          attributes: [\r\n            {\r\n              pattern: /&[^(]+\\([^)]+\\)/,\r\n              inside: {\r\n                rest: Prism.languages.javascript\r\n              }\r\n            },\r\n            {\r\n              pattern: /\\([^)]+\\)/,\r\n              inside: {\r\n                'attr-value': {\r\n                  pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\r\n                  lookbehind: true,\r\n                  inside: {\r\n                    rest: Prism.languages.javascript\r\n                  }\r\n                },\r\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\r\n                punctuation: /[!=(),]+/\r\n              }\r\n            }\r\n          ],\r\n          punctuation: /:/\r\n        }\r\n      },\r\n      code: [\r\n        {\r\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\r\n          lookbehind: true,\r\n          inside: {\r\n            rest: Prism.languages.javascript\r\n          }\r\n        }\r\n      ],\r\n      punctuation: /[.\\-!=|]+/\r\n    }\r\n    var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/\r\n      .source // Non exhaustive list of available filters and associated languages\r\n    var filters = [\r\n      {\r\n        filter: 'atpl',\r\n        language: 'twig'\r\n      },\r\n      {\r\n        filter: 'coffee',\r\n        language: 'coffeescript'\r\n      },\r\n      'ejs',\r\n      'handlebars',\r\n      'less',\r\n      'livescript',\r\n      'markdown',\r\n      {\r\n        filter: 'sass',\r\n        language: 'scss'\r\n      },\r\n      'stylus'\r\n    ]\r\n    var all_filters = {}\r\n    for (var i = 0, l = filters.length; i < l; i++) {\r\n      var filter = filters[i]\r\n      filter =\r\n        typeof filter === 'string'\r\n          ? {\r\n              filter: filter,\r\n              language: filter\r\n            }\r\n          : filter\r\n      if (Prism.languages[filter.language]) {\r\n        all_filters['filter-' + filter.filter] = {\r\n          pattern: RegExp(\r\n            filter_pattern.replace('{{filter_name}}', filter.filter),\r\n            'm'\r\n          ),\r\n          lookbehind: true,\r\n          inside: {\r\n            'filter-name': {\r\n              pattern: /^:[\\w-]+/,\r\n              alias: 'variable'\r\n            },\r\n            rest: Prism.languages[filter.language]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\r\n  })(Prism)\r\n}\r\n"],"names":["pug","Prism","languages","comment","pattern","lookbehind","inside","rest","javascript","filter","alias","markup","doctype","each","keyword","punctuation","branch","mixin","function","name","script","tag","attributes","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","module","exports","displayName","aliases"],"sourceRoot":""}