{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_haskell.9ac6e18c.chunk.js","mappings":"sGAKA,SAASA,EAAQC,GACfA,EAAMC,UAAUF,QAAU,CACxBG,QAAS,CACPC,QAAS,+EACTC,YAAY,GAEdC,KAAM,sMACNC,OAAQ,CACNH,QAAS,+MACTI,QAAQ,GAEVC,QAAS,wHACTC,iBAAkB,CAIhBN,QAAS,wJACTC,YAAY,EACZM,OAAQ,CACNF,QAAS,uCAIbG,QAAS,yoDAETC,OAAQ,4DAMRC,SAAU,2KAEVC,UAAW,qCACXC,SAAU,oCACVC,YAAa,iBAEfhB,EAAMC,UAAUgB,GAAKjB,EAAMC,UAAUF,OACvC,CAzCAmB,EAAOC,QAAUpB,EACjBA,EAAQqB,YAAc,UACtBrB,EAAQsB,QAAU,CAAC,K","sources":["../node_modules/refractor/lang/haskell.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = haskell\r\nhaskell.displayName = 'haskell'\r\nhaskell.aliases = ['hs']\r\nfunction haskell(Prism) {\r\n  Prism.languages.haskell = {\r\n    comment: {\r\n      pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,\r\n      lookbehind: true\r\n    },\r\n    char: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\r\n    string: {\r\n      pattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,\r\n      greedy: true\r\n    },\r\n    keyword: /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\r\n    import_statement: {\r\n      // The imported or hidden names are not included in this import\r\n      // statement. This is because we want to highlight those exactly like\r\n      // we do for the names in the program.\r\n      pattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\r\n      lookbehind: true,\r\n      inside: {\r\n        keyword: /\\b(?:import|qualified|as|hiding)\\b/\r\n      }\r\n    },\r\n    // These are builtin variables only. Constructors are highlighted later as a constant.\r\n    builtin: /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\r\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\r\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\r\n    // Most of this is needed because of the meaning of a single '.'.\r\n    // If it stands alone freely, it is the function composition.\r\n    // It may also be a separator between a module name and an identifier => no\r\n    // operator. If it comes together with other special characters it is an\r\n    // operator too.\r\n    operator: /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\r\n    // In Haskell, nearly everything is a variable, do not highlight these.\r\n    hvariable: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,\r\n    constant: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,\r\n    punctuation: /[{}[\\];(),.:]/\r\n  }\r\n  Prism.languages.hs = Prism.languages.haskell\r\n}\r\n"],"names":["haskell","Prism","languages","comment","pattern","lookbehind","char","string","greedy","keyword","import_statement","inside","builtin","number","operator","hvariable","constant","punctuation","hs","module","exports","displayName","aliases"],"sourceRoot":""}