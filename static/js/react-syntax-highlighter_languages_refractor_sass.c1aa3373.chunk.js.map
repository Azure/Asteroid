{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_sass.c1aa3373.chunk.js","mappings":"sGAKA,SAASA,EAAKC,IACX,SAAUA,GACTA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,MAAO,CAEnDC,QAAS,CACPC,QAAS,iDACTC,YAAY,KAGhBL,EAAMC,UAAUK,aAAa,OAAQ,SAAU,CAE7C,cAAe,CAEbF,QAAS,sBACTG,OAAQ,CACNC,OAAQ,+BAIPR,EAAMC,UAAUF,KAAKS,OAC5B,IAAIC,EAAW,yBACXC,EAAW,CACb,2CACA,CACEN,QAAS,eACTC,YAAY,IAGhBL,EAAMC,UAAUK,aAAa,OAAQ,WAAY,CAE/C,gBAAiB,CACfF,QAAS,eACTG,OAAQ,CACNI,YAAa,IACbF,SAAUA,EACVC,SAAUA,IAId,gBAAiB,CACfN,QAAS,sCACTG,OAAQ,CACNK,SAAU,CACR,kBACA,CACER,QAAS,aACTC,YAAY,IAGhBM,YAAa,IACbF,SAAUA,EACVC,SAAUA,EACVG,UAAWb,EAAMC,UAAUF,KAAKc,qBAI/Bb,EAAMC,UAAUF,KAAKa,gBACrBZ,EAAMC,UAAUF,KAAKc,UAE5Bb,EAAMC,UAAUK,aAAa,OAAQ,cAAe,CAClDQ,SAAU,CACRV,QAAS,yEACTC,YAAY,IAGjB,CAhEA,CAgEEL,EACL,CArEAe,EAAOC,QAAUjB,EACjBA,EAAKkB,YAAc,OACnBlB,EAAKmB,QAAU,E","sources":["../node_modules/refractor/lang/sass.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = sass\r\nsass.displayName = 'sass'\r\nsass.aliases = []\r\nfunction sass(Prism) {\r\n  ;(function(Prism) {\r\n    Prism.languages.sass = Prism.languages.extend('css', {\r\n      // Sass comments don't need to be closed, only indented\r\n      comment: {\r\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\r\n        lookbehind: true\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('sass', 'atrule', {\r\n      // We want to consume the whole line\r\n      'atrule-line': {\r\n        // Includes support for = and + shortcuts\r\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\r\n        inside: {\r\n          atrule: /(?:@[\\w-]+|[+=])/m\r\n        }\r\n      }\r\n    })\r\n    delete Prism.languages.sass.atrule\r\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\r\n    var operator = [\r\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\r\n      {\r\n        pattern: /(\\s+)-(?=\\s)/,\r\n        lookbehind: true\r\n      }\r\n    ]\r\n    Prism.languages.insertBefore('sass', 'property', {\r\n      // We want to consume the whole line\r\n      'variable-line': {\r\n        pattern: /^[ \\t]*\\$.+/m,\r\n        inside: {\r\n          punctuation: /:/,\r\n          variable: variable,\r\n          operator: operator\r\n        }\r\n      },\r\n      // We want to consume the whole line\r\n      'property-line': {\r\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\r\n        inside: {\r\n          property: [\r\n            /[^:\\s]+(?=\\s*:)/,\r\n            {\r\n              pattern: /(:)[^:\\s]+/,\r\n              lookbehind: true\r\n            }\r\n          ],\r\n          punctuation: /:/,\r\n          variable: variable,\r\n          operator: operator,\r\n          important: Prism.languages.sass.important\r\n        }\r\n      }\r\n    })\r\n    delete Prism.languages.sass.property\r\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\r\n    // what's left should be selectors\r\n    Prism.languages.insertBefore('sass', 'punctuation', {\r\n      selector: {\r\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\r\n        lookbehind: true\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n"],"names":["sass","Prism","languages","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector","module","exports","displayName","aliases"],"sourceRoot":""}