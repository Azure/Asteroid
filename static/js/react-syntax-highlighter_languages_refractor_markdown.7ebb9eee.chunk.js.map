{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_markdown.7ebb9eee.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/markdown.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = markdown\r\nmarkdown.displayName = 'markdown'\r\nmarkdown.aliases = ['md']\r\nfunction markdown(Prism) {\r\n  ;(function(Prism) {\r\n    // Allow only one line break\r\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source\r\n    /**\r\n     * This function is intended for the creation of the bold or italic pattern.\r\n     *\r\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\r\n     *\r\n     * _Note:_ Keep in mind that this adds a capturing group.\r\n     *\r\n     * @param {string} pattern\r\n     * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\r\n     * @returns {RegExp}\r\n     */\r\n    function createInline(pattern, starAlternative) {\r\n      pattern = pattern.replace(/<inner>/g, inner)\r\n      if (starAlternative) {\r\n        pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*')\r\n      }\r\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\r\n    }\r\n    var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source\r\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(\r\n      /__/g,\r\n      tableCell\r\n    )\r\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/\r\n      .source\r\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\r\n    Prism.languages.insertBefore('markdown', 'prolog', {\r\n      blockquote: {\r\n        // > ...\r\n        pattern: /^>(?:[\\t ]*>)*/m,\r\n        alias: 'punctuation'\r\n      },\r\n      table: {\r\n        pattern: RegExp(\r\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\r\n          'm'\r\n        ),\r\n        inside: {\r\n          'table-data-rows': {\r\n            pattern: RegExp(\r\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\r\n            ),\r\n            lookbehind: true,\r\n            inside: {\r\n              'table-data': {\r\n                pattern: RegExp(tableCell),\r\n                inside: Prism.languages.markdown\r\n              },\r\n              punctuation: /\\|/\r\n            }\r\n          },\r\n          'table-line': {\r\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\r\n            lookbehind: true,\r\n            inside: {\r\n              punctuation: /\\||:?-{3,}:?/\r\n            }\r\n          },\r\n          'table-header-row': {\r\n            pattern: RegExp('^' + tableRow + '$'),\r\n            inside: {\r\n              'table-header': {\r\n                pattern: RegExp(tableCell),\r\n                alias: 'important',\r\n                inside: Prism.languages.markdown\r\n              },\r\n              punctuation: /\\|/\r\n            }\r\n          }\r\n        }\r\n      },\r\n      code: [\r\n        {\r\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\r\n          pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\r\n          lookbehind: true,\r\n          alias: 'keyword'\r\n        },\r\n        {\r\n          // `code`\r\n          // ``code``\r\n          pattern: /``.+?``|`[^`\\r\\n]+`/,\r\n          alias: 'keyword'\r\n        },\r\n        {\r\n          // ```optional language\r\n          // code block\r\n          // ```\r\n          pattern: /^```[\\s\\S]*?^```$/m,\r\n          greedy: true,\r\n          inside: {\r\n            'code-block': {\r\n              pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\r\n              lookbehind: true\r\n            },\r\n            'code-language': {\r\n              pattern: /^(```).+/,\r\n              lookbehind: true\r\n            },\r\n            punctuation: /```/\r\n          }\r\n        }\r\n      ],\r\n      title: [\r\n        {\r\n          // title 1\r\n          // =======\r\n          // title 2\r\n          // -------\r\n          pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\r\n          alias: 'important',\r\n          inside: {\r\n            punctuation: /==+$|--+$/\r\n          }\r\n        },\r\n        {\r\n          // # title 1\r\n          // ###### title 6\r\n          pattern: /(^\\s*)#+.+/m,\r\n          lookbehind: true,\r\n          alias: 'important',\r\n          inside: {\r\n            punctuation: /^#+|#+$/\r\n          }\r\n        }\r\n      ],\r\n      hr: {\r\n        // ***\r\n        // ---\r\n        // * * *\r\n        // -----------\r\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\r\n        lookbehind: true,\r\n        alias: 'punctuation'\r\n      },\r\n      list: {\r\n        // * item\r\n        // + item\r\n        // - item\r\n        // 1. item\r\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\r\n        lookbehind: true,\r\n        alias: 'punctuation'\r\n      },\r\n      'url-reference': {\r\n        // [id]: http://example.com \"Optional title\"\r\n        // [id]: http://example.com 'Optional title'\r\n        // [id]: http://example.com (Optional title)\r\n        // [id]: <http://example.com> \"Optional title\"\r\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\r\n        inside: {\r\n          variable: {\r\n            pattern: /^(!?\\[)[^\\]]+/,\r\n            lookbehind: true\r\n          },\r\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\r\n          punctuation: /^[\\[\\]!:]|[<>]/\r\n        },\r\n        alias: 'url'\r\n      },\r\n      bold: {\r\n        // **strong**\r\n        // __strong__\r\n        // allow one nested instance of italic text using the same delimiter\r\n        pattern: createInline(\r\n          /__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source,\r\n          true\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          content: {\r\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n          },\r\n          punctuation: /\\*\\*|__/\r\n        }\r\n      },\r\n      italic: {\r\n        // *em*\r\n        // _em_\r\n        // allow one nested instance of bold text using the same delimiter\r\n        pattern: createInline(\r\n          /_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source,\r\n          true\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          content: {\r\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n          },\r\n          punctuation: /[*_]/\r\n        }\r\n      },\r\n      strike: {\r\n        // ~~strike through~~\r\n        // ~strike~\r\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          content: {\r\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n          },\r\n          punctuation: /~~?/\r\n        }\r\n      },\r\n      url: {\r\n        // [example](http://example.com \"Optional title\")\r\n        // [example][id]\r\n        // [example] [id]\r\n        pattern: createInline(\r\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/\r\n            .source,\r\n          false\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          variable: {\r\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\r\n            lookbehind: true\r\n          },\r\n          content: {\r\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n          },\r\n          string: {\r\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\r\n          }\r\n        }\r\n      }\r\n    })\r\n    ;['url', 'bold', 'italic', 'strike'].forEach(function(token) {\r\n      ;['url', 'bold', 'italic', 'strike'].forEach(function(inside) {\r\n        if (token !== inside) {\r\n          Prism.languages.markdown[token].inside.content.inside[inside] =\r\n            Prism.languages.markdown[inside]\r\n        }\r\n      })\r\n    })\r\n    Prism.hooks.add('after-tokenize', function(env) {\r\n      if (env.language !== 'markdown' && env.language !== 'md') {\r\n        return\r\n      }\r\n      function walkTokens(tokens) {\r\n        if (!tokens || typeof tokens === 'string') {\r\n          return\r\n        }\r\n        for (var i = 0, l = tokens.length; i < l; i++) {\r\n          var token = tokens[i]\r\n          if (token.type !== 'code') {\r\n            walkTokens(token.content)\r\n            continue\r\n          }\r\n          /*\r\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\r\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\r\n           *\r\n           * token.content = [\r\n           *     <span class=\"punctuation\">```</span>,\r\n           *     <span class=\"code-language\">xxxx</span>,\r\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\r\n           *     <span class=\"code-block\">...</span>,\r\n           *     '\\n', // exactly one new lines again\r\n           *     <span class=\"punctuation\">```</span>\r\n           * ];\r\n           */\r\n          var codeLang = token.content[1]\r\n          var codeBlock = token.content[3]\r\n          if (\r\n            codeLang &&\r\n            codeBlock &&\r\n            codeLang.type === 'code-language' &&\r\n            codeBlock.type === 'code-block' &&\r\n            typeof codeLang.content === 'string'\r\n          ) {\r\n            // this might be a language that Prism does not support\r\n            var alias =\r\n              'language-' +\r\n              codeLang.content\r\n                .trim()\r\n                .split(/\\s+/)[0]\r\n                .toLowerCase() // add alias\r\n            if (!codeBlock.alias) {\r\n              codeBlock.alias = [alias]\r\n            } else if (typeof codeBlock.alias === 'string') {\r\n              codeBlock.alias = [codeBlock.alias, alias]\r\n            } else {\r\n              codeBlock.alias.push(alias)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      walkTokens(env.tokens)\r\n    })\r\n    Prism.hooks.add('wrap', function(env) {\r\n      if (env.type !== 'code-block') {\r\n        return\r\n      }\r\n      var codeLang = ''\r\n      for (var i = 0, l = env.classes.length; i < l; i++) {\r\n        var cls = env.classes[i]\r\n        var match = /language-(.+)/.exec(cls)\r\n        if (match) {\r\n          codeLang = match[1]\r\n          break\r\n        }\r\n      }\r\n      var grammar = Prism.languages[codeLang]\r\n      if (!grammar) {\r\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\r\n          var id =\r\n            'md-' +\r\n            new Date().valueOf() +\r\n            '-' +\r\n            Math.floor(Math.random() * 1e16)\r\n          env.attributes['id'] = id\r\n          Prism.plugins.autoloader.loadLanguages(codeLang, function() {\r\n            var ele = document.getElementById(id)\r\n            if (ele) {\r\n              ele.innerHTML = Prism.highlight(\r\n                ele.textContent,\r\n                Prism.languages[codeLang],\r\n                codeLang\r\n              )\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        // reverse Prism.util.encode\r\n        var code = env.content.value\r\n          .replace(/&lt;/g, '<')\r\n          .replace(/&amp;/g, '&')\r\n        env.content = Prism.highlight(code, grammar, codeLang)\r\n      }\r\n    })\r\n    Prism.languages.md = Prism.languages.markdown\r\n  })(Prism)\r\n}\r\n"],"names":["markdown","Prism","inner","source","createInline","pattern","starAlternative","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","blockquote","alias","table","inside","lookbehind","punctuation","code","greedy","title","hr","list","variable","string","bold","content","italic","strike","url","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","trim","split","toLowerCase","push","classes","cls","match","exec","grammar","value","highlight","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","module","exports","displayName","aliases"],"sourceRoot":""}