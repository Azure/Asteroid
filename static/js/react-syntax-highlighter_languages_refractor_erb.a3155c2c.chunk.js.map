{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_erb.a3155c2c.chunk.js","mappings":"mHACA,IAAIA,EAA4BC,EAAQ,KACpCC,EAAgBD,EAAQ,MAI5B,SAASE,EAAIC,GACXA,EAAMC,SAASL,GACfI,EAAMC,SAASH,GACd,SAAUE,GACTA,EAAME,UAAUH,IAAMC,EAAME,UAAUC,OAAO,OAAQ,CAAC,GACtDH,EAAME,UAAUE,aAAa,MAAO,UAAW,CAC7CC,UAAW,CACTC,QAAS,YACTC,MAAO,iBAGXP,EAAMQ,MAAMC,IAAI,mBAAmB,SAASC,GAE1CV,EAAME,UAAU,qBAAqBS,kBACnCD,EACA,MAHe,qEAMnB,IACAV,EAAMQ,MAAMC,IAAI,kBAAkB,SAASC,GACzCV,EAAME,UAAU,qBAAqBU,qBAAqBF,EAAK,MACjE,GACD,CAnBA,CAmBEV,EACL,CA1BAa,EAAOC,QAAUf,EACjBA,EAAIgB,YAAc,MAClBhB,EAAIiB,QAAU,E,kBCAd,SAASC,EAAiBjB,IACvB,SAAUA,GAQT,SAASkB,EAAeC,EAAUC,GAChC,MAAO,MAAQD,EAASE,cAAgBD,EAAQ,KAClD,CACAE,OAAOC,iBAAkBvB,EAAME,UAAU,qBAAuB,CAAC,EAAI,CACnES,kBAAmB,CAYjBa,MAAO,SAASd,EAAKS,EAAUM,EAAoBC,GACjD,GAAIhB,EAAIS,WAAaA,EAArB,CAGA,IAAIQ,EAAcjB,EAAIiB,WAAa,GACnCjB,EAAIkB,KAAOlB,EAAIkB,KAAKC,QAAQJ,GAAoB,SAASK,GACvD,GAA6B,oBAAlBJ,IAAiCA,EAAcI,GACxD,OAAOA,EAIT,IAFA,IACIC,EADAC,EAAIL,EAAWM,QAIhB,IADDvB,EAAIkB,KAAKM,QAASH,EAAcb,EAAeC,EAAUa,OAGvDA,EAEJ,OADAL,EAAWK,GAAKF,EACTC,CACT,IACArB,EAAIyB,QAAUnC,EAAME,UAAUkC,MAhB9B,CAiBF,GAEFxB,qBAAsB,CAOpBY,MAAO,SAASd,EAAKS,GACnB,GAAIT,EAAIS,WAAaA,GAAaT,EAAIiB,WAAtC,CAGAjB,EAAIyB,QAAUnC,EAAME,UAAUiB,GAC9B,IAAIkB,EAAI,EACJC,EAAOhB,OAAOgB,KAAK5B,EAAIiB,aAC3B,SAASY,EAAWC,GAClB,IAAK,IAAIR,EAAI,EAAGA,EAAIQ,EAAOP,UAErBI,GAAKC,EAAKL,QAFmBD,IAAK,CAKtC,IAAIS,EAAQD,EAAOR,GACnB,GACmB,kBAAVS,GACNA,EAAMC,SAAoC,kBAAlBD,EAAMC,QAC/B,CACA,IAAIC,EAAIL,EAAKD,GACTO,EAAIlC,EAAIiB,WAAWgB,GACnBE,EAAqB,kBAAVJ,EAAqBA,EAAQA,EAAMC,QAC9CX,EAAcb,EAAeC,EAAUwB,GACvCvB,EAAQyB,EAAEX,QAAQH,GACtB,GAAIX,GAAS,EAAG,GACZiB,EACF,IAAIS,EAASD,EAAEE,UAAU,EAAG3B,GACxB4B,EAAS,IAAIhD,EAAMiD,MACrB9B,EACAnB,EAAMkD,SAASN,EAAGlC,EAAIyB,SACtB,YAAchB,EACdyB,GAEEO,EAAQN,EAAEE,UAAU3B,EAAQW,EAAYE,QACxCmB,EAAc,GACdN,GACFM,EAAYC,KAAKC,MAAMF,EAAab,EAAW,CAACO,KAElDM,EAAYC,KAAKL,GACbG,GACFC,EAAYC,KAAKC,MAAMF,EAAab,EAAW,CAACY,KAE7B,kBAAVV,EACTD,EAAOe,OAAOD,MAAMd,EAAQ,CAACR,EAAG,GAAGwB,OAAOJ,IAE1CX,EAAMC,QAAUU,CAEpB,CACF,MACEX,EAAMC,SAGNH,EAAWE,EAAMC,QAErB,CACA,OAAOF,CACT,CACAD,CAAW7B,EAAI8B,OArDf,CAsDF,IAGL,CAjHA,CAiHExC,EACL,CAtHAa,EAAOC,QAAUG,EACjBA,EAAiBF,YAAc,mBAC/BE,EAAiBD,QAAU,E,mBCC3B,SAASyC,EAAKzD,IAOX,SAAUA,GACTA,EAAME,UAAUuD,KAAOzD,EAAME,UAAUC,OAAO,QAAS,CACrDuD,QAAS,CACP,MACA,CACEpD,QAAS,0BACTqD,QAAQ,IAGZC,QAAS,yRAEX,IAAIC,EAAgB,CAClBvD,QAAS,aACTwD,OAAQ,CACNzD,UAAW,CACTC,QAAS,WACTC,MAAO,OAETwD,KAAM/D,EAAME,UAAUuD,cAGnBzD,EAAME,UAAUuD,KAAKO,SAC5BhE,EAAME,UAAUE,aAAa,OAAQ,UAAW,CAC9C6D,MAAO,CACL,CACE3D,QAAS,+DACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,wCACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CAEEvD,QAAS,yDACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,0CACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,sCACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,6EACT4D,YAAY,EACZP,QAAQ,IAGZQ,SAAU,+BACVC,OAAQ,CACN9D,QAAS,mCACT4D,YAAY,GAEd,oBAAqB,CACnB5D,QAAS,mBACT4D,YAAY,EACZJ,OAAQ,CACNE,SAAU,OACVD,KAAM/D,EAAME,UAAUuD,SAI5BzD,EAAME,UAAUE,aAAa,OAAQ,SAAU,CAC7CiE,QAAS,+OACTC,SAAU,0BAEZtE,EAAME,UAAUuD,KAAKc,OAAS,CAC5B,CACEjE,QAAS,+DACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,wCACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CAEEvD,QAAS,yDACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,0CACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,sCACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAGnB,CACEvD,QAAS,2DACTqD,QAAQ,EACRG,OAAQ,CACND,cAAeA,KAIrB7D,EAAME,UAAUsE,GAAKxE,EAAME,UAAUuD,IACtC,CAlIA,CAkIEzD,EACL,CA7IAa,EAAOC,QAAU2C,EACjBA,EAAK1C,YAAc,OACnB0C,EAAKzC,QAAU,CAAC,K","sources":["../node_modules/refractor/lang/erb.js","../node_modules/refractor/lang/markup-templating.js","../node_modules/refractor/lang/ruby.js"],"sourcesContent":["'use strict'\r\nvar refractorMarkupTemplating = require('./markup-templating.js')\r\nvar refractorRuby = require('./ruby.js')\r\nmodule.exports = erb\r\nerb.displayName = 'erb'\r\nerb.aliases = []\r\nfunction erb(Prism) {\r\n  Prism.register(refractorMarkupTemplating)\r\n  Prism.register(refractorRuby)\r\n  ;(function(Prism) {\r\n    Prism.languages.erb = Prism.languages.extend('ruby', {})\r\n    Prism.languages.insertBefore('erb', 'comment', {\r\n      delimiter: {\r\n        pattern: /^<%=?|%>$/,\r\n        alias: 'punctuation'\r\n      }\r\n    })\r\n    Prism.hooks.add('before-tokenize', function(env) {\r\n      var erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm\r\n      Prism.languages['markup-templating'].buildPlaceholders(\r\n        env,\r\n        'erb',\r\n        erbPattern\r\n      )\r\n    })\r\n    Prism.hooks.add('after-tokenize', function(env) {\r\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb')\r\n    })\r\n  })(Prism)\r\n}\r\n","'use strict'\r\n\r\nmodule.exports = markupTemplating\r\nmarkupTemplating.displayName = 'markupTemplating'\r\nmarkupTemplating.aliases = []\r\nfunction markupTemplating(Prism) {\r\n  ;(function(Prism) {\r\n    /**\r\n     * Returns the placeholder for the given language id and index.\r\n     *\r\n     * @param {string} language\r\n     * @param {string|number} index\r\n     * @returns {string}\r\n     */\r\n    function getPlaceholder(language, index) {\r\n      return '___' + language.toUpperCase() + index + '___'\r\n    }\r\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\r\n      buildPlaceholders: {\r\n        /**\r\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\r\n         *\r\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\r\n         * `true` will be replaced.\r\n         *\r\n         * @param {object} env The environment of the `before-tokenize` hook.\r\n         * @param {string} language The language id.\r\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\r\n         * @param {(match: string) => boolean} [replaceFilter]\r\n         */\r\n        value: function(env, language, placeholderPattern, replaceFilter) {\r\n          if (env.language !== language) {\r\n            return\r\n          }\r\n          var tokenStack = (env.tokenStack = [])\r\n          env.code = env.code.replace(placeholderPattern, function(match) {\r\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\r\n              return match\r\n            }\r\n            var i = tokenStack.length\r\n            var placeholder // Check for existing strings\r\n            while (\r\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\r\n              -1\r\n            )\r\n              ++i // Create a sparse array\r\n            tokenStack[i] = match\r\n            return placeholder\r\n          }) // Switch the grammar to markup\r\n          env.grammar = Prism.languages.markup\r\n        }\r\n      },\r\n      tokenizePlaceholders: {\r\n        /**\r\n         * Replace placeholders with proper tokens after tokenizing.\r\n         *\r\n         * @param {object} env The environment of the `after-tokenize` hook.\r\n         * @param {string} language The language id.\r\n         */\r\n        value: function(env, language) {\r\n          if (env.language !== language || !env.tokenStack) {\r\n            return\r\n          } // Switch the grammar back\r\n          env.grammar = Prism.languages[language]\r\n          var j = 0\r\n          var keys = Object.keys(env.tokenStack)\r\n          function walkTokens(tokens) {\r\n            for (var i = 0; i < tokens.length; i++) {\r\n              // all placeholders are replaced already\r\n              if (j >= keys.length) {\r\n                break\r\n              }\r\n              var token = tokens[i]\r\n              if (\r\n                typeof token === 'string' ||\r\n                (token.content && typeof token.content === 'string')\r\n              ) {\r\n                var k = keys[j]\r\n                var t = env.tokenStack[k]\r\n                var s = typeof token === 'string' ? token : token.content\r\n                var placeholder = getPlaceholder(language, k)\r\n                var index = s.indexOf(placeholder)\r\n                if (index > -1) {\r\n                  ++j\r\n                  var before = s.substring(0, index)\r\n                  var middle = new Prism.Token(\r\n                    language,\r\n                    Prism.tokenize(t, env.grammar),\r\n                    'language-' + language,\r\n                    t\r\n                  )\r\n                  var after = s.substring(index + placeholder.length)\r\n                  var replacement = []\r\n                  if (before) {\r\n                    replacement.push.apply(replacement, walkTokens([before]))\r\n                  }\r\n                  replacement.push(middle)\r\n                  if (after) {\r\n                    replacement.push.apply(replacement, walkTokens([after]))\r\n                  }\r\n                  if (typeof token === 'string') {\r\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\r\n                  } else {\r\n                    token.content = replacement\r\n                  }\r\n                }\r\n              } else if (\r\n                token.content\r\n                /* && typeof token.content !== 'string' */\r\n              ) {\r\n                walkTokens(token.content)\r\n              }\r\n            }\r\n            return tokens\r\n          }\r\n          walkTokens(env.tokens)\r\n        }\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n","'use strict'\r\n\r\nmodule.exports = ruby\r\nruby.displayName = 'ruby'\r\nruby.aliases = ['rb']\r\nfunction ruby(Prism) {\r\n  /**\r\n   * Original by Samuel Flores\r\n   *\r\n   * Adds the following new token classes:\r\n   *      constant, builtin, variable, symbol, regex\r\n   */\r\n  ;(function(Prism) {\r\n    Prism.languages.ruby = Prism.languages.extend('clike', {\r\n      comment: [\r\n        /#.*/,\r\n        {\r\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\r\n          greedy: true\r\n        }\r\n      ],\r\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\r\n    })\r\n    var interpolation = {\r\n      pattern: /#\\{[^}]+\\}/,\r\n      inside: {\r\n        delimiter: {\r\n          pattern: /^#\\{|\\}$/,\r\n          alias: 'tag'\r\n        },\r\n        rest: Prism.languages.ruby\r\n      }\r\n    }\r\n    delete Prism.languages.ruby.function\r\n    Prism.languages.insertBefore('ruby', 'keyword', {\r\n      regex: [\r\n        {\r\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation\r\n          }\r\n        },\r\n        {\r\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation\r\n          }\r\n        },\r\n        {\r\n          // Here we need to specifically allow interpolation\r\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation\r\n          }\r\n        },\r\n        {\r\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation\r\n          }\r\n        },\r\n        {\r\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: interpolation\r\n          }\r\n        },\r\n        {\r\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\r\n      symbol: {\r\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\r\n        lookbehind: true\r\n      },\r\n      'method-definition': {\r\n        pattern: /(\\bdef\\s+)[\\w.]+/,\r\n        lookbehind: true,\r\n        inside: {\r\n          function: /\\w+$/,\r\n          rest: Prism.languages.ruby\r\n        }\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('ruby', 'number', {\r\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\r\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\r\n    })\r\n    Prism.languages.ruby.string = [\r\n      {\r\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: interpolation\r\n        }\r\n      },\r\n      {\r\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: interpolation\r\n        }\r\n      },\r\n      {\r\n        // Here we need to specifically allow interpolation\r\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: interpolation\r\n        }\r\n      },\r\n      {\r\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: interpolation\r\n        }\r\n      },\r\n      {\r\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: interpolation\r\n        }\r\n      },\r\n      {\r\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: interpolation\r\n        }\r\n      }\r\n    ]\r\n    Prism.languages.rb = Prism.languages.ruby\r\n  })(Prism)\r\n}\r\n"],"names":["refractorMarkupTemplating","require","refractorRuby","erb","Prism","register","languages","extend","insertBefore","delimiter","pattern","alias","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","ruby","comment","greedy","keyword","interpolation","inside","rest","function","regex","lookbehind","variable","symbol","builtin","constant","string","rb"],"sourceRoot":""}