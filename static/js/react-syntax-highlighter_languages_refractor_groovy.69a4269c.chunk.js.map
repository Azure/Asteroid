{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_groovy.69a4269c.chunk.js","mappings":"sGAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAASC,EAAMC,UAAUC,OAAO,QAAS,CACvDC,QAAS,6WACTC,OAAQ,CACN,CACEC,QAAS,sDACTC,QAAQ,GAEV,CACED,QAAS,qCACTC,QAAQ,IAGZC,OAAQ,+FACRC,SAAU,CACRH,QAAS,uJACTI,YAAY,GAEdC,YAAa,sBAEfV,EAAMC,UAAUU,aAAa,SAAU,SAAU,CAC/CC,QAAS,CACPP,QAAS,OACTQ,MAAO,aAGXb,EAAMC,UAAUU,aAAa,SAAU,cAAe,CACpD,cAAe,0DAEjBX,EAAMC,UAAUU,aAAa,SAAU,WAAY,CACjDG,WAAY,CACVD,MAAO,cACPR,QAAS,eACTI,YAAY,KAGhBT,EAAMe,MAAMC,IAAI,QAAQ,SAASC,GAC/B,GAAqB,WAAjBA,EAAIC,UAAsC,WAAbD,EAAIE,KAAmB,CACtD,IAAIC,EAAYH,EAAII,QAAQC,MAAM,GAClC,GAAiB,KAAbF,EAAkB,CACpB,IAAIf,EAAU,kCACI,MAAde,IACFf,EAAU,mCAEZY,EAAII,QAAQC,MAAQL,EAAII,QAAQC,MAC7BC,QAAQ,QAAS,KACjBA,QAAQ,SAAU,KACrBN,EAAII,QAAUrB,EAAMwB,UAAUP,EAAII,QAAQC,MAAO,CAC/CG,WAAY,CACVpB,QAASA,EACTI,YAAY,EACZiB,OAAQ1B,EAAMC,UAAUF,UAG5BkB,EAAIU,QAAQC,KAAmB,MAAdR,EAAoB,QAAU,UACjD,CACF,CACF,GACF,CA7DAS,EAAOC,QAAU/B,EACjBA,EAAOgC,YAAc,SACrBhC,EAAOiC,QAAU,E","sources":["../node_modules/refractor/lang/groovy.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = groovy\r\ngroovy.displayName = 'groovy'\r\ngroovy.aliases = []\r\nfunction groovy(Prism) {\r\n  Prism.languages.groovy = Prism.languages.extend('clike', {\r\n    keyword: /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\r\n    string: [\r\n      {\r\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n        greedy: true\r\n      }\r\n    ],\r\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\r\n    operator: {\r\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\r\n      lookbehind: true\r\n    },\r\n    punctuation: /\\.+|[{}[\\];(),:$]/\r\n  })\r\n  Prism.languages.insertBefore('groovy', 'string', {\r\n    shebang: {\r\n      pattern: /#!.+/,\r\n      alias: 'comment'\r\n    }\r\n  })\r\n  Prism.languages.insertBefore('groovy', 'punctuation', {\r\n    'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\r\n  })\r\n  Prism.languages.insertBefore('groovy', 'function', {\r\n    annotation: {\r\n      alias: 'punctuation',\r\n      pattern: /(^|[^.])@\\w+/,\r\n      lookbehind: true\r\n    }\r\n  }) // Handle string interpolation\r\n  Prism.hooks.add('wrap', function(env) {\r\n    if (env.language === 'groovy' && env.type === 'string') {\r\n      var delimiter = env.content.value[0]\r\n      if (delimiter != \"'\") {\r\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\r\n        if (delimiter === '$') {\r\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\r\n        } // To prevent double HTML-encoding we have to decode env.content first\r\n        env.content.value = env.content.value\r\n          .replace(/&lt;/g, '<')\r\n          .replace(/&amp;/g, '&')\r\n        env.content = Prism.highlight(env.content.value, {\r\n          expression: {\r\n            pattern: pattern,\r\n            lookbehind: true,\r\n            inside: Prism.languages.groovy\r\n          }\r\n        })\r\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring')\r\n      }\r\n    }\r\n  })\r\n}\r\n"],"names":["groovy","Prism","languages","extend","keyword","string","pattern","greedy","number","operator","lookbehind","punctuation","insertBefore","shebang","alias","annotation","hooks","add","env","language","type","delimiter","content","value","replace","highlight","expression","inside","classes","push","module","exports","displayName","aliases"],"sourceRoot":""}